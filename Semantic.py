import re
import Resources
import Lexer, Syntax

class SemanticAnalyzer:
    def __init__(self, tokens):
        self.tokens = tokens
        self.current_token_index = 0
        self.errors = []
        self.current_lexeme = None
        self.current_token = None
        self.function_is_defined = False
        self.disintegrate_exist = False
        self.isMultiple = False
        self.parenthError = False
        self.arrayError = False
        self.notMainError = False
        self.line_number = 1  # Initialize line number to 1
        # variable declaration checking
        self.symbol_table = {}
        self.datatype = None
        self.var_name = None
        self.scope = None
        self.current_scope = None
        # assignment cecking
        self.assignment_variable = None
        # array checking 1D
        self.array_variable = None
        self.array_size = None
        self.array_size_error = False
        self.array_count_table = {}
        self.array_value_count = None
        self.array_variable_table = {}
        # array checking 2D
        self.array2_size = None
        self.array2_row_count = None
        self.is2DValue = False
        self.array2_count_row_table = {}
        self.array2_count_column_table = {}
        self.array2_value_count_row = None
        self.array2_value_count_column = None
        self.array2_variable_table = {}
        # Function Definition checking
        self.parameter_table = {}
        self.isParameterVariable = False
        self.function_datatype = None
        self.current_function_name = None
        self.function_name = None
        self.function_exist = False
        self.parameter_datatype= None
        self.function_assignment_variable = None
        self.function_parameter_var = None
        self.parameter_var_name = None
        self.parameter_current_scope = None
        # Function Prototype checking
        self.isPrototype = False
        self.prototype_parameter_table = {}
        self.prototype_function_datatype = None
        self.prototype_current_function_name = None
        self.prototype_function_name = None
        self.prototype_function_parameter_var = None
        self.prototype_function_exist = False
        self.prototype_parameter_datatype= None
        self.prototype_parameter_var_name = None
        self.prototype_parameter_current_scope = None
        # Class declaration checking
        self.class_table = {}
        self.class_name = None
        self.class_scope = None
        self.class_current_scope = None
        # ISS declaration checking
        self.struct_table = {}
        self.struct_name = None
        self.struct_scope = None
        self.struct_current_scope = None
        # For loop checking
        self.fore_table = {}
        self.fore_id = 1
        self.fore_datatype = None
        self.fore_var_name = None

    #  method that peeks at the next token after the current_token
    def peek_next_token(self):
        next_index = self.current_token_index
        #  spaces, newlines, indentations does not affect the syntax of the program
        while (next_index < len(self.tokens) and
               self.tokens[next_index][1] in ["Space","\n", "\t"]):
            next_index += 1
        if next_index < len(self.tokens):
            if self.tokens[next_index][1] == "\n":
                self.line_number += 1  # Increment line number when encountering a newline
                next_index += 1  # Skip the newline character
            return self.tokens[next_index][1]
        else:
            return None

    def peek_next_lexeme(self):
        next_index = self.current_token_index
        # Skip spaces, newlines, and indentations
        while (next_index < len(self.tokens) and
               self.tokens[next_index][1] in ["Space", "\n", "\t"]):
            next_index += 1
        if next_index < len(self.tokens):
            return self.tokens[next_index][0]  # Return the lexeme of the next token
        else:
            return None

    #  method that gets the next token after a token matched (via match method)
    def get_next_token(self):
        #  spaces, newlines, indentations does not affect the syntax of the program
        while (self.current_token_index < len(self.tokens) and
               self.tokens[self.current_token_index][1] in ["Space","\n", "\t"]):
            if self.tokens[self.current_token_index][1] == "\n":
                self.line_number += 1  # Increment line number when encountering a newline
            self.current_token_index += 1
        if self.current_token_index < len(self.tokens):
            self.current_lexeme, self.current_token = self.tokens[self.current_token_index]
            self.current_token_index += 1
        else:
            self.current_lexeme, self.current_token = None, None

    #  method that peeks at the previous token
    def peek_previous_token(self):
        previous_index = self.current_token_index - 1  # Adjust to the previous index
        # Skip spaces, newlines, and indentations
        while (previous_index >= 0 and
               self.tokens[previous_index][1] in ["Space", "\n", "\t"]):
            previous_index -= 1
        if 0 <= previous_index < len(self.tokens):
            return self.tokens[previous_index][1]
        else:
            return None

    def peek_previous_lexeme(self):
        previous_index = self.current_token_index - 1  # Adjust to the previous index
        # Skip spaces, newlines, and indentations
        while (previous_index >= 0 and
               self.tokens[previous_index][1] in ["Space", "\n", "\t"]):
            previous_index -= 1
        if 0 <= previous_index < len(self.tokens):
            return self.tokens[previous_index][0]  # Return the lexeme of the previous token
        else:
            return None

    #  method that analyzes if the current token is matched with the expected token
    def match(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if self.current_token is not None:
            if isinstance(expected_token, list):
                # If the expected token is a list, check if the current token matches any in the list
                if re.match(r'Identifier\d*$', self.current_token) or self.current_token in expected_token:
                    return True
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected one of '{expected_token}', but instead got '{self.current_token}'")
                    return False
            if self.current_token == expected_token:
                return True
            elif expected_token == "Identifier" and re.match(r'Identifier\d*$', self.current_token):
                return True  # Allow matching "Identifier" regardless of the count
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected '{expected_token}', but instead got '{self.current_token}'")
                return False
        else:
            return False

    #  method that handles multiple identifiers separated with comma
    def matchID_mult(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()
        if self.current_lexeme == "Universe":
            self.peek_next_token()
        else:
            self.var_name = self.current_lexeme  #  assign variable
            current_scope = self.current_scope  # assign current scope
            self.declare_variable(self.var_name, self.datatype, current_scope)  # Store the datatype in the table
        if expected_token == "Identifier" and re.match(r'Identifier\d*$', self.current_token):
            #  if the next is a comma proceed to check if it is followed by an identifier
            if self.peek_next_token() == ",":
                self.match(",")
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.matchID_mult("Identifier")
                # else: if it is not followed by an id, it shows the error
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Identifier' "
                                       f"after '{self.peek_previous_token()}'")
            elif self.peek_next_token() == "~":
                self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected ',', but instead got '{self.peek_next_token()}'")
            else:
                return True  # else: last identifier has no following identifiers (comma)
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected '{expected_token}' but found '{self.current_token}'")
            return False

    #  method that handles output statement
    def match_output(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "<<":
            if (re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral"
                    or self.peek_next_token() == "LuhmanLiteral" or self.peek_next_token() == "StarsysLiteral"
                    or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                self.match(Resources.Value1)  # consume
                # SEMANTIC CHECK
                if re.match(r'Identifier\d*$', self.peek_previous_token()):
                    self.check_variable_usage()
                #  if the next is a '<<' proceed to check if it is followed by any of the given values
                if self.peek_next_token() == "<<":
                    self.match_output("<<")
                #  add display value
                elif self.peek_next_token() == "+":
                    self.match_mathop2("+")
                    if self.peek_next_token() == "<<":
                        self.match_output("<<")
                    elif self.peek_next_token() == "#":
                        return True  # terminate
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', '<<', but instead got '{self.peek_next_token()}'")
                #  subtract display value
                elif self.peek_next_token() == "-":
                    self.match_mathop2("-")
                    if self.peek_next_token() == "<<":
                        self.match_output("<<")
                    elif self.peek_next_token() == "#":
                        return True  # terminate
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', '<<', but instead got '{self.peek_next_token()}'")
                #  multiply display value
                elif self.peek_next_token() == "*":
                    self.match_mathop2("*")
                    if self.peek_next_token() == "<<":
                        self.match_output("<<")
                    elif self.peek_next_token() == "#":
                        return True  # terminate
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', '<<', but instead got '{self.peek_next_token()}'")
                #  divide display value
                elif self.peek_next_token() == "/":
                    self.match_mathop2("/")
                    if self.peek_next_token() == "<<":
                        self.match_output("<<")
                    elif self.peek_next_token() == "#":
                        return True  # terminate
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', '<<', but instead got '{self.peek_next_token()}'")
                #  modulo display value
                elif self.peek_next_token() == "%":
                    self.match_mathop2("%")
                    if self.peek_next_token() == "<<":
                        self.match_output("<<")
                    elif self.peek_next_token() == "#":
                        return True  # terminate
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', '<<', but instead got '{self.peek_next_token()}'")
                #  access module/s, function path
                elif self.peek_next_token() == "." and re.match(r'Identifier\d*$', self.peek_previous_token()):
                    self.instance_path_output(".")  # >>>>call method
                    #  terminate it?
                    if self.peek_next_token() == "#":
                        return True
                    #  another disp?
                    elif self.peek_next_token() == "<<":
                        self.match_output("<<")
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected '<<', '#', but instead got '{self.peek_next_token()}'")
                #  display array index path: <<arr{1}<<arr{1}{1}
                elif self.peek_next_token() == "{" and re.match(r'Identifier\d*$', self.peek_previous_token()):
                    self.match_arrID_output("{")
                    #  terminate it?
                    if self.peek_next_token() == "#":
                        return True
                    #  another disp?
                    elif self.peek_next_token() == "<<":
                        self.match_output("<<")
                #  direct function call path: Disp<<add()#
                elif re.match(r'Identifier\d*$', self.peek_previous_token()) and self.peek_next_token() == "(":
                    self.match("(")  # consume '('
                    # has value/argument
                    if (self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                            or self.peek_next_token() == "StarsysLiteral" or re.match(r'Identifier\d*$', self.peek_next_token())
                            or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                        self.matchValue_mult(Resources.Value1)
                        # close it
                        if self.peek_next_token() == ")":
                            self.match(")")
                            # follow it with '<<'
                            if self.peek_next_token() == "<<":
                                self.match_output("<<")
                            # terminate it
                            elif self.peek_next_token() == "#":
                                return True  # terminate
                            # error: not followed by any of the values
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', '<<', but instead got '{self.peek_next_token()}'")
                        #  error: expected ')'
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                    # empty, no argument
                    elif self.peek_next_token() == ")":
                        self.match(")")
                        # follow it with '<<'
                        if self.peek_next_token() == "<<":
                            self.match_output("<<")
                        # terminate it
                        elif self.peek_next_token() == "#":
                            return True  # terminate
                        # error: not followed by any of the values
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', '<<', but instead got '{self.peek_next_token()}'")
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected ')', 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral', 'Identifier', 'True', 'False', but instead got '{self.peek_next_token()}'")
                else:
                    return True  # else: not followed by any, current form should be "Disp<<value" then return it to terminate
            #  global scope resolution path
            elif self.peek_next_token() == "::":
                self.match("::")
                # must be followed by an identifier
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.match("Identifier")
                    #  terminate it?
                    if self.peek_next_token() == "#":
                        return True
                    #  another disp?
                    elif self.peek_next_token() == "<<":
                        self.match_output("<<")
                #  error: not followed by an identifier
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral',"
                                   f" 'StarsysLiteral', 'True', 'False', '::', but instead got '{self.peek_next_token()}'")
                return False

    #  outputting array indexes
    def match_arrID_output(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "{":
            if (re.match(r'Identifier\d*$', self.peek_next_token())
                    or self.peek_next_token() == "SunLiteral"):
                self.match(Resources.Value3)  # consume the values
                if (self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                    #  close it with "}" if size is fulfilled
                    if self.peek_next_token() == "}":
                        self.match("}")
                        # Terminate it
                        if self.peek_next_token() == "#":
                            return True
                        # add another size to become 2D array
                        if self.peek_next_token() == "{":
                            self.match_arrID2D_output("{")
                            # Terminate it
                            if self.peek_next_token() == "#":
                                return True
                            #  more display
                            elif self.peek_next_token() == "<<":
                                return True
                            #  not terminated or followed
                            else:
                                return False
                        #  more display
                        elif self.peek_next_token() == "<<":
                            return True
                        #  not terminated or followed
                        else:
                            return False
                    #  not closed with '}'
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                #  size is single value
                elif self.peek_next_token() == "}":
                    self.match("}")
                    #  terminate it
                    if self.peek_next_token() == "#":
                        return True
                    # add another size to become 2D array
                    if self.peek_next_token() == "{":
                        self.match_arrID2D_output("{")
                        # Terminate it
                        if self.peek_next_token() == "#":
                            return True
                        #  more display
                        elif self.peek_next_token() == "<<":
                            return True
                        #  not terminated or followed
                        else:
                            return False
                    #  more display
                    elif self.peek_next_token() == "<<":
                        return True
                    #  not terminated or followed
                    else:
                        return False
                #  size value is not followed by any of the following (# and Rcurl)
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
            #  empty size, proceed to close it with '}'
            elif self.peek_next_token() == "}":
                self.match("}")
                # add another size to become 2D array
                if self.peek_next_token() == "{":
                    self.match_arrID2D_output("{")
                    # Terminate it
                    if self.peek_next_token() == "#":
                        return True
                    #  more display
                    elif self.peek_next_token() == "<<":
                        return True
                    #  not terminated or followed
                    else:
                        return False
                #  more display
                elif self.peek_next_token() == "<<":
                    return True
                #  terminate it
                elif self.peek_next_token() == "#":
                    return True
                #  not terminated or followed
                else:
                    return False
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Expected 'Identifier', 'SunLiteral', 'Rcurlybrace', but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(f"(Line {self.line_number}) | Expected {expected_token} but found {self.current_token}")

    #  2D index output
    def match_arrID2D_output(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "{":
            if (re.match(r'Identifier\d*$', self.peek_next_token())
                    or self.peek_next_token() == "SunLiteral"):
                self.match(Resources.Value3)  # consume the values
                if (self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                    #  close it with "}" if size is fulfilled
                    if self.peek_next_token() == "}":
                        self.match("}")
                        # Terminate it
                        if self.peek_next_token() == "#":
                            return True
                        #  more display
                        elif self.peek_next_token() == "<<":
                            return True
                        #  not terminated or followed
                        else:
                            return False
                    #  not closed with '}'
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                #  size is single value
                elif self.peek_next_token() == "}":
                    self.match("}")
                    #  terminate it
                    if self.peek_next_token() == "#":
                        return True
                    #  more display
                    elif self.peek_next_token() == "<<":
                        return True
                    #  not terminated or followed
                    else:
                        return False
                #  size value is not followed by any of the following (# and Rcurl)
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
            #  empty size, proceed to close it with '}'
            elif self.peek_next_token() == "}":
                self.match("}")
                #  more display
                if self.peek_next_token() == "<<":
                    return True
                #  terminate it
                elif self.peek_next_token() == "#":
                    return True
                #  not terminated or followed
                else:
                    return False
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', 'Rcurlybrace', but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected {expected_token} but found {self.current_token}")


    #  2D index assign
    def match_arrID2D_assign(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "{":
            if (re.match(r'Identifier\d*$', self.peek_next_token())
                    or self.peek_next_token() == "SunLiteral"):
                self.match(Resources.Value3)  # consume the values
                if (self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                    #  close it with "}" if size is fulfilled
                    if self.peek_next_token() == "}":
                        self.match("}")
                        # Terminate it
                        if self.peek_next_token() == "#":
                            return True
                        #  add it
                        elif self.peek_next_token() == "+":
                            return True
                        #  subtract it
                        elif self.peek_next_token() == "-":
                            return True
                        #  multiply it
                        elif self.peek_next_token() == "*":
                            return True
                        #  divide it
                        elif self.peek_next_token() == "/":
                            return True
                        #  modulo it
                        elif self.peek_next_token() == "%":
                            return True
                        #  exponentiate it
                        elif self.peek_next_token() == "**":
                            return True
                        #  not terminated or followed
                        else:
                            return False
                    #  not closed with '}'
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                #  size is single value
                elif self.peek_next_token() == "}":
                    self.match("}")
                    #  terminate it
                    if self.peek_next_token() == "#":
                        return True
                    #  add it
                    elif self.peek_next_token() == "+":
                        return True
                    #  subtract it
                    elif self.peek_next_token() == "-":
                        return True
                    #  multiply it
                    elif self.peek_next_token() == "*":
                        return True
                    #  divide it
                    elif self.peek_next_token() == "/":
                        return True
                    #  modulo it
                    elif self.peek_next_token() == "%":
                        return True
                    #  exponentiate it
                    elif self.peek_next_token() == "**":
                        return True
                    #  not terminated or followed
                    else:
                        return False
                #  size value is not followed by any of the following (# and Rcurl)
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
            #  empty size, proceed to close it with '}'
            elif self.peek_next_token() == "}":
                self.match("}")
                #  terminate it
                if self.peek_next_token() == "#":
                    return True
                #  add it
                elif self.peek_next_token() == "+":
                    return True
                #  subtract it
                elif self.peek_next_token() == "-":
                    return True
                #  multiply it
                elif self.peek_next_token() == "*":
                    return True
                #  divide it
                elif self.peek_next_token() == "/":
                    return True
                #  modulo it
                elif self.peek_next_token() == "%":
                    return True
                #  exponentiate it
                elif self.peek_next_token() == "**":
                    return True
                #  not terminated or followed
                else:
                    return False
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', 'Rcurlybrace', but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected {expected_token} but found {self.current_token}")

    # 2D index assign value: arr{1}{2} = 12#
    def match_arrID2D_index_assign(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "{":
            if (re.match(r'Identifier\d*$', self.peek_next_token())
                    or self.peek_next_token() == "SunLiteral"):
                self.match(Resources.Value3)  # consume the values
                if (self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                    #  close it with "}" if size is fulfilled
                    if self.peek_next_token() == "}":
                        # SEMANTIC CHECK
                        self.check_array2_size()
                        self.match("}")
                        # equal it
                        if self.peek_next_token() == "=":
                            return True
                        #  not followed by an equal
                        else:
                            return False
                    #  not closed with '}'
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                #  size is single value
                elif self.peek_next_token() == "}":
                    # SEMANTIC CHECK
                    self.check_array2_size()
                    self.match("}")
                    # equal it
                    if self.peek_next_token() == "=":
                        return True
                    #  not followed by an equal
                    else:
                        return False
                #  size value is not followed by any of the following (# and Rcurl)
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
            #  empty size, proceed to close it with '}'
            elif self.peek_next_token() == "}":
                # SEMANTIC CHECK
                self.check_array2_size()
                self.match("}")
                # equal it
                if self.peek_next_token() == "=":
                    return True
                #  not followed by an equal
                else:
                    return False
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', 'Rcurlybrace', but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected {expected_token} but found {self.current_token}")

    # 2D index assign value: arr{1}{2} = 12#
    def match_arrID2D_index_parameter(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "{":
            if (re.match(r'Identifier\d*$', self.peek_next_token())
                    or self.peek_next_token() == "SunLiteral"):
                self.match(Resources.Value3)  # consume the values
                if (self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                    #  close it with "}" if size is fulfilled
                    if self.peek_next_token() == "}":
                        self.match("}")
                        # close it
                        if self.peek_next_token() == ")":
                            return True
                        #  add another parameter(,)
                        elif self.peek_next_token() == ",":
                            return True
                        #  not followed by an equal
                        else:
                            return False
                    #  not closed with '}'
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                #  size is single value
                elif self.peek_next_token() == "}":
                    self.match("}")
                    # close it
                    if self.peek_next_token() == ")":
                        return True
                    #  add another parameter(,)
                    elif self.peek_next_token() == ",":
                        return True
                    #  not followed by an equal
                    else:
                        return False
                #  size value is not followed by any of the following (# and Rcurl)
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
            #  empty size, proceed to close it with '}'
            elif self.peek_next_token() == "}":
                self.match("}")
                # close it
                if self.peek_next_token() == ")":
                    return True
                #  add another parameter(,)
                elif self.peek_next_token() == ",":
                    return True
                #  not followed by an equal
                else:
                    return False
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', 'Rcurlybrace', but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected {expected_token} but found {self.current_token}")


    #  method that handles input statement
    def match_input(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == ">>":
            if (re.match(r'Identifier\d*$', self.peek_next_token())):
                self.match("Identifier")  # consume
                # SEMANTIC CHECK
                self.check_variable_usage()
                #  if the next is a '>>' proceed to check if it is followed by an identifier
                if self.peek_next_token() == ">>":
                    self.match_input(">>")
                else:
                    return True  # else: last identifier has no following '>>' to display
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                return False

    def match_parenth_condition(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "(":
            if (re.match(r'Identifier\d*$', self.peek_next_token()) or "SunLiteral" or "LuhmanLiteral"
                    or "StarsysLiteral" or "True" or "False"):
                self.match(Resources.Value1)  # consume terms
                #  if the next is a conditional operator, proceed to check if it is followed by the following values
                if (self.peek_next_token() == "==" or self.peek_next_token() == "!=" or self.peek_next_token() == "<"
                        or self.peek_next_token() == ">" or self.peek_next_token() == "<=" or self.peek_next_token() == ">="
                        or self.peek_next_token() == "||" or self.peek_next_token() == "&&" or self.peek_next_token() == "!"
                        or self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                    self.match(Resources.condop)
                    if (re.match(r'Identifier\d*$', self.peek_next_token()) or "SunLiteral" or "LuhmanLiteral"
                            or "StarsysLiteral" or "True" or "False"):
                        self.match(Resources.Value1)
                        #  more values
                        #  if the next is a conditional operator, proceed to check if it is followed by the following values
                        if (
                                self.peek_next_token() == "==" or self.peek_next_token() == "!=" or self.peek_next_token() == "<"
                                or self.peek_next_token() == ">" or self.peek_next_token() == "<=" or self.peek_next_token() == ">="
                                or self.peek_next_token() == "||" or self.peek_next_token() == "&&" or self.peek_next_token() == "!"
                                or self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                            self.match(Resources.condop)
                            #  must be followed by these values
                            if (re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                                    or self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True" or self.peek_next_token() =="False"):
                                self.match_mult_condition(Resources.Value1)  # assign multiple values
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    if self.peek_next_token() == ")":
                                        return True
                                        # followed by more condition
                                    elif (
                                            self.peek_next_token() == "==" or self.peek_next_token() == "!=" or self.peek_next_token() == "<"
                                            or self.peek_next_token() == ">" or self.peek_next_token() == "<=" or self.peek_next_token() == ">="
                                            or self.peek_next_token() == "||" or self.peek_next_token() == "&&" or self.peek_next_token() == "!"
                                            or self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                            or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                        self.match(Resources.condop)
                                        #  condition next is enclosed with parentheses
                                        if self.peek_next_token() == "(":
                                            self.match_parenth_condition("(")  # parenthesis condition path
                                            if self.peek_next_token() == ")":
                                                return True
                                                #  not closed with ')' or followed by a conditional operator
                                            else:
                                                return False
                                        #  normal flow
                                        elif (re.match(r'Identifier\d*$',
                                                       self.peek_next_token()) or "SunLiteral" or "LuhmanLiteral"
                                              or "StarsysLiteral" or "True" or "False"):
                                            self.match(Resources.Value1)
                                            #  more values
                                            #  if the next is a conditional operator, proceed to check if it is followed by the following values
                                            if (
                                                    self.peek_next_token() == "==" or self.peek_next_token() == "!=" or self.peek_next_token() == "<"
                                                    or self.peek_next_token() == ">" or self.peek_next_token() == "<=" or self.peek_next_token() == ">="
                                                    or self.peek_next_token() == "||" or self.peek_next_token() == "&&" or self.peek_next_token() == "!"
                                                    or self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                                    or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                                self.match(Resources.condop)
                                                #  must be followed by these values
                                                if (re.match(r'Identifier\d*$',
                                                             self.peek_next_token()) or "SunLiteral" or "LuhmanLiteral"
                                                        or "StarsysLiteral" or "True" or "False"):
                                                    self.match_mult_condition(
                                                        Resources.Value1)  # assign multiple values
                                                    if self.peek_next_token() == ")":
                                                        return True
                                                    #  not closed with ')' or followed by a conditional operator
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected ')', '==', '!=', '<', '>', "
                                                            f"'<=', '>=', '&&', '||', '!', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                                                #  not followed by any of the values expected after a condition operator
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', "
                                                        f"'LuhmanLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                                            #  single value
                                            elif self.peek_next_token() == ")":
                                                return True  # else: last identifier has no following '>>' to display
                                            #  not closed with ')' or followed by a conditional operator
                                            else:
                                                return False
                                        #  not followed by any of the values expected after a condition operator
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', "
                                                f"'LuhmanLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                                    elif not self.parenthError:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ')', '==', '!=', '<', '>', "
                                            f"'<=', '>=', '&&', '||', '!', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                                #  not closed with ')' or followed by a conditional operator
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ')', '==', '!=', '<', '>', "
                                        f"'<=', '>=', '&&', '||', '!', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                            elif self.peek_next_token() == "(":
                                self.parse_multCond_parenth()
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    if self.peek_next_token() == ")":
                                        return True
                                    # followed by more condition
                                    elif (
                                            self.peek_next_token() == "==" or self.peek_next_token() == "!=" or self.peek_next_token() == "<"
                                            or self.peek_next_token() == ">" or self.peek_next_token() == "<=" or self.peek_next_token() == ">="
                                            or self.peek_next_token() == "||" or self.peek_next_token() == "&&" or self.peek_next_token() == "!"
                                            or self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                            or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                        self.match(Resources.condop)
                                        #  condition next is enclosed with parentheses
                                        if self.peek_next_token() == "(":
                                            self.match_parenth_condition("(")  # parenthesis condition path
                                            if self.peek_next_token() == ")":
                                                return True
                                                #  not closed with ')' or followed by a conditional operator
                                            else:
                                                return False
                                        #  normal flow
                                        elif (re.match(r'Identifier\d*$',
                                                       self.peek_next_token()) or "SunLiteral" or "LuhmanLiteral"
                                              or "StarsysLiteral" or "True" or "False"):
                                            self.match(Resources.Value1)
                                            #  more values
                                            #  if the next is a conditional operator, proceed to check if it is followed by the following values
                                            if (
                                                    self.peek_next_token() == "==" or self.peek_next_token() == "!=" or self.peek_next_token() == "<"
                                                    or self.peek_next_token() == ">" or self.peek_next_token() == "<=" or self.peek_next_token() == ">="
                                                    or self.peek_next_token() == "||" or self.peek_next_token() == "&&" or self.peek_next_token() == "!"
                                                    or self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                                    or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                                self.match(Resources.condop)
                                                #  must be followed by these values
                                                if (re.match(r'Identifier\d*$',
                                                             self.peek_next_token()) or "SunLiteral" or "LuhmanLiteral"
                                                        or "StarsysLiteral" or "True" or "False"):
                                                    self.match_mult_condition(
                                                        Resources.Value1)  # assign multiple values
                                                    if self.peek_next_token() == ")":
                                                        return True
                                                    #  not closed with ')' or followed by a conditional operator
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected ')', '==', '!=', '<', '>', "
                                                            f"'<=', '>=', '&&', '||', '!', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                                                #  not followed by any of the values expected after a condition operator
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', "
                                                        f"'LuhmanLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                                            #  single value
                                            elif self.peek_next_token() == ")":
                                                return True  # else: last identifier has no following '>>' to display
                                            #  not closed with ')' or followed by a conditional operator
                                            else:
                                                return False
                                        #  not followed by any of the values expected after a condition operator
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', "
                                                f"'LuhmanLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ')', '==', '!=', '<', '>', "
                                            f"'<=', '>=', '&&', '||', '!', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                            #  not followed by any of the values expected after a condition operator
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', "
                                    f"'LuhmanLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                        #  single value
                        elif self.peek_next_token() == ")":
                            self.match(")")
                            if self.peek_next_token() == ")":
                                return True
                            # followed by more condition
                            elif (
                                    self.peek_next_token() == "==" or self.peek_next_token() == "!=" or self.peek_next_token() == "<"
                                    or self.peek_next_token() == ">" or self.peek_next_token() == "<=" or self.peek_next_token() == ">="
                                    or self.peek_next_token() == "||" or self.peek_next_token() == "&&" or self.peek_next_token() == "!"
                                    or self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                    or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                self.match(Resources.condop)
                                #  condition next is enclosed with parentheses
                                if self.peek_next_token() == "(":
                                    self.match_parenth_condition("(")  # parenthesis condition path
                                    if self.peek_next_token() == ")":
                                        return True
                                        #  not closed with ')' or followed by a conditional operator
                                    else:
                                        return False
                                #  normal flow
                                elif (re.match(r'Identifier\d*$',
                                             self.peek_next_token()) or "SunLiteral" or "LuhmanLiteral"
                                        or "StarsysLiteral" or "True" or "False"):
                                    self.match(Resources.Value1)
                                    #  more values
                                    #  if the next is a conditional operator, proceed to check if it is followed by the following values
                                    if (
                                            self.peek_next_token() == "==" or self.peek_next_token() == "!=" or self.peek_next_token() == "<"
                                            or self.peek_next_token() == ">" or self.peek_next_token() == "<=" or self.peek_next_token() == ">="
                                            or self.peek_next_token() == "||" or self.peek_next_token() == "&&" or self.peek_next_token() == "!"
                                            or self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                            or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                        self.match(Resources.condop)
                                        #  must be followed by these values
                                        if (re.match(r'Identifier\d*$',
                                                     self.peek_next_token()) or "SunLiteral" or "LuhmanLiteral"
                                                or "StarsysLiteral" or "True" or "False"):
                                            self.match_mult_condition(Resources.Value1)  # assign multiple values
                                            if self.peek_next_token() == ")":
                                                return True
                                            #  not closed with ')' or followed by a conditional operator
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ')', '==', '!=', '<', '>', "
                                                    f"'<=', '>=', '&&', '||', '!', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                                        #  not followed by any of the values expected after a condition operator
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', "
                                                f"'LuhmanLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                                    #  single value
                                    elif self.peek_next_token() == ")":
                                        return True  # else: last identifier has no following '>>' to display
                                    #  not closed with ')' or followed by a conditional operator
                                    else:
                                        return False
                                #  not followed by any of the values expected after a condition operator
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', "
                                        f"'LuhmanLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', '==', '!=', '<', '>', "
                                    f"'<=', '>=', '&&', '||', '!', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                        #  not closed with ')' or followed by a conditional operator
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', '==', '!=', '<', '>', "
                                f"'<=', '>=', '&&', '||', '!', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  not followed by any of the values expected after a condition operator
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', "
                            f"'LuhmanLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                #  not closed with ')' or followed by a conditional operator
                else:
                    self.parenthError = True
                    self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected '==', '!=', '<', '>', "
                                       f"'<=', '>=', '&&', '||', '!', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                # empty condition error
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral'"
                    f", 'StarsysLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                return False

    def match_parenth_condition2(self, expected_token):
        pass

    #  method that handles condition, if-else, while, do-while
    def match_condition(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "(":
            if self.peek_next_token() == "(":
                self.match_parenth_condition("(")  # parenthesis condition path
                if self.peek_next_token() == ")":
                    return True
                    #  not closed with ')' or followed by a conditional operator
                else:
                    return False
            elif (re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                  or self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                self.match(Resources.Value1)  # consume terms
                # SEMANTIC CHECK
                if re.match(r'Identifier\d*$', self.peek_previous_token()):
                    self.check_variable_usage()
                #  if the next is a conditional operator, proceed to check if it is followed by the following values
                if (self.peek_next_token() == "==" or self.peek_next_token() == "!=" or self.peek_next_token() == "<"
                        or self.peek_next_token() == ">" or self.peek_next_token() == "<=" or self.peek_next_token() == ">="
                        or self.peek_next_token() == "||" or self.peek_next_token() == "&&" or self.peek_next_token() == "!"
                        or self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                    self.match(Resources.condop)
                    if (re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                            or self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                        self.match(Resources.Value1)
                        # SEMANTIC CHECK
                        if re.match(r'Identifier\d*$', self.peek_previous_token()):
                            self.check_variable_usage()
                        #  more values
                        #  if the next is a conditional operator, proceed to check if it is followed by the following values
                        if (
                                self.peek_next_token() == "==" or self.peek_next_token() == "!=" or self.peek_next_token() == "<"
                                or self.peek_next_token() == ">" or self.peek_next_token() == "<=" or self.peek_next_token() == ">="
                                or self.peek_next_token() == "||" or self.peek_next_token() == "&&" or self.peek_next_token() == "!"
                                or self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                            self.match(Resources.condop)
                            #  must be followed by these values
                            if (re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                                    or self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                                self.match_mult_condition(Resources.Value1) #  assign multiple values
                                if self.peek_next_token() == ")":
                                    return True
                                #  not closed with ')' or followed by a conditional operator
                                else:
                                    self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected ')', '==', '!=', '<', '>', "
                                                       f"'<=', '>=', '&&', '||', '!', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                            elif self.peek_next_token() == "(":
                                self.match_parenth_condition("(")  # parenthesis condition path
                                if self.peek_next_token() == ")":
                                    return True
                                    #  not closed with ')' or followed by a conditional operator
                                else:
                                    return False
                            #  not followed by any of the values expected after a condition operator
                            else:
                                self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', "
                                                   f"'LuhmanLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                        #  single value
                        elif self.peek_next_token() == ")":
                            return True  # else: last identifier has no following '>>' to display
                        #  not closed with ')' or followed by a conditional operator
                        else:
                            self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected ')', '==', '!=', '<', '>', "
                                           f"'<=', '>=', '&&', '||', '!', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  not followed by any of the values expected after a condition operator
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', "
                                           f"'LuhmanLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                #  single value
                elif self.peek_next_token() == ")":
                    return True  # else: last identifier has no following '>>' to display
                #  not closed with ')' or followed by a conditional operator
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected ')', '==', '!=', '<', '>', "
                                       f"'<=', '>=', '&&', '||', '!', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
            # empty condition error
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral'"
                                   f", 'StarsysLiteral', 'True', 'False', '(' but instead got '{self.peek_next_token()}'")
                return False

    #  method that handles condition, for loop
    def match_condition2(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        # SEMANTIC CHECK
        if re.match(r'Identifier\d*$', self.peek_previous_token()):
            self.check_variable_usage()

        #  expected token could be: id, sunliteral, luhmanliteral, starsysliteral, true, false
        if isinstance(expected_token, list):
            if (re.match(r'Identifier\d*$', self.current_token) or self.current_token == "SunLiteral" or self.current_token == "LuhmanLiteral"
                    or self.current_token == "StarsysLiteral" or self.current_token == "True" or self.current_token == "False"):
                #  if the next is a conditional operator, proceed to check if it is followed by the following values
                if (self.peek_next_token() == "==" or self.peek_next_token() == "!=" or self.peek_next_token() == "<"
                        or self.peek_next_token() == ">" or self.peek_next_token() == "<=" or self.peek_next_token() == ">="
                        or self.peek_next_token() == "||" or self.peek_next_token() == "&&" or self.peek_next_token() == "!"
                        or self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                    self.match(Resources.condop)
                    if (re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                            or self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                        self.match(Resources.Value1)
                        # SEMANTIC CHECK
                        if re.match(r'Identifier\d*$', self.peek_previous_token()):
                            self.check_variable_usage()
                        #  more values
                        #  if the next is a conditional operator, proceed to check if it is followed by the following values
                        if (
                                self.peek_next_token() == "==" or self.peek_next_token() == "!=" or self.peek_next_token() == "<"
                                or self.peek_next_token() == ">" or self.peek_next_token() == "<=" or self.peek_next_token() == ">="
                                or self.peek_next_token() == "||" or self.peek_next_token() == "&&" or self.peek_next_token() == "!"
                                or self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                            self.match(Resources.condop)
                            #  must be followed by these values
                            if (re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                                    or self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                                self.match_mult_condition(Resources.Value1)  # assign multiple values
                                if self.peek_next_token() == "#":
                                    return True
                                #  not closed with '#' or followed by a conditional operator
                                else:
                                    self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected '#', '==', '!=', '<', '>', "
                                                       f"'<=', '>=', '&&', '||', '!', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                            #  not followed by a value
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral'"
                                    f", 'StarsysLiteral', 'True', 'False', '(' but instead got '{self.peek_next_token()}'")
                        #  single value
                        elif self.peek_next_token() == "#":
                            return True  # else: last identifier has no following '>>' to display
                        #  not closed with '#' or followed by a conditional operator
                        else:
                            return False
                    #  not followed by any of the values expected after a condition operator
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', "
                                           f"'LuhmanLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                #  single value
                elif self.peek_next_token() == "#":
                    return True  # else: last identifier has no following '>>' to display
                #  not closed with ')' or followed by a conditional operator
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected '#', '==', '!=', '<', '>', "
                                       f"'<=', '>=', '&&', '||', '!', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
            # empty condition error
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral'"
                                   f", 'StarsysLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                return False

    #  method that analyzes if the current token is matched with the expected token
    def match_mult_condition(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()
        # SEMANTIC CHECK
        if re.match(r'Identifier\d*$', self.peek_previous_token()):
            self.check_variable_usage()

        if isinstance(expected_token, list):
            if (re.match(r'Identifier\d*$', self.current_token) or self.current_token == "SunLiteral" or self.current_token == "LuhmanLiteral"
                    or self.current_token == "StarsysLiteral" or self.current_token == "True" or self.current_token == "False"):
                #  if the next is a conditional operator, proceed to check if it is followed by the following values
                if (
                        self.peek_next_token() == "==" or self.peek_next_token() == "!=" or self.peek_next_token() == "<"
                        or self.peek_next_token() == ">" or self.peek_next_token() == "<=" or self.peek_next_token() == ">="
                        or self.peek_next_token() == "||" or self.peek_next_token() == "&&" or self.peek_next_token() == "!"
                        or self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                    self.match(Resources.condop)
                    #  another conditional value
                    if (re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                            or self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                        self.match_mult_condition(Resources.Value1)
                    elif self.peek_next_token() == "(":
                        self.match_parenth_condition("(")  # parenthesis condition path
                        if self.peek_next_token() == ")":
                            return True
                            #  not closed with ')' or followed by a conditional operator
                        else:
                            return False
                    #  not followed by a value
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral'"
                                           f", 'StarsysLiteral', 'True', 'False', '(' but instead got '{self.peek_next_token()}'")
                #  not followed by a conditional operator
                else:
                    return True
            else:
                self.parenthError = True
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral'"
                    f", 'StarsysLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")


    def parse_multCond_parenth(self):
        if self.peek_next_token() == "(":
            self.match_parenth_condition("(")  # parenthesis condition path
            if self.peek_next_token() == ")":
                return True
                #  not closed with ')' or followed by a conditional operator
            else:
                return False

    #  assign multiple values in parameter subfunc definition
    def match_param_assign_mult(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()
        if expected_token == ",":
            #  if the next is a comma proceed to check if it is followed by Static
            if self.peek_next_token() == "Static":
                self.match("Static")
                #  if the next is a Static proceed to check if it is followed by data type
                if self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"\
                        or self.peek_next_token() == "Starsys" or self.peek_next_token() == "Boolean":
                    self.match(Resources.Datatype2)
                    # SEMANTIC CHECK
                    self.parameter_datatype = self.peek_previous_lexeme()

                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.match("Identifier")
                        # SEMANTIC CHECK
                        self.function_parameter_var = self.peek_previous_lexeme()
                        self.parameter_var_name = self.peek_previous_lexeme()
                        self.declare_parameter_variable(self.function_datatype, self.function_name, self.parameter_datatype,
                                                        self.parameter_var_name)
                        #  parameter is an array index path (static)
                        if self.peek_next_token() == "{":
                            self.match("{")  # consume
                            #  array index assign path
                            if (re.match(r'Identifier\d*$', self.peek_next_token())
                                    or self.peek_next_token() == "SunLiteral"):
                                self.match(Resources.Value3)  # consume the values
                                #  size expression
                                if (
                                        self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                                    #  close it with "}" if size is fulfilled
                                    if self.peek_next_token() == "}":
                                        self.match("}")
                                        #  check: if closed, single 1D array
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement() # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        # or add another size to become 2D array
                                        elif self.peek_next_token() == "{":
                                            self.match_arrID2D_index_parameter("{")
                                            #  check: if closed, single 2D array
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_sub_function_definition_statement()  # body
                                                            #  close it
                                                            if self.peek_next_token() == "]":
                                                                self.match("]")
                                                            #  error: not closed
                                                            else:
                                                                return False
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                    #  not closed with '}'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                #  size is single value
                                elif self.peek_next_token() == "}":
                                    self.match("}")
                                    #  check: if closed, single 1D array (size is single value)
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  check: if closed, single 1D array (size is single value)
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by an equal
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  size value is not followed by any of the following (# and Rcurl)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                            #  empty size, proceed to close it with '}'
                            elif self.peek_next_token() == "}":
                                self.match("}")
                                #  check: if closed, single 1D array (size is empty)
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed it with '['
                                    if self.peek_next_token() == "[":
                                        self.parse_sub_function_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            return False
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  check: if closed, single 2D array
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by an equal
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                        elif self.peek_next_token() == ",":
                            self.match_param_assign_mult(",")
                        elif self.peek_next_token() == "=":
                            self.match_param_assign("=")
                        #  no assign value (=) or next value (comma)
                        #  no more assigned values
                        elif self.peek_next_token() == ")":
                            return True
                        #  not closed with ')' or followed by any...
                        else:
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                    # else: if it is not followed by an id, it shows the error
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', "
                                           f"but instead got '{self.peek_next_token()}'")
                #  no datatype
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Sun', 'Luhman', 'Starsys', 'Boolean' "
                                       f"but instead got '{self.peek_next_token()}'")
            #  else if the next is a comma proceed to check if it is followed by data type
            elif self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman" \
                    or self.peek_next_token() == "Starsys" or self.peek_next_token() == "Boolean":
                self.match(Resources.Datatype2)
                # SEMANTIC CHECK
                if not self.function_exist:
                    self.parameter_datatype = self.peek_previous_token()

                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.match("Identifier")
                    # SEMANTIC CHECK
                    self.function_parameter_var = self.peek_previous_lexeme()
                    self.parameter_var_name = self.peek_previous_lexeme()
                    self.declare_parameter_variable(self.function_datatype, self.function_name, self.parameter_datatype, self.parameter_var_name)

                    #  parameter is an array index path
                    if self.peek_next_token() == "{":
                        self.match("{")  # consume
                        #  array index assign path
                        if (re.match(r'Identifier\d*$', self.peek_next_token())
                                or self.peek_next_token() == "SunLiteral"):
                            self.match(Resources.Value3)  # consume the values
                            #  size expression
                            if (
                                    self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                    or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                self.match_mathop3(Resources.mathop1)  # size is a math expr
                                #  close it with "}" if size is fulfilled
                                if self.peek_next_token() == "}":
                                    self.match("}")
                                    #  check: if closed, single 1D array
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  check: if closed, single 2D array
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  not closed with '}'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                            #  size is single value
                            elif self.peek_next_token() == "}":
                                self.match("}")
                                #  check: if closed, single 1D array (size is single value)
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed it with '['
                                    if self.peek_next_token() == "[":
                                        self.parse_sub_function_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            return False
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  check: if closed, single 1D array (size is single value)
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by an equal
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            #  size value is not followed by any of the following (# and Rcurl)
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                        #  empty size, proceed to close it with '}'
                        elif self.peek_next_token() == "}":
                            self.match("}")
                            #  check: if closed, single 1D array (size is empty)
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  followed it with '['
                                if self.peek_next_token() == "[":
                                    self.parse_sub_function_definition_statement()  # body
                                    #  close it
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                    #  error: not closed
                                    else:
                                        return False
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  must be followed by '['
                                    if self.peek_next_token() == "[":
                                        self.parse_sub_function_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            return False
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '['
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            #  single id is followed by a comma, (Static Sun a{1},.....)
                            elif self.peek_next_token() == ",":
                                self.match_param_assign_mult(",")
                                #  close with ')' after assigning value/s
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed by '['
                                    if self.peek_next_token() == "[":
                                        self.parse_sub_function_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            return False
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            # or add another size to become 2D array
                            elif self.peek_next_token() == "{":
                                self.match_arrID2D_index_parameter("{")
                                #  check: if closed, single 2D array
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed it with '['
                                    if self.peek_next_token() == "[":
                                        self.parse_sub_function_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            return False
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by an equal
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by an equal
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                    elif self.peek_next_token() == ",":
                        self.match_param_assign_mult(",")
                    elif self.peek_next_token() == "=":
                        self.match_param_assign("=")
                    #  no assign value (=) or next value (comma)
                    #  no more assigned values
                    elif self.peek_next_token() == ")":
                        self.compare_function_parameters(self.function_name)
                        return True
                    #  not closed with ')' or followed by any...
                    else:
                        self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                # else: if it is not followed by an id, it shows the error
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', "
                                               f" but instead got '{self.peek_next_token()}'")
            #  no datatype
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Static', 'Sun', 'Luhman', 'Starsys', 'Boolean' "
                                           f", but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected '{expected_token}' but found '{self.current_token}'")
            return False

    #  assign multiple values in parameter subfunc prototype
    def match_param_assign_mult_prototype(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == ",":
            #  if the next is a comma proceed to check if it is followed by Static
            if self.peek_next_token() == "Static":
                self.match("Static")
                #  if the next is a Static proceed to check if it is followed by data type
                if self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman" \
                        or self.peek_next_token() == "Starsys" or self.peek_next_token() == "Boolean":
                    self.match(Resources.Datatype2)
                    # SEMANTIC CHECK
                    self.prototype_parameter_datatype = self.peek_previous_lexeme()
                    
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.match("Identifier")
                        # SEMANTIC CHECK
                        self.prototype_function_parameter_var = self.peek_previous_lexeme()
                        self.prototype_parameter_var_name = self.peek_previous_lexeme()
                        self.declare_prototype_parameter_variable(self.prototype_function_datatype, self.prototype_function_name, self.prototype_parameter_datatype,
                                                        self.prototype_parameter_var_name)
                        
                        #  parameter is an array index path (static)
                        if self.peek_next_token() == "{":
                            self.match("{")  # consume
                            #  array index assign path
                            if (re.match(r'Identifier\d*$', self.peek_next_token())
                                    or self.peek_next_token() == "SunLiteral"):
                                self.match(Resources.Value3)  # consume the values
                                #  size expression
                                if (
                                        self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                                    #  close it with "}" if size is fulfilled
                                    if self.peek_next_token() == "}":
                                        self.match("}")
                                        #  check: if closed, single 1D array
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '#'
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '#'
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by '#'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#' or gotolerate
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult_prototype(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed it with '#'
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '#'
                                                    if self.peek_next_token() == "#":
                                                        self.match("#")
                                                    #  error: not followed by '#'
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '#' or gotolerate
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        # or add another size to become 2D array
                                        elif self.peek_next_token() == "{":
                                            self.match_arrID2D_index_parameter("{")
                                            #  check: if closed, single 2D array
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed it with '#'
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '#'
                                                    if self.peek_next_token() == "#":
                                                        self.match("#")
                                                    #  error: not followed by '#'
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '#' or gotolerate
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult_prototype(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  followed it with '#'
                                                    if self.peek_next_token() == "#":
                                                        self.match("#")
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '#'
                                                        if self.peek_next_token() == "#":
                                                            self.match("#")
                                                        #  error: not followed by '#'
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by '#' or gotolerate
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                    #  not closed with '}'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                #  size is single value
                                elif self.peek_next_token() == "}":
                                    self.match("}")
                                    #  check: if closed, single 1D array (size is single value)
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '#'
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '#'
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#' or gotolerate
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult_prototype(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '#'
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '#'
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by '#'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#' or gotolerate
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  check: if closed, single 1D array (size is single value)
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '#'
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '#'
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by '#'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#' or gotolerate
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult_prototype(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed it with '#'
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '#'
                                                    if self.peek_next_token() == "#":
                                                        self.match("#")
                                                    #  error: not followed by '#'
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '#' or gotolerate
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by an equal
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  size value is not followed by any of the following (# and Rcurl)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                            #  empty size, proceed to close it with '}'
                            elif self.peek_next_token() == "}":
                                self.match("}")
                                #  check: if closed, single 1D array (size is empty)
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed it with '#'
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '#'
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '#' or gotolerate
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult_prototype(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '#'
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '#'
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#' or gotolerate
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  check: if closed, single 2D array
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '#'
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '#'
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#' or gotolerate
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult_prototype(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '#'
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '#'
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by '#'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#' or gotolerate
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by an equal
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                        elif self.peek_next_token() == ",":
                            self.match_param_assign_mult_prototype(",")
                        elif self.peek_next_token() == "=":
                            self.isPrototype = True
                            self.match_param_assign("=")
                        #  no assign value (=) or next value (comma)
                        #  no more assigned values
                        elif self.peek_next_token() == ")":

                            return True
                        #  not closed with ')' or followed by any...
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                    # else: if it is not followed by an id, it shows the error
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', "
                                           f"but instead got '{self.peek_next_token()}'")
                #  no datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Sun', 'Luhman', 'Starsys', 'Boolean' "
                        f"but instead got '{self.peek_next_token()}'")
            #  else if the next is a comma proceed to check if it is followed by data type
            elif self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman" \
                    or self.peek_next_token() == "Starsys" or self.peek_next_token() == "Boolean":
                self.match(Resources.Datatype2)
                # SEMANTIC CHECK
                if not self.prototype_function_exist:
                    self.prototype_parameter_datatype = self.peek_previous_token()

                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.match("Identifier")
                    # SEMANTIC CHECK
                    self.prototype_function_parameter_var = self.peek_previous_lexeme()
                    self.prototype_parameter_var_name = self.peek_previous_lexeme()
                    self.declare_prototype_parameter_variable(self.prototype_function_datatype, self.prototype_function_name, self.prototype_parameter_datatype,
                                                    self.prototype_parameter_var_name)

                    #  parameter is an array index path
                    if self.peek_next_token() == "{":
                        self.match("{")  # consume
                        #  array index assign path
                        if (re.match(r'Identifier\d*$', self.peek_next_token())
                                or self.peek_next_token() == "SunLiteral"):
                            self.match(Resources.Value3)  # consume the values
                            #  size expression
                            if (
                                    self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                    or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                self.match_mathop3(Resources.mathop1)  # size is a math expr
                                #  close it with "}" if size is fulfilled
                                if self.peek_next_token() == "}":
                                    self.match("}")
                                    #  check: if closed, single 1D array
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '#'
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '#'
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#' or gotolerate
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult_prototype(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '#'
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '#'
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by '#'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#' or gotolerate
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  check: if closed, single 2D array
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '#'
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '#'
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by '#'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#' or gotolerate
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult_prototype(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed it with '#'
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '#'
                                                    if self.peek_next_token() == "#":
                                                        self.match("#")
                                                    #  error: not followed by '#'
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '#' or gotolerate
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  not closed with '}'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                            #  size is single value
                            elif self.peek_next_token() == "}":
                                self.match("}")
                                #  check: if closed, single 1D array (size is single value)
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed it with '#'
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '#'
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '#' or gotolerate
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult_prototype(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '#'
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '#'
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#' or gotolerate
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  check: if closed, single 1D array (size is single value)
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '#'
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '#'
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#' or gotolerate
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult_prototype(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '#'
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '#'
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by '#'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#' or gotolerate
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by an equal
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            #  size value is not followed by any of the following (# and Rcurl)
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                        #  empty size, proceed to close it with '}'
                        elif self.peek_next_token() == "}":
                            self.match("}")
                            #  check: if closed, single 1D array (size is empty)
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  followed it with '#'
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  must be followed by '#'
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  error: not followed by '#'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '#' or gotolerate
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            #  single id is followed by a comma, (Static Sun a{1},.....)
                            elif self.peek_next_token() == ",":
                                self.match_param_assign_mult_prototype(",")
                                #  close with ')' after assigning value/s
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed it with '#'
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '#'
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '#' or gotolerate
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            # or add another size to become 2D array
                            elif self.peek_next_token() == "{":
                                self.match_arrID2D_index_parameter("{")
                                #  check: if closed, single 2D array
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed it with '#'
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '#'
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '#' or gotolerate
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult_prototype(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '#'
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '#'
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#' or gotolerate
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by an equal
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by an equal
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                    elif self.peek_next_token() == ",":
                        self.match_param_assign_mult_prototype(",")
                    elif self.peek_next_token() == "=":
                        self.isPrototype = True
                        self.match_param_assign("=")
                    #  no assign value (=) or next value (comma)
                    #  no more assigned values
                    elif self.peek_next_token() == ")":
                        return True
                    #  not closed with ')' or followed by any...
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                # else: if it is not followed by an id, it shows the error
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', "
                                       f" but instead got '{self.peek_next_token()}'")
            #  no datatype
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected 'Static', 'Sun', 'Luhman', 'Starsys', 'Boolean' "
                    f", but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Syntax error: Expected '{expected_token}' but found '{self.current_token}'")
            return False

    #  method for assigning parameter with values
    def match_param_assign(self, expected_token):
        # SEMANTIC CHECK
        self.function_parameter_var = self.peek_previous_lexeme()
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "=":
            # check if it is enclosed with parentheses
            if self.peek_next_token() == "(":
                self.match_parenth("(")
                if self.peek_previous_token() == ")":
                    return True
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', '**'")
            #  check if it is followed by these values
            elif (re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                    or self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                # SEMANTIC CHECK
                if self.isPrototype:
                    self.check_prototype_parameter_assignment_type()
                else:
                    self.check_parameter_assignment_type()
                self.match(Resources.Value1)
                #  followed by a comma to add another
                if self.peek_next_token() == ",":
                    # SEMANTIC CHECK
                    if self.isPrototype:
                        self.match_param_assign_mult_prototype(",")
                    else:
                        self.match_param_assign_mult(",")
                    #  no more assigned values
                    if self.peek_next_token() == ")":
                        return True
                    #  not closed with ')'
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                #  add is next
                elif self.peek_next_token() == "+":
                    self.match_mathop_param("+")
                    if self.peek_next_token() == ")":
                        return True  # else: last identifier has no following identifiers (comma)
                    #  unexpected end
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected ')', '+', '=', '-', '/', '%', '*', ',', but instead got '{self.peek_next_token()}'")
                #  exponentiation is next
                elif self.peek_next_token() == "**":
                    self.match_exponent_param("**")
                    if self.peek_next_token() == ")":
                        return True  # else: last identifier has no following identifiers (comma)
                    #  unexpected end
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected ')', '+', '=', '-', '/', '%', '*', ',', but instead got '{self.peek_next_token()}'")
                #  subtract is next
                elif self.peek_next_token() == "-":
                    self.match_mathop_param("-")
                    if self.peek_next_token() == ")":
                        return True  # else: last identifier has no following identifiers (comma)
                    #  unexpected end
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected ')', '+', '=', '-', '/', '%', '*', ',', but instead got '{self.peek_next_token()}'")
                #  multiply is next
                elif self.peek_next_token() == "*":
                    self.match_mathop_param("*")
                    if self.peek_next_token() == ")":
                        return True  # else: last identifier has no following identifiers (comma)
                    #  unexpected end
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected ')', '+', '=', '-', '/', '%', '*', ',', but instead got '{self.peek_next_token()}'")
                #  divide is next
                elif self.peek_next_token() == "/":
                    self.match_mathop_param("/")
                    if self.peek_next_token() == ")":
                        return True  # else: last identifier has no following identifiers (comma)
                    #  unexpected end
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected ')', '+', '=', '-', '/', '%', '*', ',', but instead got '{self.peek_next_token()}'")
                #  modulo is next
                elif self.peek_next_token() == "%":
                    self.match_mathop_param("%")
                    if self.peek_next_token() == ")":
                        return True  # else: last identifier has no following identifiers (comma)
                    #  unexpected end
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected ')', '+', '=', '-', '/', '%', '*', ',', but instead got '{self.peek_next_token()}'")
                elif self.peek_next_token() == ")":
                    return True  # else: last identifier has no following identifiers (comma)
                #  unexpected end
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected ')', '+', '=', '-', '/', '%', '*', ',', but instead got '{self.peek_next_token()}'")
            #  else: if it is not followed by any of the value it shows the error
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected '(', 'Identifier', 'SunLiteral', 'LuhmanLiteral', "
                    f"'StarsysLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
        #  else: no equals sign
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected '{expected_token}', but instead got '{self.peek_next_token()}'")
            return False

    # method for parsing multiple variable assignments with expression
    def match_mathop_param(self, expected_token):
        if (self.peek_previous_token() != "SunLiteral" and self.peek_previous_token() != "LuhmanLiteral"
                and self.peek_previous_token() != ")" and not re.match(r'Identifier\d*$', self.peek_previous_token())):
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral' before {self.peek_next_token()}")

        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        # check if it is enclosed with parentheses
        if expected_token == "+" or "-" or "*" or "/" or "%":
            if self.peek_next_token() == "(":
                self.match_parenth("(")
                if self.peek_previous_token() == ")":
                    return True
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
            if (re.match(r'Identifier\d*$', self.peek_next_token())
                    or self.peek_next_token() == "SunLiteral"
                    or self.peek_next_token() == "LuhmanLiteral"):
                self.match(Resources.Value2)  # consume
                #  add
                if self.peek_next_token() == "+":
                    self.match_mathop_param("+")
                #  exponent
                elif self.peek_next_token() == "**":
                    self.match_exponent_param("**")
                #  subtract
                elif self.peek_next_token() == "-":
                    self.match_mathop_param("-")
                #  multiply
                elif self.peek_next_token() == "*":
                    self.match_mathop_param("*")
                #  divide
                elif self.peek_next_token() == "/":
                    self.match_mathop_param("/")
                #  modulo
                elif self.peek_next_token() == "%":
                    self.match_mathop_param("%")
                #  another variable separated with comma
                elif self.peek_next_token() == ",":
                    self.match_param_assign_mult(",")  # consume ','
                else:
                    return True
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral', "
                                       f" but instead got '{self.peek_next_token()}'")

    #  method that handles multiple assigning values. ex: a = 12, b = 12, c = 12
    def match_mult_assign(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "=":
            self.isMultiple = False
            # check if it is enclosed with parentheses
            if self.peek_next_token() == "(":
                self.match_parenth("(")
                if self.peek_previous_token() == ")":
                    #  terminate it
                    if self.peek_next_token() == "#":
                        self.match("#")
                    #  error: not terminated
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '+', '-', '*', '/', '%' but instead got '{self.peek_next_token()}'")
                else:
                    self.parenthError = True
                    return False
            #  check if it is followed by these values:
            elif (self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                  or self.peek_next_token() == "StarsysLiteral"):
                # SEMANTIC CHECK: Dataype values
                self.check_value_semantics()
                self.match(Resources.Value5)
                if self.peek_next_token() == ",":
                    self.isMultiple = True
                    self.match(",")
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.matchID_mult("Identifier")
                        if self.peek_next_token() == "=":
                            self.match_mult_assign("=")
                        else:
                            return True  # else: last identifier has no assigned value (=)
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                #  add is next
                elif self.peek_next_token() == "+":
                    self.match_mathop("+")
                #  exponentiation is next
                elif self.peek_next_token() == "**":
                    self.match_exponent("**")
                #  subtract is next
                elif self.peek_next_token() == "-":
                    self.match_mathop("-")
                #  multiply is next
                elif self.peek_next_token() == "*":
                    self.match_mathop("*")
                #  divide is next
                elif self.peek_next_token() == "/":
                    self.match_mathop("/")
                #  modulo is next
                elif self.peek_next_token() == "%":
                    self.match_mathop("%")
                else:
                    return True  # else: last identifier has no following identifiers (comma)
            #  function assign value path
            elif re.match(r'Identifier\d*$', self.peek_next_token()):
                self.match("Identifier") # consume
                #  is '(' next?
                if self.peek_next_token() == "(":
                    self.match("(")
                    #  assign values
                    if (self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                            or self.peek_next_token() == "StarsysLiteral" or re.match(r'Identifier\d*$',self.peek_next_token())
                            or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                        self.matchValue_mult(Resources.Value1)
                        # close it
                        if self.peek_next_token() == ")":
                            self.match(")")
                            return True
                        #  error: expected ')'
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                    #  not followed by values (close it)
                    elif self.peek_next_token() == ")":
                        self.match(")")
                        return True
                    # error: not followed by any values
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected ')', 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral', 'Identifier', but instead got '{self.peek_next_token()}'")
                #  assign value?
                elif self.peek_next_token() == ",":
                    self.isMultiple = True
                    self.match(",")
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.matchID_mult("Identifier")
                        if self.peek_next_token() == "=":
                            self.match_mult_assign("=")
                        else:
                            return True  # else: last identifier has no assigned value (=)
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                #  add is next
                elif self.peek_next_token() == "+":
                    self.match_mathop("+")
                #  exponentiation is next
                elif self.peek_next_token() == "**":
                    self.match_exponent("**")
                #  subtract is next
                elif self.peek_next_token() == "-":
                    self.match_mathop("-")
                #  multiply is next
                elif self.peek_next_token() == "*":
                    self.match_mathop("*")
                #  divide is next
                elif self.peek_next_token() == "/":
                    self.match_mathop("/")
                #  modulo is next
                elif self.peek_next_token() == "%":
                    self.match_mathop("%")
                #  array index assign path
                elif self.peek_next_token() == "{":
                    self.arrayError = True
                    self.match("{")
                    #  array index assign path
                    if (re.match(r'Identifier\d*$', self.peek_next_token())
                            or self.peek_next_token() == "SunLiteral"):
                        self.match(Resources.Value3)  # consume the values
                        #  size expression
                        if (self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                            self.match_mathop3(Resources.mathop1)  # size is a math expr
                            #  close it with "}" if size is fulfilled
                            if self.peek_next_token() == "}":
                                self.match("}")
                                # Terminate it
                                if self.peek_next_token() == "#":
                                    return
                                #  add is next
                                elif self.peek_next_token() == "+":
                                    self.match_mathop("+")
                                #  exponentiation is next
                                elif self.peek_next_token() == "**":
                                    self.match_exponent("**")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop("%")
                                #  assign value?
                                elif self.peek_next_token() == ",":
                                    self.isMultiple = True
                                    self.arrayError = False
                                    self.match(",")
                                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                                        self.matchID_mult("Identifier")
                                        if self.peek_next_token() == "=":
                                            self.match_mult_assign("=")
                                        else:
                                            return True  # else: last identifier has no assigned value (=)
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                                # add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_assign("{")
                                    # Terminate it
                                    if self.peek_next_token() == "#":
                                        return
                                    #  add is next
                                    elif self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                    #  exponentiation is next
                                    elif self.peek_next_token() == "**":
                                        self.match_exponent("**")
                                    #  subtract is next
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop("-")
                                    #  multiply is next
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop("*")
                                    #  divide is next
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop("/")
                                    #  modulo is next
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop("%")
                                    #  assign value?
                                    elif self.peek_next_token() == ",":
                                        self.isMultiple = True
                                        self.arrayError = False
                                        self.match(",")
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            else:
                                                return True  # else: last identifier has no assigned value (=)
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                                    #  not terminated or followed
                                    else:
                                        return False
                                #  not terminated or followed
                                else:
                                    return False
                            #  not closed with '}'
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                        #  size is single value
                        elif self.peek_next_token() == "}":
                            self.match("}")
                            # Terminate it
                            if self.peek_next_token() == "#":
                                return
                            #  add is next
                            elif self.peek_next_token() == "+":
                                self.match_mathop("+")
                            #  exponentiation is next
                            elif self.peek_next_token() == "**":
                                self.match_exponent("**")
                            #  subtract is next
                            elif self.peek_next_token() == "-":
                                self.match_mathop("-")
                            #  multiply is next
                            elif self.peek_next_token() == "*":
                                self.match_mathop("*")
                            #  divide is next
                            elif self.peek_next_token() == "/":
                                self.match_mathop("/")
                            #  modulo is next
                            elif self.peek_next_token() == "%":
                                self.match_mathop("%")
                            #  assign value?
                            elif self.peek_next_token() == ",":
                                self.isMultiple = True
                                self.arrayError = False
                                self.match(",")
                                if re.match(r'Identifier\d*$', self.peek_next_token()):
                                    self.matchID_mult("Identifier")
                                    if self.peek_next_token() == "=":
                                        self.match_mult_assign("=")
                                    else:
                                        return True  # else: last identifier has no assigned value (=)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                            # add another size to become 2D array
                            elif self.peek_next_token() == "{":
                                self.match_arrID2D_assign("{")
                                # Terminate it
                                if self.peek_next_token() == "#":
                                    return
                                #  add is next
                                elif self.peek_next_token() == "+":
                                    self.match_mathop("+")
                                #  exponentiation is next
                                elif self.peek_next_token() == "**":
                                    self.match_exponent("**")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop("%")
                                #  assign value?
                                elif self.peek_next_token() == ",":
                                    self.isMultiple = True
                                    self.arrayError = False
                                    self.match(",")
                                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                                        self.matchID_mult("Identifier")
                                        if self.peek_next_token() == "=":
                                            self.match_mult_assign("=")
                                        else:
                                            return True  # else: last identifier has no assigned value (=)
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                                #  not terminated or followed
                                else:
                                    return False
                            #  not terminated or followed
                            else:
                                return False
                        #  size value is not followed by any of the following (# and Rcurl)
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  empty size, proceed to close it with '}'
                    elif self.peek_next_token() == "}":
                        self.match("}")
                        # add another size to become 2D array
                        if self.peek_next_token() == "{":
                            self.match_arrID2D_assign("{")
                            # Terminate it
                            if self.peek_next_token() == "#":
                                return True
                            #  add is next
                            elif self.peek_next_token() == "+":
                                self.match_mathop("+")
                            #  exponentiation is next
                            elif self.peek_next_token() == "**":
                                self.match_exponent("**")
                            #  subtract is next
                            elif self.peek_next_token() == "-":
                                self.match_mathop("-")
                            #  multiply is next
                            elif self.peek_next_token() == "*":
                                self.match_mathop("*")
                            #  divide is next
                            elif self.peek_next_token() == "/":
                                self.match_mathop("/")
                            #  modulo is next
                            elif self.peek_next_token() == "%":
                                self.match_mathop("%")
                            #  assign value?
                            elif self.peek_next_token() == ",":
                                self.isMultiple = True
                                self.arrayError = False
                                self.match(",")
                                if re.match(r'Identifier\d*$', self.peek_next_token()):
                                    self.matchID_mult("Identifier")
                                    if self.peek_next_token() == "=":
                                        self.match_mult_assign("=")
                                    else:
                                        return True  # else: last identifier has no assigned value (=)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                            #  not terminated or followed
                            else:
                                return False
                        #  terminate it
                        elif self.peek_next_token() == "#":
                            self.match("#")
                        #  add is next
                        elif self.peek_next_token() == "+":
                            self.match_mathop("+")
                        #  exponentiation is next
                        elif self.peek_next_token() == "**":
                            self.match_exponent("**")
                        #  subtract is next
                        elif self.peek_next_token() == "-":
                            self.match_mathop("-")
                        #  multiply is next
                        elif self.peek_next_token() == "*":
                            self.match_mathop("*")
                        #  divide is next
                        elif self.peek_next_token() == "/":
                            self.match_mathop("/")
                        #  modulo is next
                        elif self.peek_next_token() == "%":
                            self.match_mathop("%")
                        #  assign value?
                        elif self.peek_next_token() == ",":
                            self.isMultiple = True
                            self.arrayError = False
                            self.match(",")
                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.matchID_mult("Identifier")
                                if self.peek_next_token() == "=":
                                    self.match_mult_assign("=")
                                else:
                                    return True  # else: last identifier has no assigned value (=)
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                        #  not terminated or followed
                        else:
                            return False
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Rcurlbraces', 'Identifier', 'SunLiteral', 'LuhmanLiteral' but instead got '{self.peek_next_token()}'")
            #  type conversion path
            elif self.peek_next_token() == "Sun":
                self.match("Sun")
                if self.peek_next_token() == "(":
                    self.match("(")
                    #  must have values inside
                    if (re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral"
                            or self.peek_next_token() == "LuhmanLiteral"):
                        self.match(Resources.Value2)  # consume values
                        #  return is an array index path
                        if self.peek_next_token() == "{" and (re.match(r'Identifier\d*$', self.peek_previous_token())):
                            self.match("{")  # consume
                            #  array index assign path
                            if (re.match(r'Identifier\d*$', self.peek_next_token())
                                    or self.peek_next_token() == "SunLiteral"):
                                self.match(Resources.Value3)  # consume the values
                                #  size expression
                                if (
                                        self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                                    #  close it with "}" if size is fulfilled
                                    if self.peek_next_token() == "}":
                                        self.match("}")
                                        #  close it
                                        if self.peek_next_token() == ")":
                                            self.match(")")  # consume ')'
                                            return True
                                        # or add another size to become 2D array
                                        elif self.peek_next_token() == "{":
                                            self.match_arrID2D_index_parameter("{")
                                            #  close it
                                            if self.peek_next_token() == ")":
                                                self.match(")")  # consume ')'
                                                return True
                                            #  error: not closed
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by ')' or '{'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ')', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                    #  not closed with '}'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                #  size is single value
                                elif self.peek_next_token() == "}":
                                    self.match("}")
                                    #  close it, single value 1D size
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume ')'
                                        return True
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  close it
                                        if self.peek_next_token() == ")":
                                            self.match(")")  # consume ')'
                                            return True
                                        #  error: not closed
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by a ')' or '{'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ')', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  size value is not followed by any of the following (# and Rcurl)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                            #  empty size, proceed to close it with '}'
                            elif self.peek_next_token() == "}":
                                self.match("}")
                                #  close it, 1D empty
                                if self.peek_next_token() == ")":
                                    self.match(")")  # consume ')'
                                    return True
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  close it
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume ')'
                                        return True
                                    #  error: not closed
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by a '{' or ')'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ')', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            #  no following
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Idnetifier', 'SunLiteral', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                        #  add it
                        elif self.peek_next_token() == "+":
                            self.match_mathop2("+")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  subtract it
                        elif self.peek_next_token() == "-":
                            self.match_mathop2("-")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  multiply it
                        elif self.peek_next_token() == "*":
                            self.match_mathop2("*")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  divide it
                        elif self.peek_next_token() == "/":
                            self.match_mathop2("/")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  modulo it
                        elif self.peek_next_token() == "%":
                            self.match_mathop2("%")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  exponentiate it
                        elif self.peek_next_token() == "**":
                            self.match_exponent2("**")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  close it (single value)
                        elif self.peek_next_token() == ")":
                            self.match(")")  # consume ')'
                            return True
                        #  error: not followed by any mathops or a terminator
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', , but instead got '{self.peek_next_token()}'")
                    #  error: no values inside
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral' but instead got '{self.peek_next_token()}'")
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            # Luhman type convert
            elif self.peek_next_token() == "Luhman":
                self.match("Luhman")
                if self.peek_next_token() == "(":
                    self.match("(")
                    #  must have values inside
                    if (re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral"
                            or self.peek_next_token() == "LuhmanLiteral"):
                        self.match(Resources.Value2)  # consume values
                        #  return is an array index path
                        if self.peek_next_token() == "{" and (re.match(r'Identifier\d*$', self.peek_previous_token())):
                            self.match("{")  # consume
                            #  array index assign path
                            if (re.match(r'Identifier\d*$', self.peek_next_token())
                                    or self.peek_next_token() == "SunLiteral"):
                                self.match(Resources.Value3)  # consume the values
                                #  size expression
                                if (
                                        self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                                    #  close it with "}" if size is fulfilled
                                    if self.peek_next_token() == "}":
                                        self.match("}")
                                        #  close it
                                        if self.peek_next_token() == ")":
                                            self.match(")")  # consume ')'
                                            return True
                                        # or add another size to become 2D array
                                        elif self.peek_next_token() == "{":
                                            self.match_arrID2D_index_parameter("{")
                                            #  close it
                                            if self.peek_next_token() == ")":
                                                self.match(")")  # consume ')'
                                                return True
                                            #  error: not closed
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by ')' or '{'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ')', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                    #  not closed with '}'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                #  size is single value
                                elif self.peek_next_token() == "}":
                                    self.match("}")
                                    #  close it, single value 1D size
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume ')'
                                        return True
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  close it
                                        if self.peek_next_token() == ")":
                                            self.match(")")  # consume ')'
                                            return True
                                        #  error: not closed
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by a ')' or '{'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ')', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  size value is not followed by any of the following (# and Rcurl)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                            #  empty size, proceed to close it with '}'
                            elif self.peek_next_token() == "}":
                                self.match("}")
                                #  close it, 1D empty
                                if self.peek_next_token() == ")":
                                    self.match(")")  # consume ')'
                                    return True
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  close it
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume ')'
                                        return True
                                    #  error: not closed
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by a '{' or ')'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ')', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            #  no following
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Idnetifier', 'SunLiteral', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                        #  add it
                        elif self.peek_next_token() == "+":
                            self.match_mathop2("+")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  subtract it
                        elif self.peek_next_token() == "-":
                            self.match_mathop2("-")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  multiply it
                        elif self.peek_next_token() == "*":
                            self.match_mathop2("*")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  divide it
                        elif self.peek_next_token() == "/":
                            self.match_mathop2("/")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  modulo it
                        elif self.peek_next_token() == "%":
                            self.match_mathop2("%")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  exponentiate it
                        elif self.peek_next_token() == "**":
                            self.match_exponent2("**")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  close it (single value)
                        elif self.peek_next_token() == ")":
                            self.match(")")  # consume ')'
                            return True
                        #  error: not followed by any mathops or a terminator
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', , but instead got '{self.peek_next_token()}'")
                    #  error: no values inside
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral' but instead got '{self.peek_next_token()}'")
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            # Starsys type convert
            elif self.peek_next_token() == "Starsys":
                self.match("Starsys")
                if self.peek_next_token() == "(":
                    self.match("(")
                    if self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"\
                            or self.peek_next_token() == "True" or self.peek_next_token() == "False":
                        self.match(Resources.Value4)  # consume values
                        #  close it with ')'
                        if self.peek_next_token() == ")":
                            self.match(")")
                            return True
                        #  error: not followed by ')'
                        else:
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                    #  error: values are not as expected
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'SunLiteral', "
                                           f"'LuhmanLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  else: if it is not followed by any of the value it shows the error
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected 'Sun', 'Luhman', 'Starsys' '(', 'Identifier', 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral', but instead got '{self.peek_next_token()}'")
        #  else: no equals sign
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected '{expected_token}' but found '{self.current_token}'")
            return False

    #  method that handles multiple identifiers separated with comma
    def matchValue_mult(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        #  expected token could be: id, sunliteral, luhmanliteral, starsysliteral, true, false
        if isinstance(expected_token, list):
            if (self.current_token == "SunLiteral" or self.current_token == "LuhmanLiteral"
                    or self.current_token == "StarsysLiteral" or re.match(r'Identifier\d*$', self.current_token)
                    or self.current_token == "True" or self.current_token == "False"):
                #  if the next is a comma proceed to check if it is followed by an identifier
                if self.peek_next_token() == ",":
                    self.match(",")
                    if (self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                            or self.peek_next_token() == "StarsysLiteral" or re.match(r'Identifier\d*$',self.peek_next_token())
                            or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                        self.matchValue_mult(Resources.Value1)
                    # else: if it is not followed by an id, it shows the error
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral', 'Identifier', 'True', 'False' "
                                           f", but instead got '{self.peek_next_token()}'")
                else:
                    return True  # else: last identifier has no following identifiers (comma)
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected '{expected_token}' but found '{self.current_token}'")
                return False

    #  method for Autom declaration
    def match_auto_assign(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "=":
            self.isMultiple = False
            # check if it is enclosed with parentheses
            if self.peek_next_token() == "(":
                self.match_parenth("(")
                if self.peek_previous_token() == ")":
                    #  terminate it
                    if self.peek_next_token() == "#":
                        self.match("#")
                    #  error: not terminated
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '+', '-', '*', '/', '%' but instead got '{self.peek_next_token()}'")
                else:
                    self.parenthError = True
                    return False
            #  check if it is followed by these values
            elif (re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral"
                  or self.peek_next_token() == "LuhmanLiteral" or self.peek_next_token() == "StarsysLiteral"
                  or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                #  SEMANTIC CHECK: BOOLEAN DATATYPE
                self.check_value_semantics()
                self.match(Resources.Value1)
                if self.peek_next_token() == ",":
                    self.isMultiple = True
                    self.match(",")
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.match("Identifier")  # consume Identifier
                        if self.peek_next_token() == "=":
                            self.match_auto_assign("=")  # Autom Path
                        else:
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '{expected_token}', but instead got '{self.peek_next_token()}'")# else: last identifier has no assigned value (=)
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                #  add is next
                elif self.peek_next_token() == "+":
                    self.match_mathop("+")
                #  exponentiation is next
                elif self.peek_next_token() == "**":
                    self.match_exponent("**")
                #  subtract is next
                elif self.peek_next_token() == "-":
                    self.match_mathop("-")
                #  multiply is next
                elif self.peek_next_token() == "*":
                    self.match_mathop("*")
                #  divide is next
                elif self.peek_next_token() == "/":
                    self.match_mathop("/")
                #  modulo is next
                elif self.peek_next_token() == "%":
                    self.match_mathop("%")
                #  array index assign path
                elif self.peek_next_token() == "{" and (re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.arrayError = True
                    self.match("{")
                    #  array index assign path
                    if (re.match(r'Identifier\d*$', self.peek_next_token())
                            or self.peek_next_token() == "SunLiteral"):
                        self.match(Resources.Value3)  # consume the values
                        #  size expression
                        if (self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                            self.match_mathop3(Resources.mathop1)  # size is a math expr
                            #  close it with "}" if size is fulfilled
                            if self.peek_next_token() == "}":
                                self.match("}")
                                # Terminate it
                                if self.peek_next_token() == "#":
                                    return
                                #  add is next
                                elif self.peek_next_token() == "+":
                                    self.match_mathop("+")
                                #  exponentiation is next
                                elif self.peek_next_token() == "**":
                                    self.match_exponent("**")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop("%")
                                #  assign value?
                                elif self.peek_next_token() == ",":
                                    self.isMultiple = True
                                    self.arrayError = False
                                    self.match(",")
                                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                                        self.matchID_mult("Identifier")
                                        if self.peek_next_token() == "=":
                                            self.match_auto_assign("=")
                                        else:
                                            return True  # else: last identifier has no assigned value (=)
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                                # add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_assign("{")
                                    # Terminate it
                                    if self.peek_next_token() == "#":
                                        return
                                    #  add is next
                                    elif self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                    #  exponentiation is next
                                    elif self.peek_next_token() == "**":
                                        self.match_exponent("**")
                                    #  subtract is next
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop("-")
                                    #  multiply is next
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop("*")
                                    #  divide is next
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop("/")
                                    #  modulo is next
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop("%")
                                    #  assign value?
                                    elif self.peek_next_token() == ",":
                                        self.isMultiple = True
                                        self.arrayError = False
                                        self.match(",")
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_auto_assign("=")
                                            else:
                                                return True  # else: last identifier has no assigned value (=)
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                                    #  not terminated or followed
                                    else:
                                        return False
                                #  not terminated or followed
                                else:
                                    return False
                            #  not closed with '}'
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                        #  size is single value
                        elif self.peek_next_token() == "}":
                            self.match("}")
                            # Terminate it
                            if self.peek_next_token() == "#":
                                return
                            #  add is next
                            elif self.peek_next_token() == "+":
                                self.match_mathop("+")
                            #  exponentiation is next
                            elif self.peek_next_token() == "**":
                                self.match_exponent("**")
                            #  subtract is next
                            elif self.peek_next_token() == "-":
                                self.match_mathop("-")
                            #  multiply is next
                            elif self.peek_next_token() == "*":
                                self.match_mathop("*")
                            #  divide is next
                            elif self.peek_next_token() == "/":
                                self.match_mathop("/")
                            #  modulo is next
                            elif self.peek_next_token() == "%":
                                self.match_mathop("%")
                            #  assign value?
                            elif self.peek_next_token() == ",":
                                self.isMultiple = True
                                self.arrayError = False
                                self.match(",")
                                if re.match(r'Identifier\d*$', self.peek_next_token()):
                                    self.matchID_mult("Identifier")
                                    if self.peek_next_token() == "=":
                                        self.match_auto_assign("=")
                                    else:
                                        return True  # else: last identifier has no assigned value (=)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                            # add another size to become 2D array
                            elif self.peek_next_token() == "{":
                                self.match_arrID2D_assign("{")
                                # Terminate it
                                if self.peek_next_token() == "#":
                                    return
                                #  add is next
                                elif self.peek_next_token() == "+":
                                    self.match_mathop("+")
                                #  exponentiation is next
                                elif self.peek_next_token() == "**":
                                    self.match_exponent("**")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop("%")
                                #  assign value?
                                elif self.peek_next_token() == ",":
                                    self.isMultiple = True
                                    self.arrayError = False
                                    self.match(",")
                                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                                        self.matchID_mult("Identifier")
                                        if self.peek_next_token() == "=":
                                            self.match_auto_assign("=")
                                        else:
                                            return True  # else: last identifier has no assigned value (=)
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                                #  not terminated or followed
                                else:
                                    return False
                            #  not terminated or followed
                            else:
                                return False
                        #  size value is not followed by any of the following (# and Rcurl)
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  empty size, proceed to close it with '}'
                    elif self.peek_next_token() == "}":
                        self.match("}")
                        # add another size to become 2D array
                        if self.peek_next_token() == "{":
                            self.match_arrID2D_assign("{")
                            # Terminate it
                            if self.peek_next_token() == "#":
                                return True
                            #  add is next
                            elif self.peek_next_token() == "+":
                                self.match_mathop("+")
                            #  exponentiation is next
                            elif self.peek_next_token() == "**":
                                self.match_exponent("**")
                            #  subtract is next
                            elif self.peek_next_token() == "-":
                                self.match_mathop("-")
                            #  multiply is next
                            elif self.peek_next_token() == "*":
                                self.match_mathop("*")
                            #  divide is next
                            elif self.peek_next_token() == "/":
                                self.match_mathop("/")
                            #  modulo is next
                            elif self.peek_next_token() == "%":
                                self.match_mathop("%")
                            #  assign value?
                            elif self.peek_next_token() == ",":
                                self.isMultiple = True
                                self.arrayError = False
                                self.match(",")
                                if re.match(r'Identifier\d*$', self.peek_next_token()):
                                    self.matchID_mult("Identifier")
                                    if self.peek_next_token() == "=":
                                        self.match_auto_assign("=")
                                    else:
                                        return True  # else: last identifier has no assigned value (=)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                            #  not terminated or followed
                            else:
                                return False
                        #  terminate it
                        elif self.peek_next_token() == "#":
                            self.match("#")
                        #  add is next
                        elif self.peek_next_token() == "+":
                            self.match_mathop("+")
                        #  exponentiation is next
                        elif self.peek_next_token() == "**":
                            self.match_exponent("**")
                        #  subtract is next
                        elif self.peek_next_token() == "-":
                            self.match_mathop("-")
                        #  multiply is next
                        elif self.peek_next_token() == "*":
                            self.match_mathop("*")
                        #  divide is next
                        elif self.peek_next_token() == "/":
                            self.match_mathop("/")
                        #  modulo is next
                        elif self.peek_next_token() == "%":
                            self.match_mathop("%")
                        #  assign value?
                        elif self.peek_next_token() == ",":
                            self.isMultiple = True
                            self.arrayError = False
                            self.match(",")
                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.matchID_mult("Identifier")
                                if self.peek_next_token() == "=":
                                    self.match_auto_assign("=")
                                else:
                                    return True  # else: last identifier has no assigned value (=)
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                        #  not terminated or followed
                        else:
                            return False
                    else:
                        return True  # else: last identifier has no following identifiers (comma)
                else:
                    return True  # else: last identifier has no following identifiers (comma)
            #  type conversion path
            elif self.peek_next_token() == "Sun":
                self.match("Sun")
                if self.peek_next_token() == "(":
                    self.match("(")  # consume '('
                    #  must have values inside
                    if (re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral"
                            or self.peek_next_token() == "LuhmanLiteral"):
                        self.match(Resources.Value2)  # consume values
                        #  return is an array index path
                        if self.peek_next_token() == "{" and (re.match(r'Identifier\d*$', self.peek_previous_token())):
                            self.match("{")  # consume
                            #  array index assign path
                            if (re.match(r'Identifier\d*$', self.peek_next_token())
                                    or self.peek_next_token() == "SunLiteral"):
                                self.match(Resources.Value3)  # consume the values
                                #  size expression
                                if (
                                        self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                                    #  close it with "}" if size is fulfilled
                                    if self.peek_next_token() == "}":
                                        self.match("}")
                                        #  close it
                                        if self.peek_next_token() == ")":
                                            self.match(")")  # consume ')'
                                            return True
                                        # or add another size to become 2D array
                                        elif self.peek_next_token() == "{":
                                            self.match_arrID2D_index_parameter("{")
                                            #  close it
                                            if self.peek_next_token() == ")":
                                                self.match(")")  # consume ')'
                                                return True
                                            #  error: not closed
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by ')' or '{'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ')', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                    #  not closed with '}'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                #  size is single value
                                elif self.peek_next_token() == "}":
                                    self.match("}")
                                    #  close it, single value 1D size
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume ')'
                                        return True
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  close it
                                        if self.peek_next_token() == ")":
                                            self.match(")")  # consume ')'
                                            return True
                                        #  error: not closed
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by a ')' or '{'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ')', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  size value is not followed by any of the following (# and Rcurl)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                            #  empty size, proceed to close it with '}'
                            elif self.peek_next_token() == "}":
                                self.match("}")
                                #  close it, 1D empty
                                if self.peek_next_token() == ")":
                                    self.match(")")  # consume ')'
                                    return True
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  close it
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume ')'
                                        return True
                                    #  error: not closed
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by a '{' or ')'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ')', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            #  no following
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Idnetifier', 'SunLiteral', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                        #  add it
                        elif self.peek_next_token() == "+":
                            self.match_mathop2("+")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  subtract it
                        elif self.peek_next_token() == "-":
                            self.match_mathop2("-")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  multiply it
                        elif self.peek_next_token() == "*":
                            self.match_mathop2("*")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  divide it
                        elif self.peek_next_token() == "/":
                            self.match_mathop2("/")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  modulo it
                        elif self.peek_next_token() == "%":
                            self.match_mathop2("%")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  exponentiate it
                        elif self.peek_next_token() == "**":
                            self.match_exponent2("**")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  close it (single value)
                        elif self.peek_next_token() == ")":
                            self.match(")")  # consume ')'
                            return True
                        #  error: not followed by any mathops or a terminator
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', , but instead got '{self.peek_next_token()}'")
                    #  error: no values inside
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral' but instead got '{self.peek_next_token()}'")
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            # Luhman type convert
            elif self.peek_next_token() == "Luhman":
                self.match("Luhman")
                if self.peek_next_token() == "(":
                    self.match("(")  # consume '('
                    #  must have values inside
                    if (re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral"
                            or self.peek_next_token() == "LuhmanLiteral"):
                        self.match(Resources.Value2)  # consume values
                        #  return is an array index path
                        if self.peek_next_token() == "{" and (re.match(r'Identifier\d*$', self.peek_previous_token())):
                            self.match("{")  # consume
                            #  array index assign path
                            if (re.match(r'Identifier\d*$', self.peek_next_token())
                                    or self.peek_next_token() == "SunLiteral"):
                                self.match(Resources.Value3)  # consume the values
                                #  size expression
                                if (
                                        self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                                    #  close it with "}" if size is fulfilled
                                    if self.peek_next_token() == "}":
                                        self.match("}")
                                        #  close it
                                        if self.peek_next_token() == ")":
                                            self.match(")")  # consume ')'
                                            return True
                                        # or add another size to become 2D array
                                        elif self.peek_next_token() == "{":
                                            self.match_arrID2D_index_parameter("{")
                                            #  close it
                                            if self.peek_next_token() == ")":
                                                self.match(")")  # consume ')'
                                                return True
                                            #  error: not closed
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by ')' or '{'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ')', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                    #  not closed with '}'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                #  size is single value
                                elif self.peek_next_token() == "}":
                                    self.match("}")
                                    #  close it, single value 1D size
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume ')'
                                        return True
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  close it
                                        if self.peek_next_token() == ")":
                                            self.match(")")  # consume ')'
                                            return True
                                        #  error: not closed
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by a ')' or '{'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ')', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  size value is not followed by any of the following (# and Rcurl)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                            #  empty size, proceed to close it with '}'
                            elif self.peek_next_token() == "}":
                                self.match("}")
                                #  close it, 1D empty
                                if self.peek_next_token() == ")":
                                    self.match(")")  # consume ')'
                                    return True
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  close it
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume ')'
                                        return True
                                    #  error: not closed
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by a '{' or ')'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ')', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            #  no following
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Idnetifier', 'SunLiteral', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                        #  add it
                        elif self.peek_next_token() == "+":
                            self.match_mathop2("+")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  subtract it
                        elif self.peek_next_token() == "-":
                            self.match_mathop2("-")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  multiply it
                        elif self.peek_next_token() == "*":
                            self.match_mathop2("*")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  divide it
                        elif self.peek_next_token() == "/":
                            self.match_mathop2("/")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  modulo it
                        elif self.peek_next_token() == "%":
                            self.match_mathop2("%")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  exponentiate it
                        elif self.peek_next_token() == "**":
                            self.match_exponent2("**")
                            #  close it
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume ')'
                                return True
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  close it (single value)
                        elif self.peek_next_token() == ")":
                            self.match(")")  # consume ')'
                            return True
                        #  error: not followed by any mathops or a terminator
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', , but instead got '{self.peek_next_token()}'")
                    #  error: no values inside
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral' but instead got '{self.peek_next_token()}'")
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            # Starsys type convert
            elif self.peek_next_token() == "Starsys":
                self.match("Starsys")
                if self.peek_next_token() == "(":
                    self.match("(")
                    if self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral" \
                            or self.peek_next_token() == "True" or self.peek_next_token() == "False":
                        self.match(Resources.Value4)  # consume values
                        #  close it with ')'
                        if self.peek_next_token() == ")":
                            self.match(")")
                            return True
                        #  error: not followed by ')'
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                    #  error: values are not as expected
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'SunLiteral', "
                                           f"'LuhmanLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  else: if it is not followed by any of the value it shows the error
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected  'Sun', 'Luhman', 'Starsys', 'Identifier', "
                    f"'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
        #  else: no equals sign
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected '{expected_token}' but found '{self.current_token}'")
            return False

    # method for parsing multiple variable assignments with expression
    def match_mathop(self, expected_token):
        if (self.peek_previous_token() != "SunLiteral" and self.peek_previous_token() != "LuhmanLiteral"
                and self.peek_previous_token() != ")" and self.peek_previous_token() != "}" and not re.match(r'Identifier\d*$', self.peek_previous_token())):
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral' before {self.peek_next_token()}")

        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        # check if it is enclosed with parentheses
        if expected_token == "+" or "-" or "*" or "/" or "%":
            self.isMultiple = False
            if self.peek_next_token() == "(":
                self.match_parenth("(")
                if self.peek_previous_token() == ")":
                    return True
                else:
                    self.parenthError = True
                    return False
            if (re.match(r'Identifier\d*$', self.peek_next_token())
                    or self.peek_next_token() == "SunLiteral"
                    or self.peek_next_token() == "LuhmanLiteral"):
                self.match(Resources.Value2)  # consume
                #  is it an array index?
                if self.peek_next_token() == "{" and (re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.match("{")
                    #  array index assign path
                    if (re.match(r'Identifier\d*$', self.peek_next_token())
                            or self.peek_next_token() == "SunLiteral"):
                        self.match(Resources.Value3)  # consume the values
                        #  size expression
                        if (
                                self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                            self.match_mathop3(Resources.mathop1)  # size is a math expr
                            #  close it with "}" if size is fulfilled
                            if self.peek_next_token() == "}":
                                self.match("}")
                                # Terminate it
                                if self.peek_next_token() == "#":
                                    return
                                #  add is next
                                elif self.peek_next_token() == "+":
                                    self.match_mathop("+")
                                #  exponentiation is next
                                elif self.peek_next_token() == "**":
                                    self.match_exponent("**")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop("%")
                                #  assign value?
                                elif self.peek_next_token() == ",":
                                    self.match(",")
                                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                                        self.matchID_mult("Identifier")
                                        if self.peek_next_token() == "=":
                                            self.match_mult_assign("=")
                                        else:
                                            return True  # else: last identifier has no assigned value (=)
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                                # add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_assign("{")
                                    # Terminate it
                                    if self.peek_next_token() == "#":
                                        return
                                    #  add is next
                                    elif self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                    #  exponentiation is next
                                    elif self.peek_next_token() == "**":
                                        self.match_exponent("**")
                                    #  subtract is next
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop("-")
                                    #  multiply is next
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop("*")
                                    #  divide is next
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop("/")
                                    #  modulo is next
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop("%")
                                    #  assign value?
                                    elif self.peek_next_token() == ",":
                                        self.match(",")
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            else:
                                                return True  # else: last identifier has no assigned value (=)
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                                    #  not terminated or followed
                                    else:
                                        return False
                                #  not terminated or followed
                                else:
                                    return False
                            #  not closed with '}'
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                        #  size is single value
                        elif self.peek_next_token() == "}":
                            self.match("}")
                            # Terminate it
                            if self.peek_next_token() == "#":
                                return
                            #  add is next
                            elif self.peek_next_token() == "+":
                                self.match_mathop("+")
                            #  exponentiation is next
                            elif self.peek_next_token() == "**":
                                self.match_exponent("**")
                            #  subtract is next
                            elif self.peek_next_token() == "-":
                                self.match_mathop("-")
                            #  multiply is next
                            elif self.peek_next_token() == "*":
                                self.match_mathop("*")
                            #  divide is next
                            elif self.peek_next_token() == "/":
                                self.match_mathop("/")
                            #  modulo is next
                            elif self.peek_next_token() == "%":
                                self.match_mathop("%")
                            #  assign value?
                            elif self.peek_next_token() == ",":
                                self.match(",")
                                if re.match(r'Identifier\d*$', self.peek_next_token()):
                                    self.matchID_mult("Identifier")
                                    if self.peek_next_token() == "=":
                                        self.match_mult_assign("=")
                                    else:
                                        return True  # else: last identifier has no assigned value (=)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                            # add another size to become 2D array
                            elif self.peek_next_token() == "{":
                                self.match_arrID2D_assign("{")
                                # Terminate it
                                if self.peek_next_token() == "#":
                                    return
                                #  add is next
                                elif self.peek_next_token() == "+":
                                    self.match_mathop("+")
                                #  exponentiation is next
                                elif self.peek_next_token() == "**":
                                    self.match_exponent("**")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop("%")
                                #  assign value?
                                elif self.peek_next_token() == ",":
                                    self.isMultiple = True
                                    self.match(",")
                                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                                        self.matchID_mult("Identifier")
                                        if self.peek_next_token() == "=":
                                            self.match_mult_assign("=")
                                        else:
                                            return True  # else: last identifier has no assigned value (=)
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                                #  not terminated or followed
                                else:
                                    return False
                            #  not terminated or followed
                            else:
                                return False
                        #  size value is not followed by any of the following (# and Rcurl)
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  empty size, proceed to close it with '}'
                    elif self.peek_next_token() == "}":
                        self.match("}")
                        # add another size to become 2D array
                        if self.peek_next_token() == "{":
                            self.match_arrID2D_assign("{")
                            # Terminate it
                            if self.peek_next_token() == "#":
                                return True
                            #  add is next
                            elif self.peek_next_token() == "+":
                                self.match_mathop("+")
                            #  exponentiation is next
                            elif self.peek_next_token() == "**":
                                self.match_exponent("**")
                            #  subtract is next
                            elif self.peek_next_token() == "-":
                                self.match_mathop("-")
                            #  multiply is next
                            elif self.peek_next_token() == "*":
                                self.match_mathop("*")
                            #  divide is next
                            elif self.peek_next_token() == "/":
                                self.match_mathop("/")
                            #  modulo is next
                            elif self.peek_next_token() == "%":
                                self.match_mathop("%")
                            #  assign value?
                            elif self.peek_next_token() == ",":
                                self.isMultiple = True
                                self.match(",")
                                if re.match(r'Identifier\d*$', self.peek_next_token()):
                                    self.matchID_mult("Identifier")
                                    if self.peek_next_token() == "=":
                                        self.match_mult_assign("=")
                                    else:
                                        return True  # else: last identifier has no assigned value (=)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected 'Idnetifier', but instead got '{self.peek_next_token()}'")
                            #  not terminated or followed
                            else:
                                return False
                        #  terminate it
                        elif self.peek_next_token() == "#":
                            self.match("#")
                        #  add is next
                        elif self.peek_next_token() == "+":
                            self.match_mathop("+")
                        #  exponentiation is next
                        elif self.peek_next_token() == "**":
                            self.match_exponent("**")
                        #  subtract is next
                        elif self.peek_next_token() == "-":
                            self.match_mathop("-")
                        #  multiply is next
                        elif self.peek_next_token() == "*":
                            self.match_mathop("*")
                        #  divide is next
                        elif self.peek_next_token() == "/":
                            self.match_mathop("/")
                        #  modulo is next
                        elif self.peek_next_token() == "%":
                            self.match_mathop("%")
                        #  assign value?
                        elif self.peek_next_token() == ",":
                            self.isMultiple = True
                            self.match(",")
                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.matchID_mult("Identifier")
                                if self.peek_next_token() == "=":
                                    self.match_mult_assign("=")
                                else:
                                    return True  # else: last identifier has no assigned value (=)
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                        #  not terminated or followed
                        else:
                            return False
                    else:
                        return True  # else: last identifier has no following identifiers (comma)
                #  add
                elif self.peek_next_token() == "+":
                    self.match_mathop("+")
                #  exponent
                elif self.peek_next_token() == "**":
                    self.match_exponent("**")
                #  subtract
                elif self.peek_next_token() == "-":
                    self.match_mathop("-")
                #  multiply
                elif self.peek_next_token() == "*":
                    self.match_mathop("*")
                #  divide
                elif self.peek_next_token() == "/":
                    self.match_mathop("/")
                #  modulo
                elif self.peek_next_token() == "%":
                    self.match_mathop("%")
                #  another variable separated with comma
                elif self.peek_next_token() == ",":
                    self.isMultiple = True
                    self.match(",")  # consume ','
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.match("Identifier")
                        if self.peek_next_token() == "=":
                            self.match_mult_assign("=")
                        else:
                            return True
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral', "
                                            f" but instead got '{self.peek_next_token()}'")
                else:
                    return True
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral', "
                                       f" but instead got '{self.peek_next_token()}'")

    #  method for handling expression inside a parentheses
    def match_mathop2(self, expected_token):
        if (self.peek_previous_token() != "SunLiteral" and self.peek_previous_token() != "LuhmanLiteral"
                and not re.match(r'Identifier\d*$', self.peek_previous_token()) and self.peek_previous_token() != "}"):
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral' before {self.peek_next_token()}")

        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "+" or "-" or "*" or "/" or "%":
            if self.peek_next_token() == "(":
                self.match_parenth("(")
                if self.peek_previous_token() == ")":
                    return True
                else:
                    self.parenthError = True
                    return False
            elif (re.match(r'Identifier\d*$', self.peek_next_token())
                    or "SunLiteral" or "LuhmanLiteral"):
                self.match(Resources.Value2)  # consume
                #  is it an array index?
                if self.peek_next_token() == "{" and (re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.match("{")
                    #  array index assign path
                    if (re.match(r'Identifier\d*$', self.peek_next_token())
                            or self.peek_next_token() == "SunLiteral"):
                        self.match(Resources.Value3)  # consume the values
                        #  size expression
                        if (
                                self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                            self.match_mathop3(Resources.mathop1)  # size is a math expr
                            #  close it with "}" if size is fulfilled
                            if self.peek_next_token() == "}":
                                self.match("}")
                                # Terminate it
                                if self.peek_next_token() == "#":
                                    return
                                #  add is next
                                elif self.peek_next_token() == "+":
                                    self.match_mathop2("+")
                                #  exponentiation is next
                                elif self.peek_next_token() == "**":
                                    self.match_exponent2("**")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop2("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop2("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop2("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop2("%")
                                # add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_assign("{")
                                    # Terminate it
                                    if self.peek_next_token() == "#":
                                        return
                                    #  add is next
                                    elif self.peek_next_token() == "+":
                                        self.match_mathop2("+")
                                    #  exponentiation is next
                                    elif self.peek_next_token() == "**":
                                        self.match_exponent2("**")
                                    #  subtract is next
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop2("-")
                                    #  multiply is next
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop2("*")
                                    #  divide is next
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop2("/")
                                    #  modulo is next
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop2("%")
                                    #  not terminated or followed
                                    else:
                                        return False
                                #  not terminated or followed
                                else:
                                    return False
                            #  not closed with '}'
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                        #  size is single value
                        elif self.peek_next_token() == "}":
                            self.match("}")
                            # Terminate it
                            if self.peek_next_token() == "#":
                                return
                            #  add is next
                            elif self.peek_next_token() == "+":
                                self.match_mathop2("+")
                            #  exponentiation is next
                            elif self.peek_next_token() == "**":
                                self.match_exponent2("**")
                            #  subtract is next
                            elif self.peek_next_token() == "-":
                                self.match_mathop2("-")
                            #  multiply is next
                            elif self.peek_next_token() == "*":
                                self.match_mathop2("*")
                            #  divide is next
                            elif self.peek_next_token() == "/":
                                self.match_mathop2("/")
                            #  modulo is next
                            elif self.peek_next_token() == "%":
                                self.match_mathop2("%")
                            # add another size to become 2D array
                            elif self.peek_next_token() == "{":
                                self.match_arrID2D_assign("{")
                                # Terminate it
                                if self.peek_next_token() == "#":
                                    return
                                #  add is next
                                elif self.peek_next_token() == "+":
                                    self.match_mathop2("+")
                                #  exponentiation is next
                                elif self.peek_next_token() == "**":
                                    self.match_exponent2("**")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop2("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop2("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop2("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop2("%")
                                #  not terminated or followed
                                else:
                                    return False
                            #  not terminated or followed
                            else:
                                return False
                        #  size value is not followed by any of the following (# and Rcurl)
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  empty size, proceed to close it with '}'
                    elif self.peek_next_token() == "}":
                        self.match("}")
                        # add another size to become 2D array
                        if self.peek_next_token() == "{":
                            self.match_arrID2D_assign("{")
                            # Terminate it
                            if self.peek_next_token() == "#":
                                return True
                            #  add is next
                            elif self.peek_next_token() == "+":
                                self.match_mathop2("+")
                            #  exponentiation is next
                            elif self.peek_next_token() == "**":
                                self.match_exponent2("**")
                            #  subtract is next
                            elif self.peek_next_token() == "-":
                                self.match_mathop2("-")
                            #  multiply is next
                            elif self.peek_next_token() == "*":
                                self.match_mathop2("*")
                            #  divide is next
                            elif self.peek_next_token() == "/":
                                self.match_mathop2("/")
                            #  modulo is next
                            elif self.peek_next_token() == "%":
                                self.match_mathop2("%")
                            #  not terminated or followed
                            else:
                                return False
                        #  terminate it
                        elif self.peek_next_token() == "#":
                            self.match("#")
                        #  add is next
                        elif self.peek_next_token() == "+":
                            self.match_mathop2("+")
                        #  exponentiation is next
                        elif self.peek_next_token() == "**":
                            self.match_exponent2("**")
                        #  subtract is next
                        elif self.peek_next_token() == "-":
                            self.match_mathop2("-")
                        #  multiply is next
                        elif self.peek_next_token() == "*":
                            self.match_mathop2("*")
                        #  divide is next
                        elif self.peek_next_token() == "/":
                            self.match_mathop2("/")
                        #  modulo is next
                        elif self.peek_next_token() == "%":
                            self.match_mathop2("%")
                        #  not terminated or followed
                        else:
                            return False
                    else:
                        return True  # else: last identifier has no following identifiers (comma)
                elif self.peek_next_token() == "+":
                    self.match_mathop2("+")  # consume
                elif self.peek_next_token() == "**":
                    self.match_exponent2("**")
                #  subtract is next
                elif self.peek_next_token() == "-":
                    self.match_mathop2("-")
                #  multiply is next
                elif self.peek_next_token() == "*":
                    self.match_mathop2("*")
                #  divide is next
                elif self.peek_next_token() == "/":
                    self.match_mathop2("/")
                #  modulo is next
                elif self.peek_next_token() == "%":
                    self.match_mathop2("%")
                else:
                    return True
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral', "
                                       f" but instead got '{self.peek_next_token()}'")

    # expr for array size
    def match_mathop3(self, expected_token):
        if (self.peek_previous_token() != "SunLiteral" and not
                re.match(r'Identifier\d*$', self.peek_previous_token())):
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral' before {self.peek_next_token()}")

        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if isinstance(expected_token, list):
            if (self.current_token == "+" or self.current_token == "-" or self.current_token == "*"
                    or self.current_token == "/" or self.current_token == "%"):
                if self.peek_next_token() == "(":
                    self.match_parenth("(")
                    if self.peek_previous_token() == ")":
                        return True
                    else:
                        self.parenthError = True
                        return False
                if (re.match(r'Identifier\d*$', self.peek_next_token())
                        or "SunLiteral"):
                    self.match(Resources.Value3)  # consume
                    if self.peek_next_token() == "+":
                        self.match_mathop3("+")  # consume
                    elif self.peek_next_token() == "**":
                        self.match_exponent("**")
                    #  subtract is next
                    elif self.peek_next_token() == "-":
                        self.match_mathop3("-")
                    #  multiply is next
                    elif self.peek_next_token() == "*":
                        self.match_mathop3("*")
                    #  divide is next
                    elif self.peek_next_token() == "/":
                        self.match_mathop3("/")
                    #  modulo is next
                    elif self.peek_next_token() == "%":
                        self.match_mathop3("%")
                    else:
                        return True
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', "
                                           f" but instead got '{self.peek_next_token()}'")

    #  method for values in a parentheses
    def match_parenth(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "(":
            if (re.match(r'Identifier\d*$', self.peek_next_token())
                    or "SunLiteral" or "LuhmanLiteral"):
                self.match(Resources.Value2)  # consume
                # add it
                if self.peek_next_token() == "+":
                    self.match_mathop2("+")
                    if self.peek_next_token() == ")":
                        self.match(")")  # consume
                        #  add is next
                        if self.peek_next_token() == "+":
                            self.match_mathop("+")
                        #  subtract is next
                        elif self.peek_next_token() == "-":
                            self.match_mathop("-")
                        #  multiply is next
                        elif self.peek_next_token() == "*":
                            self.match_mathop("*")
                        #  divide is next
                        elif self.peek_next_token() == "/":
                            self.match_mathop("/")
                        #  modulo is next
                        elif self.peek_next_token() == "%":
                            self.match_mathop("%")
                        #  next value asisgn
                        elif self.peek_next_token() == ",":
                            self.match(",")  # consume ','
                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.matchID_mult("Identifier")
                                if self.peek_next_token() == "=":
                                    self.match_mult_assign("=")
                                #  terminate it
                                elif self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not followed by any expected tokens
                                elif (self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                      or re.match(r'Identifier\d*$', self.peek_previous_token())
                                      and (self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                        f" but instead got '{self.peek_next_token()}'")
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                    f" but instead got '{self.peek_next_token()}'")
                        else:
                            return True
                    #  error: not followed by mathop or closed with ')'
                    else:
                        return False
                #  exponentiate
                elif self.peek_next_token() == "**":
                    self.match_exponent("**")
                    if self.peek_next_token() == ")":
                        self.match(")")  # consume
                        if self.peek_next_token() == "+":
                            self.match_mathop("+")
                            #  next value asisgn
                        elif self.peek_next_token() == ",":
                            self.match(",")  # consume ','
                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.matchID_mult("Identifier")
                                if self.peek_next_token() == "=":
                                    self.match_mult_assign("=")
                                #  terminate it
                                elif self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not followed by any expected tokens
                                elif (
                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                        and (
                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                        f" but instead got '{self.peek_next_token()}'")
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                    f" but instead got '{self.peek_next_token()}'")
                        else:
                            return True
                    #  error: not followed by mathop or closed with ')'
                    else:
                        return False
                # subtract it
                elif self.peek_next_token() == "-":
                    self.match_mathop2("-")
                    if self.peek_next_token() == ")":
                        self.match(")")  # consume
                        #  add is next
                        if self.peek_next_token() == "+":
                            self.match_mathop("+")
                        #  subtract is next
                        elif self.peek_next_token() == "-":
                            self.match_mathop("-")
                        #  multiply is next
                        elif self.peek_next_token() == "*":
                            self.match_mathop("*")
                        #  divide is next
                        elif self.peek_next_token() == "/":
                            self.match_mathop("/")
                        #  modulo is next
                        elif self.peek_next_token() == "%":
                            self.match_mathop("%")
                        #  next value asisgn
                        elif self.peek_next_token() == ",":
                            self.match(",")  # consume ','
                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.matchID_mult("Identifier")
                                if self.peek_next_token() == "=":
                                    self.match_mult_assign("=")
                                #  terminate it
                                elif self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not followed by any expected tokens
                                elif (
                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                        and (
                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                        f" but instead got '{self.peek_next_token()}'")
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                    f" but instead got '{self.peek_next_token()}'")
                        else:
                            return True
                    #  error: not followed by mathop or closed with ')'
                    else:
                        return False
                # multiply it
                elif self.peek_next_token() == "*":
                    self.match_mathop2("*")
                    if self.peek_next_token() == ")":
                        self.match(")")  # consume
                        #  add is next
                        if self.peek_next_token() == "+":
                            self.match_mathop("+")
                        #  subtract is next
                        elif self.peek_next_token() == "-":
                            self.match_mathop("-")
                        #  multiply is next
                        elif self.peek_next_token() == "*":
                            self.match_mathop("*")
                        #  divide is next
                        elif self.peek_next_token() == "/":
                            self.match_mathop("/")
                        #  modulo is next
                        elif self.peek_next_token() == "%":
                            self.match_mathop("%")
                        #  next value asisgn
                        elif self.peek_next_token() == ",":
                            self.match(",")  # consume ','
                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.matchID_mult("Identifier")
                                if self.peek_next_token() == "=":
                                    self.match_mult_assign("=")
                                #  terminate it
                                elif self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not followed by any expected tokens
                                elif (
                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                        and (
                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                        f" but instead got '{self.peek_next_token()}'")
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                    f" but instead got '{self.peek_next_token()}'")
                        else:
                            return True
                    #  error: not followed by mathop or closed with ')'
                    else:
                        return False
                # divide it
                elif self.peek_next_token() == "/":
                    self.match_mathop2("/")
                    if self.peek_next_token() == ")":
                        self.match(")")  # consume
                        #  add is next
                        if self.peek_next_token() == "+":
                            self.match_mathop("+")
                        #  subtract is next
                        elif self.peek_next_token() == "-":
                            self.match_mathop("-")
                        #  multiply is next
                        elif self.peek_next_token() == "*":
                            self.match_mathop("*")
                        #  divide is next
                        elif self.peek_next_token() == "/":
                            self.match_mathop("/")
                        #  modulo is next
                        elif self.peek_next_token() == "%":
                            self.match_mathop("%")
                        #  next value asisgn
                        elif self.peek_next_token() == ",":
                            self.match(",")  # consume ','
                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.matchID_mult("Identifier")
                                if self.peek_next_token() == "=":
                                    self.match_mult_assign("=")
                                #  terminate it
                                elif self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not followed by any expected tokens
                                elif (
                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                        and (
                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                        f" but instead got '{self.peek_next_token()}'")
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                    f" but instead got '{self.peek_next_token()}'")
                        else:
                            return True
                    #  error: not followed by mathop or closed with ')'
                    else:
                        return False
                # modulo
                elif self.peek_next_token() == "%":
                    self.match_mathop2("%")
                    if self.peek_next_token() == ")":
                        self.match(")")  # consume
                        #  add is next
                        if self.peek_next_token() == "+":
                            self.match_mathop("+")
                        #  subtract is next
                        elif self.peek_next_token() == "-":
                            self.match_mathop("-")
                        #  multiply is next
                        elif self.peek_next_token() == "*":
                            self.match_mathop("*")
                        #  divide is next
                        elif self.peek_next_token() == "/":
                            self.match_mathop("/")
                        #  modulo is next
                        elif self.peek_next_token() == "%":
                            self.match_mathop("%")
                        #  next value asisgn
                        elif self.peek_next_token() == ",":
                            self.match(",")  # consume ','
                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.matchID_mult("Identifier")
                                if self.peek_next_token() == "=":
                                    self.match_mult_assign("=")
                                #  terminate it
                                elif self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not followed by any expected tokens
                                elif (
                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                        and (
                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                        f" but instead got '{self.peek_next_token()}'")
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                    f" but instead got '{self.peek_next_token()}'")
                        else:
                            return True
                    #  error: not followed by mathop or closed with ')'
                    else:
                        return False
                #  close it with Rparenth
                elif self.peek_next_token() == ")":
                    self.match(")")
                    if self.peek_next_token() == "+":
                        self.match_mathop("+")
                    #  next value asisgn
                    elif self.peek_next_token() == ",":
                        self.match(",")  # consume ','
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.matchID_mult("Identifier")
                            if self.peek_next_token() == "=":
                                self.match_mult_assign("=")
                            #  terminate it
                            elif self.peek_next_token() == "#":
                                self.match("#")
                            #  error: not followed by any expected tokens
                            elif (
                                    self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                    or re.match(r'Identifier\d*$', self.peek_previous_token())
                                    and (
                                            self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                    f" but instead got '{self.peek_next_token()}'")
                        else:
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                               f" but instead got '{self.peek_next_token()}'")
                    else:
                        return True
                #  array index assign path
                elif self.peek_next_token() == "{":
                    self.match("{")
                    #  array index assign path
                    if (re.match(r'Identifier\d*$', self.peek_next_token())
                            or self.peek_next_token() == "SunLiteral"):
                        self.match(Resources.Value3)  # consume the values
                        #  size expression
                        if (self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                            self.match_mathop3(Resources.mathop1)  # size is a math expr
                            #  close it with "}" if size is fulfilled
                            if self.peek_next_token() == "}":
                                self.match("}")
                                # add it
                                if self.peek_next_token() == "+":
                                    self.match_mathop2("+")
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume
                                        #  add is next
                                        if self.peek_next_token() == "+":
                                            self.match_mathop("+")
                                        #  subtract is next
                                        elif self.peek_next_token() == "-":
                                            self.match_mathop("-")
                                        #  multiply is next
                                        elif self.peek_next_token() == "*":
                                            self.match_mathop("*")
                                        #  divide is next
                                        elif self.peek_next_token() == "/":
                                            self.match_mathop("/")
                                        #  modulo is next
                                        elif self.peek_next_token() == "%":
                                            self.match_mathop("%")
                                        #  next value asisgn
                                        elif self.peek_next_token() == ",":
                                            self.match(",")  # consume ','
                                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                self.matchID_mult("Identifier")
                                                if self.peek_next_token() == "=":
                                                    self.match_mult_assign("=")
                                                #  terminate it
                                                elif self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by any expected tokens
                                                elif (
                                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                        and (
                                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            return True
                                    #  error: not followed by mathop or closed with ')'
                                    else:
                                        return False
                                #  exponentiate
                                elif self.peek_next_token() == "**":
                                    self.match_exponent("**")
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume
                                        if self.peek_next_token() == "+":
                                            self.match_mathop("+")
                                            #  next value asisgn
                                        elif self.peek_next_token() == ",":
                                            self.match(",")  # consume ','
                                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                self.matchID_mult("Identifier")
                                                if self.peek_next_token() == "=":
                                                    self.match_mult_assign("=")
                                                #  terminate it
                                                elif self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by any expected tokens
                                                elif (
                                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                        and (
                                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            return True
                                    #  error: not followed by mathop or closed with ')'
                                    else:
                                        return False
                                # subtract it
                                elif self.peek_next_token() == "-":
                                    self.match_mathop2("-")
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume
                                        #  add is next
                                        if self.peek_next_token() == "+":
                                            self.match_mathop("+")
                                        #  subtract is next
                                        elif self.peek_next_token() == "-":
                                            self.match_mathop("-")
                                        #  multiply is next
                                        elif self.peek_next_token() == "*":
                                            self.match_mathop("*")
                                        #  divide is next
                                        elif self.peek_next_token() == "/":
                                            self.match_mathop("/")
                                        #  modulo is next
                                        elif self.peek_next_token() == "%":
                                            self.match_mathop("%")
                                        #  next value asisgn
                                        elif self.peek_next_token() == ",":
                                            self.match(",")  # consume ','
                                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                self.matchID_mult("Identifier")
                                                if self.peek_next_token() == "=":
                                                    self.match_mult_assign("=")
                                                #  terminate it
                                                elif self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by any expected tokens
                                                elif (
                                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                        and (
                                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            return True
                                    #  error: not followed by mathop or closed with ')'
                                    else:
                                        return False
                                # multiply it
                                elif self.peek_next_token() == "*":
                                    self.match_mathop2("*")
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume
                                        #  add is next
                                        if self.peek_next_token() == "+":
                                            self.match_mathop("+")
                                        #  subtract is next
                                        elif self.peek_next_token() == "-":
                                            self.match_mathop("-")
                                        #  multiply is next
                                        elif self.peek_next_token() == "*":
                                            self.match_mathop("*")
                                        #  divide is next
                                        elif self.peek_next_token() == "/":
                                            self.match_mathop("/")
                                        #  modulo is next
                                        elif self.peek_next_token() == "%":
                                            self.match_mathop("%")
                                        #  next value asisgn
                                        elif self.peek_next_token() == ",":
                                            self.match(",")  # consume ','
                                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                self.matchID_mult("Identifier")
                                                if self.peek_next_token() == "=":
                                                    self.match_mult_assign("=")
                                                #  terminate it
                                                elif self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by any expected tokens
                                                elif (
                                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                        and (
                                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            return True
                                    #  error: not followed by mathop or closed with ')'
                                    else:
                                        return False
                                # divide it
                                elif self.peek_next_token() == "/":
                                    self.match_mathop2("/")
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume
                                        #  add is next
                                        if self.peek_next_token() == "+":
                                            self.match_mathop("+")
                                        #  subtract is next
                                        elif self.peek_next_token() == "-":
                                            self.match_mathop("-")
                                        #  multiply is next
                                        elif self.peek_next_token() == "*":
                                            self.match_mathop("*")
                                        #  divide is next
                                        elif self.peek_next_token() == "/":
                                            self.match_mathop("/")
                                        #  modulo is next
                                        elif self.peek_next_token() == "%":
                                            self.match_mathop("%")
                                        #  next value asisgn
                                        elif self.peek_next_token() == ",":
                                            self.match(",")  # consume ','
                                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                self.matchID_mult("Identifier")
                                                if self.peek_next_token() == "=":
                                                    self.match_mult_assign("=")
                                                #  terminate it
                                                elif self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by any expected tokens
                                                elif (
                                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                        and (
                                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            return True
                                    #  error: not followed by mathop or closed with ')'
                                    else:
                                        return False
                                # modulo
                                elif self.peek_next_token() == "%":
                                    self.match_mathop2("%")
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume
                                        #  add is next
                                        if self.peek_next_token() == "+":
                                            self.match_mathop("+")
                                        #  subtract is next
                                        elif self.peek_next_token() == "-":
                                            self.match_mathop("-")
                                        #  multiply is next
                                        elif self.peek_next_token() == "*":
                                            self.match_mathop("*")
                                        #  divide is next
                                        elif self.peek_next_token() == "/":
                                            self.match_mathop("/")
                                        #  modulo is next
                                        elif self.peek_next_token() == "%":
                                            self.match_mathop("%")
                                        #  next value asisgn
                                        elif self.peek_next_token() == ",":
                                            self.match(",")  # consume ','
                                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                self.matchID_mult("Identifier")
                                                if self.peek_next_token() == "=":
                                                    self.match_mult_assign("=")
                                                #  terminate it
                                                elif self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by any expected tokens
                                                elif (
                                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                        and (
                                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            return True
                                    #  error: not followed by mathop or closed with ')'
                                    else:
                                        return False
                                #  close it with Rparenth
                                elif self.peek_next_token() == ")":
                                    self.match(")")
                                    if self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                    #  next value asisgn
                                    elif self.peek_next_token() == ",":
                                        self.match(",")  # consume ','
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            #  terminate it
                                            elif self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by any expected tokens
                                            elif (
                                                    self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                    or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                    and (
                                                            self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        return True
                                # add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_assign("{")
                                    # add it
                                    if self.peek_next_token() == "+":
                                        self.match_mathop2("+")
                                        if self.peek_next_token() == ")":
                                            self.match(")")  # consume
                                            #  add is next
                                            if self.peek_next_token() == "+":
                                                self.match_mathop("+")
                                            #  subtract is next
                                            elif self.peek_next_token() == "-":
                                                self.match_mathop("-")
                                            #  multiply is next
                                            elif self.peek_next_token() == "*":
                                                self.match_mathop("*")
                                            #  divide is next
                                            elif self.peek_next_token() == "/":
                                                self.match_mathop("/")
                                            #  modulo is next
                                            elif self.peek_next_token() == "%":
                                                self.match_mathop("%")
                                            #  next value asisgn
                                            elif self.peek_next_token() == ",":
                                                self.match(",")  # consume ','
                                                if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                    self.matchID_mult("Identifier")
                                                    if self.peek_next_token() == "=":
                                                        self.match_mult_assign("=")
                                                    #  terminate it
                                                    elif self.peek_next_token() == "#":
                                                        self.match("#")
                                                    #  error: not followed by any expected tokens
                                                    elif (
                                                            self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                            or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                            and (
                                                                    self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                            f" but instead got '{self.peek_next_token()}'")
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                return True
                                        #  error: not followed by mathop or closed with ')'
                                        else:
                                            return False
                                    #  exponentiate
                                    elif self.peek_next_token() == "**":
                                        self.match_exponent("**")
                                        if self.peek_next_token() == ")":
                                            self.match(")")  # consume
                                            if self.peek_next_token() == "+":
                                                self.match_mathop("+")
                                                #  next value asisgn
                                            elif self.peek_next_token() == ",":
                                                self.match(",")  # consume ','
                                                if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                    self.matchID_mult("Identifier")
                                                    if self.peek_next_token() == "=":
                                                        self.match_mult_assign("=")
                                                    #  terminate it
                                                    elif self.peek_next_token() == "#":
                                                        self.match("#")
                                                    #  error: not followed by any expected tokens
                                                    elif (
                                                            self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                            or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                            and (
                                                                    self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                            f" but instead got '{self.peek_next_token()}'")
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                return True
                                        else:
                                            return False
                                    # subtract it
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop2("-")
                                        if self.peek_next_token() == ")":
                                            self.match(")")  # consume
                                            #  add is next
                                            if self.peek_next_token() == "+":
                                                self.match_mathop("+")
                                            #  subtract is next
                                            elif self.peek_next_token() == "-":
                                                self.match_mathop("-")
                                            #  multiply is next
                                            elif self.peek_next_token() == "*":
                                                self.match_mathop("*")
                                            #  divide is next
                                            elif self.peek_next_token() == "/":
                                                self.match_mathop("/")
                                            #  modulo is next
                                            elif self.peek_next_token() == "%":
                                                self.match_mathop("%")
                                            #  next value asisgn
                                            elif self.peek_next_token() == ",":
                                                self.match(",")  # consume ','
                                                if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                    self.matchID_mult("Identifier")
                                                    if self.peek_next_token() == "=":
                                                        self.match_mult_assign("=")
                                                    #  terminate it
                                                    elif self.peek_next_token() == "#":
                                                        self.match("#")
                                                    #  error: not followed by any expected tokens
                                                    elif (
                                                            self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                            or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                            and (
                                                                    self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                            f" but instead got '{self.peek_next_token()}'")
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                return True
                                        else:
                                            return False
                                    # multiply it
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop2("*")
                                        if self.peek_next_token() == ")":
                                            self.match(")")  # consume
                                            #  add is next
                                            if self.peek_next_token() == "+":
                                                self.match_mathop("+")
                                            #  subtract is next
                                            elif self.peek_next_token() == "-":
                                                self.match_mathop("-")
                                            #  multiply is next
                                            elif self.peek_next_token() == "*":
                                                self.match_mathop("*")
                                            #  divide is next
                                            elif self.peek_next_token() == "/":
                                                self.match_mathop("/")
                                            #  modulo is next
                                            elif self.peek_next_token() == "%":
                                                self.match_mathop("%")
                                            #  next value asisgn
                                            elif self.peek_next_token() == ",":
                                                self.match(",")  # consume ','
                                                if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                    self.matchID_mult("Identifier")
                                                    if self.peek_next_token() == "=":
                                                        self.match_mult_assign("=")
                                                    #  terminate it
                                                    elif self.peek_next_token() == "#":
                                                        self.match("#")
                                                    #  error: not followed by any expected tokens
                                                    elif (
                                                            self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                            or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                            and (
                                                                    self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                            f" but instead got '{self.peek_next_token()}'")
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                return True
                                        else:
                                            return False
                                    # divide it
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop2("/")
                                        if self.peek_next_token() == ")":
                                            self.match(")")  # consume
                                            #  add is next
                                            if self.peek_next_token() == "+":
                                                self.match_mathop("+")
                                            #  subtract is next
                                            elif self.peek_next_token() == "-":
                                                self.match_mathop("-")
                                            #  multiply is next
                                            elif self.peek_next_token() == "*":
                                                self.match_mathop("*")
                                            #  divide is next
                                            elif self.peek_next_token() == "/":
                                                self.match_mathop("/")
                                            #  modulo is next
                                            elif self.peek_next_token() == "%":
                                                self.match_mathop("%")
                                            #  next value asisgn
                                            elif self.peek_next_token() == ",":
                                                self.match(",")  # consume ','
                                                if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                    self.matchID_mult("Identifier")
                                                    if self.peek_next_token() == "=":
                                                        self.match_mult_assign("=")
                                                    #  terminate it
                                                    elif self.peek_next_token() == "#":
                                                        self.match("#")
                                                    #  error: not followed by any expected tokens
                                                    elif (
                                                            self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                            or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                            and (
                                                                    self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                            f" but instead got '{self.peek_next_token()}'")
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                return True
                                        else:
                                            return False
                                    # modulo
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop2("%")
                                        if self.peek_next_token() == ")":
                                            self.match(")")  # consume
                                            #  add is next
                                            if self.peek_next_token() == "+":
                                                self.match_mathop("+")
                                            #  subtract is next
                                            elif self.peek_next_token() == "-":
                                                self.match_mathop("-")
                                            #  multiply is next
                                            elif self.peek_next_token() == "*":
                                                self.match_mathop("*")
                                            #  divide is next
                                            elif self.peek_next_token() == "/":
                                                self.match_mathop("/")
                                            #  modulo is next
                                            elif self.peek_next_token() == "%":
                                                self.match_mathop("%")
                                            #  next value asisgn
                                            elif self.peek_next_token() == ",":
                                                self.match(",")  # consume ','
                                                if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                    self.matchID_mult("Identifier")
                                                    if self.peek_next_token() == "=":
                                                        self.match_mult_assign("=")
                                                    #  terminate it
                                                    elif self.peek_next_token() == "#":
                                                        self.match("#")
                                                    #  error: not followed by any expected tokens
                                                    elif (
                                                            self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                            or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                            and (
                                                                    self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                            f" but instead got '{self.peek_next_token()}'")
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                return True
                                        else:
                                            return False
                                    #  close it with Rparenth
                                    elif self.peek_next_token() == ")":
                                        self.match(")")
                                        if self.peek_next_token() == "+":
                                            self.match_mathop("+")
                                        #  next value asisgn
                                        elif self.peek_next_token() == ",":
                                            self.match(",")  # consume ','
                                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                self.matchID_mult("Identifier")
                                                if self.peek_next_token() == "=":
                                                    self.match_mult_assign("=")
                                                #  terminate it
                                                elif self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by any expected tokens
                                                elif (
                                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                        and (
                                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            return True
                                    #  not terminated or followed
                                    else:
                                        return False
                                #  not terminated or followed
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected ')', '+', '-', '*', '/', '%', '**' but instead got '{self.peek_next_token()}'")
                            #  not closed with '}'
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                        #  size is single value
                        elif self.peek_next_token() == "}":
                            self.match("}")
                            # add it
                            if self.peek_next_token() == "+":
                                self.match_mathop2("+")
                                if self.peek_next_token() == ")":
                                    self.match(")")  # consume
                                    #  add is next
                                    if self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                    #  subtract is next
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop("-")
                                    #  multiply is next
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop("*")
                                    #  divide is next
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop("/")
                                    #  modulo is next
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop("%")
                                    #  next value asisgn
                                    elif self.peek_next_token() == ",":
                                        self.match(",")  # consume ','
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            #  terminate it
                                            elif self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by any expected tokens
                                            elif (
                                                    self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                    or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                    and (
                                                            self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        return True
                                else:
                                    return False
                            #  exponentiate
                            elif self.peek_next_token() == "**":
                                self.match_exponent("**")
                                if self.peek_next_token() == ")":
                                    self.match(")")  # consume
                                    if self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                        #  next value asisgn
                                    elif self.peek_next_token() == ",":
                                        self.match(",")  # consume ','
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            #  terminate it
                                            elif self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by any expected tokens
                                            elif (
                                                    self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                    or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                    and (
                                                            self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        return True
                                else:
                                    return False
                            # subtract it
                            elif self.peek_next_token() == "-":
                                self.match_mathop2("-")
                                if self.peek_next_token() == ")":
                                    self.match(")")  # consume
                                    #  add is next
                                    if self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                    #  subtract is next
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop("-")
                                    #  multiply is next
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop("*")
                                    #  divide is next
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop("/")
                                    #  modulo is next
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop("%")
                                    #  next value asisgn
                                    elif self.peek_next_token() == ",":
                                        self.match(",")  # consume ','
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            #  terminate it
                                            elif self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by any expected tokens
                                            elif (
                                                    self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                    or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                    and (
                                                            self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        return True
                                else:
                                    return False
                            # multiply it
                            elif self.peek_next_token() == "*":
                                self.match_mathop2("*")
                                if self.peek_next_token() == ")":
                                    self.match(")")  # consume
                                    #  add is next
                                    if self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                    #  subtract is next
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop("-")
                                    #  multiply is next
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop("*")
                                    #  divide is next
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop("/")
                                    #  modulo is next
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop("%")
                                    #  next value asisgn
                                    elif self.peek_next_token() == ",":
                                        self.match(",")  # consume ','
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            #  terminate it
                                            elif self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by any expected tokens
                                            elif (
                                                    self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                    or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                    and (
                                                            self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        return True
                                else:
                                    return False
                            # divide it
                            elif self.peek_next_token() == "/":
                                self.match_mathop2("/")
                                if self.peek_next_token() == ")":
                                    self.match(")")  # consume
                                    #  add is next
                                    if self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                    #  subtract is next
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop("-")
                                    #  multiply is next
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop("*")
                                    #  divide is next
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop("/")
                                    #  modulo is next
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop("%")
                                    #  next value asisgn
                                    elif self.peek_next_token() == ",":
                                        self.match(",")  # consume ','
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            #  terminate it
                                            elif self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by any expected tokens
                                            elif (
                                                    self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                    or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                    and (
                                                            self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        return True
                                else:
                                    return False
                            # modulo
                            elif self.peek_next_token() == "%":
                                self.match_mathop2("%")
                                if self.peek_next_token() == ")":
                                    self.match(")")  # consume
                                    #  add is next
                                    if self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                    #  subtract is next
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop("-")
                                    #  multiply is next
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop("*")
                                    #  divide is next
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop("/")
                                    #  modulo is next
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop("%")
                                    #  next value asisgn
                                    elif self.peek_next_token() == ",":
                                        self.match(",")  # consume ','
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            #  terminate it
                                            elif self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by any expected tokens
                                            elif (
                                                    self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                    or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                    and (
                                                            self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        return True
                                else:
                                    return False
                            #  close it with Rparenth
                            elif self.peek_next_token() == ")":
                                self.match(")")
                                if self.peek_next_token() == "+":
                                    self.match_mathop("+")
                                #  next value asisgn
                                elif self.peek_next_token() == ",":
                                    self.match(",")  # consume ','
                                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                                        self.matchID_mult("Identifier")
                                        if self.peek_next_token() == "=":
                                            self.match_mult_assign("=")
                                        #  terminate it
                                        elif self.peek_next_token() == "#":
                                            self.match("#")
                                        #  error: not followed by any expected tokens
                                        elif (
                                                self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                and (
                                                        self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                            f" but instead got '{self.peek_next_token()}'")
                                else:
                                    return True
                            # add another size to become 2D array
                            elif self.peek_next_token() == "{":
                                self.match_arrID2D_assign("{")
                                # add it
                                if self.peek_next_token() == "+":
                                    self.match_mathop2("+")
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume
                                        #  add is next
                                        if self.peek_next_token() == "+":
                                            self.match_mathop("+")
                                        #  subtract is next
                                        elif self.peek_next_token() == "-":
                                            self.match_mathop("-")
                                        #  multiply is next
                                        elif self.peek_next_token() == "*":
                                            self.match_mathop("*")
                                        #  divide is next
                                        elif self.peek_next_token() == "/":
                                            self.match_mathop("/")
                                        #  modulo is next
                                        elif self.peek_next_token() == "%":
                                            self.match_mathop("%")
                                        #  next value asisgn
                                        elif self.peek_next_token() == ",":
                                            self.match(",")  # consume ','
                                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                self.matchID_mult("Identifier")
                                                if self.peek_next_token() == "=":
                                                    self.match_mult_assign("=")
                                                #  terminate it
                                                elif self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by any expected tokens
                                                elif (
                                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                        and (
                                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            return True
                                    else:
                                        return False
                                #  exponentiate
                                elif self.peek_next_token() == "**":
                                    self.match_exponent("**")
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume
                                        if self.peek_next_token() == "+":
                                            self.match_mathop("+")
                                            #  next value asisgn
                                        elif self.peek_next_token() == ",":
                                            self.match(",")  # consume ','
                                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                self.matchID_mult("Identifier")
                                                if self.peek_next_token() == "=":
                                                    self.match_mult_assign("=")
                                                #  terminate it
                                                elif self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by any expected tokens
                                                elif (
                                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                        and (
                                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            return True
                                    else:
                                        return False
                                # subtract it
                                elif self.peek_next_token() == "-":
                                    self.match_mathop2("-")
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume
                                        #  add is next
                                        if self.peek_next_token() == "+":
                                            self.match_mathop("+")
                                        #  subtract is next
                                        elif self.peek_next_token() == "-":
                                            self.match_mathop("-")
                                        #  multiply is next
                                        elif self.peek_next_token() == "*":
                                            self.match_mathop("*")
                                        #  divide is next
                                        elif self.peek_next_token() == "/":
                                            self.match_mathop("/")
                                        #  modulo is next
                                        elif self.peek_next_token() == "%":
                                            self.match_mathop("%")
                                        #  next value asisgn
                                        elif self.peek_next_token() == ",":
                                            self.match(",")  # consume ','
                                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                self.matchID_mult("Identifier")
                                                if self.peek_next_token() == "=":
                                                    self.match_mult_assign("=")
                                                #  terminate it
                                                elif self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by any expected tokens
                                                elif (
                                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                        and (
                                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            return True
                                    else:
                                        return False
                                # multiply it
                                elif self.peek_next_token() == "*":
                                    self.match_mathop2("*")
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume
                                        #  add is next
                                        if self.peek_next_token() == "+":
                                            self.match_mathop("+")
                                        #  subtract is next
                                        elif self.peek_next_token() == "-":
                                            self.match_mathop("-")
                                        #  multiply is next
                                        elif self.peek_next_token() == "*":
                                            self.match_mathop("*")
                                        #  divide is next
                                        elif self.peek_next_token() == "/":
                                            self.match_mathop("/")
                                        #  modulo is next
                                        elif self.peek_next_token() == "%":
                                            self.match_mathop("%")
                                        #  next value asisgn
                                        elif self.peek_next_token() == ",":
                                            self.match(",")  # consume ','
                                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                self.matchID_mult("Identifier")
                                                if self.peek_next_token() == "=":
                                                    self.match_mult_assign("=")
                                                #  terminate it
                                                elif self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by any expected tokens
                                                elif (
                                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                        and (
                                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            return True
                                    else:
                                        return False
                                # divide it
                                elif self.peek_next_token() == "/":
                                    self.match_mathop2("/")
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume
                                        #  add is next
                                        if self.peek_next_token() == "+":
                                            self.match_mathop("+")
                                        #  subtract is next
                                        elif self.peek_next_token() == "-":
                                            self.match_mathop("-")
                                        #  multiply is next
                                        elif self.peek_next_token() == "*":
                                            self.match_mathop("*")
                                        #  divide is next
                                        elif self.peek_next_token() == "/":
                                            self.match_mathop("/")
                                        #  modulo is next
                                        elif self.peek_next_token() == "%":
                                            self.match_mathop("%")
                                        #  next value asisgn
                                        elif self.peek_next_token() == ",":
                                            self.match(",")  # consume ','
                                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                self.matchID_mult("Identifier")
                                                if self.peek_next_token() == "=":
                                                    self.match_mult_assign("=")
                                                #  terminate it
                                                elif self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by any expected tokens
                                                elif (
                                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                        and (
                                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            return True
                                    else:
                                        return False
                                # modulo
                                elif self.peek_next_token() == "%":
                                    self.match_mathop2("%")
                                    if self.peek_next_token() == ")":
                                        self.match(")")  # consume
                                        #  add is next
                                        if self.peek_next_token() == "+":
                                            self.match_mathop("+")
                                        #  subtract is next
                                        elif self.peek_next_token() == "-":
                                            self.match_mathop("-")
                                        #  multiply is next
                                        elif self.peek_next_token() == "*":
                                            self.match_mathop("*")
                                        #  divide is next
                                        elif self.peek_next_token() == "/":
                                            self.match_mathop("/")
                                        #  modulo is next
                                        elif self.peek_next_token() == "%":
                                            self.match_mathop("%")
                                        #  next value asisgn
                                        elif self.peek_next_token() == ",":
                                            self.match(",")  # consume ','
                                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                                self.matchID_mult("Identifier")
                                                if self.peek_next_token() == "=":
                                                    self.match_mult_assign("=")
                                                #  terminate it
                                                elif self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not followed by any expected tokens
                                                elif (
                                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                        and (
                                                                self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                        f" but instead got '{self.peek_next_token()}'")
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            return True
                                    else:
                                        return False
                                #  close it with Rparenth
                                elif self.peek_next_token() == ")":
                                    self.match(")")
                                    if self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                    #  next value asisgn
                                    elif self.peek_next_token() == ",":
                                        self.match(",")  # consume ','
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            #  terminate it
                                            elif self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by any expected tokens
                                            elif (
                                                    self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                    or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                    and (
                                                            self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        return True
                                #  not terminated or followed
                                else:
                                    return False
                            #  not terminated or followed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected ')', '+', '-', '*', '/', '%', '**' but instead got '{self.peek_next_token()}'")
                        #  size value is not followed by any of the following (# and Rcurl)
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%' after {self.peek_previous_token()}")
                    #  empty size, proceed to close it with '}'
                    elif self.peek_next_token() == "}":
                        self.match("}")
                        # add another size to become 2D array
                        if self.peek_next_token() == "{":
                            self.match_arrID2D_assign("{")
                            # add it
                            if self.peek_next_token() == "+":
                                self.match_mathop2("+")
                                if self.peek_next_token() == ")":
                                    self.match(")")  # consume
                                    #  add is next
                                    if self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                    #  subtract is next
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop("-")
                                    #  multiply is next
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop("*")
                                    #  divide is next
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop("/")
                                    #  modulo is next
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop("%")
                                    #  next value asisgn
                                    elif self.peek_next_token() == ",":
                                        self.match(",")  # consume ','
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            #  terminate it
                                            elif self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by any expected tokens
                                            elif (
                                                    self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                    or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                    and (
                                                            self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        return True
                                else:
                                    return False
                            #  exponentiate
                            elif self.peek_next_token() == "**":
                                self.match_exponent("**")
                                if self.peek_next_token() == ")":
                                    self.match(")")  # consume
                                    if self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                        #  next value asisgn
                                    elif self.peek_next_token() == ",":
                                        self.match(",")  # consume ','
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            #  terminate it
                                            elif self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by any expected tokens
                                            elif (
                                                    self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                    or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                    and (
                                                            self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        return True
                                else:
                                    return False
                            # subtract it
                            elif self.peek_next_token() == "-":
                                self.match_mathop2("-")
                                if self.peek_next_token() == ")":
                                    self.match(")")  # consume
                                    #  add is next
                                    if self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                    #  subtract is next
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop("-")
                                    #  multiply is next
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop("*")
                                    #  divide is next
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop("/")
                                    #  modulo is next
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop("%")
                                    #  next value asisgn
                                    elif self.peek_next_token() == ",":
                                        self.match(",")  # consume ','
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            #  terminate it
                                            elif self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by any expected tokens
                                            elif (
                                                    self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                    or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                    and (
                                                            self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        return True
                                else:
                                    return False
                            # multiply it
                            elif self.peek_next_token() == "*":
                                self.match_mathop2("*")
                                if self.peek_next_token() == ")":
                                    self.match(")")  # consume
                                    #  add is next
                                    if self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                    #  subtract is next
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop("-")
                                    #  multiply is next
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop("*")
                                    #  divide is next
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop("/")
                                    #  modulo is next
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop("%")
                                    #  next value asisgn
                                    elif self.peek_next_token() == ",":
                                        self.match(",")  # consume ','
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            #  terminate it
                                            elif self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by any expected tokens
                                            elif (
                                                    self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                    or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                    and (
                                                            self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        return True
                                else:
                                    return False
                            # divide it
                            elif self.peek_next_token() == "/":
                                self.match_mathop2("/")
                                if self.peek_next_token() == ")":
                                    self.match(")")  # consume
                                    #  add is next
                                    if self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                    #  subtract is next
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop("-")
                                    #  multiply is next
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop("*")
                                    #  divide is next
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop("/")
                                    #  modulo is next
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop("%")
                                    #  next value asisgn
                                    elif self.peek_next_token() == ",":
                                        self.match(",")  # consume ','
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            #  terminate it
                                            elif self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by any expected tokens
                                            elif (
                                                    self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                    or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                    and (
                                                            self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        return True
                                else:
                                    return False
                            # modulo
                            elif self.peek_next_token() == "%":
                                self.match_mathop2("%")
                                if self.peek_next_token() == ")":
                                    self.match(")")  # consume
                                    #  add is next
                                    if self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                    #  subtract is next
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop("-")
                                    #  multiply is next
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop("*")
                                    #  divide is next
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop("/")
                                    #  modulo is next
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop("%")
                                    #  next value asisgn
                                    elif self.peek_next_token() == ",":
                                        self.match(",")  # consume ','
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            #  terminate it
                                            elif self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not followed by any expected tokens
                                            elif (
                                                    self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                    or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                    and (
                                                            self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                    f" but instead got '{self.peek_next_token()}'")
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        return True
                                else:
                                    return False
                            #  close it with Rparenth
                            elif self.peek_next_token() == ")":
                                self.match(")")
                                if self.peek_next_token() == "+":
                                    self.match_mathop("+")
                                #  next value asisgn
                                elif self.peek_next_token() == ",":
                                    self.match(",")  # consume ','
                                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                                        self.matchID_mult("Identifier")
                                        if self.peek_next_token() == "=":
                                            self.match_mult_assign("=")
                                        #  terminate it
                                        elif self.peek_next_token() == "#":
                                            self.match("#")
                                        #  error: not followed by any expected tokens
                                        elif (
                                                self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                and (
                                                        self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                            f" but instead got '{self.peek_next_token()}'")
                                else:
                                    return True
                            #  not terminated or followed
                            else:
                                return False
                        # add it
                        elif self.peek_next_token() == "+":
                            self.match_mathop2("+")
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume
                                #  add is next
                                if self.peek_next_token() == "+":
                                    self.match_mathop("+")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop("%")
                                #  next value asisgn
                                elif self.peek_next_token() == ",":
                                    self.match(",")  # consume ','
                                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                                        self.matchID_mult("Identifier")
                                        if self.peek_next_token() == "=":
                                            self.match_mult_assign("=")
                                        #  terminate it
                                        elif self.peek_next_token() == "#":
                                            self.match("#")
                                        #  error: not followed by any expected tokens
                                        elif (
                                                self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                and (
                                                        self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                            f" but instead got '{self.peek_next_token()}'")
                                else:
                                    return True
                            else:
                                return False
                        #  exponentiate
                        elif self.peek_next_token() == "**":
                            self.match_exponent("**")
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume
                                if self.peek_next_token() == "+":
                                    self.match_mathop("+")
                                    #  next value asisgn
                                elif self.peek_next_token() == ",":
                                    self.match(",")  # consume ','
                                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                                        self.matchID_mult("Identifier")
                                        if self.peek_next_token() == "=":
                                            self.match_mult_assign("=")
                                        #  terminate it
                                        elif self.peek_next_token() == "#":
                                            self.match("#")
                                        #  error: not followed by any expected tokens
                                        elif (
                                                self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                and (
                                                        self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                            f" but instead got '{self.peek_next_token()}'")
                                else:
                                    return True
                            else:
                                return False
                        # subtract it
                        elif self.peek_next_token() == "-":
                            self.match_mathop2("-")
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume
                                #  add is next
                                if self.peek_next_token() == "+":
                                    self.match_mathop("+")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop("%")
                                #  next value asisgn
                                elif self.peek_next_token() == ",":
                                    self.match(",")  # consume ','
                                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                                        self.matchID_mult("Identifier")
                                        if self.peek_next_token() == "=":
                                            self.match_mult_assign("=")
                                        #  terminate it
                                        elif self.peek_next_token() == "#":
                                            self.match("#")
                                        #  error: not followed by any expected tokens
                                        elif (
                                                self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                and (
                                                        self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                            f" but instead got '{self.peek_next_token()}'")
                                else:
                                    return True
                            else:
                                return False
                        # multiply it
                        elif self.peek_next_token() == "*":
                            self.match_mathop2("*")
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume
                                #  add is next
                                if self.peek_next_token() == "+":
                                    self.match_mathop("+")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop("%")
                                #  next value asisgn
                                elif self.peek_next_token() == ",":
                                    self.match(",")  # consume ','
                                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                                        self.matchID_mult("Identifier")
                                        if self.peek_next_token() == "=":
                                            self.match_mult_assign("=")
                                        #  terminate it
                                        elif self.peek_next_token() == "#":
                                            self.match("#")
                                        #  error: not followed by any expected tokens
                                        elif (
                                                self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                and (
                                                        self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                            f" but instead got '{self.peek_next_token()}'")
                                else:
                                    return True
                            else:
                                return False
                        # divide it
                        elif self.peek_next_token() == "/":
                            self.match_mathop2("/")
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume
                                #  add is next
                                if self.peek_next_token() == "+":
                                    self.match_mathop("+")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop("%")
                                #  next value asisgn
                                elif self.peek_next_token() == ",":
                                    self.match(",")  # consume ','
                                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                                        self.matchID_mult("Identifier")
                                        if self.peek_next_token() == "=":
                                            self.match_mult_assign("=")
                                        #  terminate it
                                        elif self.peek_next_token() == "#":
                                            self.match("#")
                                        #  error: not followed by any expected tokens
                                        elif (
                                                self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                and (
                                                        self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                            f" but instead got '{self.peek_next_token()}'")
                                else:
                                    return True
                            else:
                                return False
                        # modulo
                        elif self.peek_next_token() == "%":
                            self.match_mathop2("%")
                            if self.peek_next_token() == ")":
                                self.match(")")  # consume
                                #  add is next
                                if self.peek_next_token() == "+":
                                    self.match_mathop("+")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop("%")
                                #  next value asisgn
                                elif self.peek_next_token() == ",":
                                    self.match(",")  # consume ','
                                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                                        self.matchID_mult("Identifier")
                                        if self.peek_next_token() == "=":
                                            self.match_mult_assign("=")
                                        #  terminate it
                                        elif self.peek_next_token() == "#":
                                            self.match("#")
                                        #  error: not followed by any expected tokens
                                        elif (
                                                self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                                or re.match(r'Identifier\d*$', self.peek_previous_token())
                                                and (
                                                        self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                                f" but instead got '{self.peek_next_token()}'")
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                            f" but instead got '{self.peek_next_token()}'")
                                else:
                                    return True
                            else:
                                return False
                        #  close it with Rparenth
                        elif self.peek_next_token() == ")":
                            self.match(")")
                            if self.peek_next_token() == "+":
                                self.match_mathop("+")
                            #  next value asisgn
                            elif self.peek_next_token() == ",":
                                self.match(",")  # consume ','
                                if re.match(r'Identifier\d*$', self.peek_next_token()):
                                    self.matchID_mult("Identifier")
                                    if self.peek_next_token() == "=":
                                        self.match_mult_assign("=")
                                    #  terminate it
                                    elif self.peek_next_token() == "#":
                                        self.match("#")
                                    #  error: not followed by any expected tokens
                                    elif (
                                            self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                            or re.match(r'Identifier\d*$', self.peek_previous_token())
                                            and (
                                                    self.peek_next_token != "#" or self.peek_next_token != "=" or self.peek_next_token != ",")):
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', ',' "
                                            f" but instead got '{self.peek_next_token()}'")
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', "
                                        f" but instead got '{self.peek_next_token()}'")
                            else:
                                return True
                        #  not terminated or followed
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected ')', '+', '-', '*', '/', '%', '**' but instead got '{self.peek_next_token()}'")
                    else:
                        return True  # else: last identifier has no following identifiers (comma)
                elif re.match(r'Identifier\d*$', self.peek_previous_token()) and (self.peek_next_token() != "+"
                                                                                  or self.peek_next_token() != "-"
                                                                                  or self.peek_next_token() != "*"
                                                                                  or self.peek_next_token() != "/"
                                                                                  or self.peek_next_token() != "%"
                                                                                  or self.peek_next_token() != "**"
                                                                                  or self.peek_next_token() != "{"):
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', '+', '-', '*', '/', '%', '**', 'Lcurlbraces'"
                                       f", but instead got '{self.peek_next_token()}'")
                #  literals
                elif ((self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral")
                                                                                and (self.peek_next_token() != "+"
                                                                                  or self.peek_next_token() != "-"
                                                                                  or self.peek_next_token() != "*"
                                                                                  or self.peek_next_token() != "/"
                                                                                  or self.peek_next_token() != "%"
                                                                                  or self.peek_next_token() != "**"
                                                                                  or self.peek_next_token() != "{")):
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', '+', '-', '*', '/', '%', '**'"
                                       f", but instead got '{self.peek_next_token()}'")
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral', "
                                       f" but instead got '{self.peek_next_token()}'")

    #  method if it is an exponentiation
    def match_exponent_param(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "**":
            if (re.match(r'Identifier\d*$', self.peek_next_token())
                    or "SunLiteral" or "LuhmanLiteral"):
                self.match(Resources.Value2)
                # add is next
                if self.peek_next_token() == "+":
                    self.match_mathop_param("+")
                #  subtract is next
                elif self.peek_next_token() == "-":
                    self.match_mathop_param("-")
                #  multiply is next
                elif self.peek_next_token() == "*":
                    self.match_mathop_param("*")
                #  divide is next
                elif self.peek_next_token() == "/":
                    self.match_mathop_param("/")
                #  modulo is next
                elif self.peek_next_token() == "%":
                    self.match_mathop_param("%")
                #  another variable separated with comma
                elif self.peek_next_token() == ",":
                    self.match_param_assign_mult(",")  # consume ','
                else:
                    return True  # terminate
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")

    #  method if it is an exponentiation
    def match_exponent(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "**":
            if (re.match(r'Identifier\d*$', self.peek_next_token())
                    or "SunLiteral" or "LuhmanLiteral"):
                self.match(Resources.Value2)
                # add is next
                if self.peek_next_token() == "+":
                    self.match_mathop("+")
                #  subtract is next
                elif self.peek_next_token() == "-":
                    self.match_mathop("-")
                #  multiply is next
                elif self.peek_next_token() == "*":
                    self.match_mathop("*")
                #  divide is next
                elif self.peek_next_token() == "/":
                    self.match_mathop("/")
                #  modulo is next
                elif self.peek_next_token() == "%":
                    self.match_mathop("%")
                #  another variable separated with comma
                elif self.peek_next_token() == ",":
                    self.match(",")  # consume ','
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.match("Identifier")
                        if self.peek_next_token() == "=":
                            self.match_mult_assign("=")
                        else:
                            return True  # terminate
                #  is it an array index?
                elif self.peek_next_token() == "{" and (re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.match("{")
                    #  array index assign path
                    if (re.match(r'Identifier\d*$', self.peek_next_token())
                            or self.peek_next_token() == "SunLiteral"):
                        self.match(Resources.Value3)  # consume the values
                        #  size expression
                        if (
                                self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                            self.match_mathop3(Resources.mathop1)  # size is a math expr
                            #  close it with "}" if size is fulfilled
                            if self.peek_next_token() == "}":
                                self.match("}")
                                # Terminate it
                                if self.peek_next_token() == "#":
                                    return
                                #  add is next
                                elif self.peek_next_token() == "+":
                                    self.match_mathop("+")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop("%")
                                #  assign value?
                                elif self.peek_next_token() == ",":
                                    self.match(",")
                                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                                        self.matchID_mult("Identifier")
                                        if self.peek_next_token() == "=":
                                            self.match_mult_assign("=")
                                        else:
                                            return True  # else: last identifier has no assigned value (=)
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                                # add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_assign("{")
                                    # Terminate it
                                    if self.peek_next_token() == "#":
                                        return
                                    #  add is next
                                    elif self.peek_next_token() == "+":
                                        self.match_mathop("+")
                                    #  subtract is next
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop("-")
                                    #  multiply is next
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop("*")
                                    #  divide is next
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop("/")
                                    #  modulo is next
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop("%")
                                    #  assign value?
                                    elif self.peek_next_token() == ",":
                                        self.match(",")
                                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                                            self.matchID_mult("Identifier")
                                            if self.peek_next_token() == "=":
                                                self.match_mult_assign("=")
                                            else:
                                                return True  # else: last identifier has no assigned value (=)
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                                    #  not terminated or followed
                                    else:
                                        return False
                                #  not terminated or followed
                                else:
                                    return False
                            #  not closed with '}'
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                        #  size is single value
                        elif self.peek_next_token() == "}":
                            self.match("}")
                            # Terminate it
                            if self.peek_next_token() == "#":
                                return
                            #  add is next
                            elif self.peek_next_token() == "+":
                                self.match_mathop("+")
                            #  subtract is next
                            elif self.peek_next_token() == "-":
                                self.match_mathop("-")
                            #  multiply is next
                            elif self.peek_next_token() == "*":
                                self.match_mathop("*")
                            #  divide is next
                            elif self.peek_next_token() == "/":
                                self.match_mathop("/")
                            #  modulo is next
                            elif self.peek_next_token() == "%":
                                self.match_mathop("%")
                            #  assign value?
                            elif self.peek_next_token() == ",":
                                self.match(",")
                                if re.match(r'Identifier\d*$', self.peek_next_token()):
                                    self.matchID_mult("Identifier")
                                    if self.peek_next_token() == "=":
                                        self.match_mult_assign("=")
                                    else:
                                        return True  # else: last identifier has no assigned value (=)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                            # add another size to become 2D array
                            elif self.peek_next_token() == "{":
                                self.match_arrID2D_assign("{")
                                # Terminate it
                                if self.peek_next_token() == "#":
                                    return
                                #  add is next
                                elif self.peek_next_token() == "+":
                                    self.match_mathop("+")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop("%")
                                #  assign value?
                                elif self.peek_next_token() == ",":
                                    self.match(",")
                                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                                        self.matchID_mult("Identifier")
                                        if self.peek_next_token() == "=":
                                            self.match_mult_assign("=")
                                        else:
                                            return True  # else: last identifier has no assigned value (=)
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                                #  not terminated or followed
                                else:
                                    return False
                            #  not terminated or followed
                            else:
                                return False
                        #  size value is not followed by any of the following (# and Rcurl)
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  empty size, proceed to close it with '}'
                    elif self.peek_next_token() == "}":
                        self.match("}")
                        # add another size to become 2D array
                        if self.peek_next_token() == "{":
                            self.match_arrID2D_assign("{")
                            # Terminate it
                            if self.peek_next_token() == "#":
                                return True
                            #  add is next
                            elif self.peek_next_token() == "+":
                                self.match_mathop("+")
                            #  subtract is next
                            elif self.peek_next_token() == "-":
                                self.match_mathop("-")
                            #  multiply is next
                            elif self.peek_next_token() == "*":
                                self.match_mathop("*")
                            #  divide is next
                            elif self.peek_next_token() == "/":
                                self.match_mathop("/")
                            #  modulo is next
                            elif self.peek_next_token() == "%":
                                self.match_mathop("%")
                            #  assign value?
                            elif self.peek_next_token() == ",":
                                self.match(",")
                                if re.match(r'Identifier\d*$', self.peek_next_token()):
                                    self.matchID_mult("Identifier")
                                    if self.peek_next_token() == "=":
                                        self.match_mult_assign("=")
                                    else:
                                        return True  # else: last identifier has no assigned value (=)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                            #  not terminated or followed
                            else:
                                return False
                        #  terminate it
                        elif self.peek_next_token() == "#":
                            self.match("#")
                        #  add is next
                        elif self.peek_next_token() == "+":
                            self.match_mathop("+")
                        #  subtract is next
                        elif self.peek_next_token() == "-":
                            self.match_mathop("-")
                        #  multiply is next
                        elif self.peek_next_token() == "*":
                            self.match_mathop("*")
                        #  divide is next
                        elif self.peek_next_token() == "/":
                            self.match_mathop("/")
                        #  modulo is next
                        elif self.peek_next_token() == "%":
                            self.match_mathop("%")
                        #  assign value?
                        elif self.peek_next_token() == ",":
                            self.match(",")
                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.matchID_mult("Identifier")
                                if self.peek_next_token() == "=":
                                    self.match_mult_assign("=")
                                else:
                                    return True  # else: last identifier has no assigned value (=)
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                        #  not terminated or followed
                        else:
                            return False
                    else:
                        return True  # else: last identifier has no following identifiers (comma)
                else:
                    return True  # terminate
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral', but instead got '{self.peek_next_token()}'")

    #  method if it is an exponentiation
    def match_exponent2(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "**":
            if (re.match(r'Identifier\d*$', self.peek_next_token())
                    or "SunLiteral" or "LuhmanLiteral"):
                self.match(Resources.Value2)
                # add is next
                if self.peek_next_token() == "+":
                    self.match_mathop2("+")
                #  subtract is next
                elif self.peek_next_token() == "-":
                    self.match_mathop2("-")
                #  multiply is next
                elif self.peek_next_token() == "*":
                    self.match_mathop2("*")
                #  divide is next
                elif self.peek_next_token() == "/":
                    self.match_mathop2("/")
                #  modulo is next
                elif self.peek_next_token() == "%":
                    self.match_mathop2("%")
                #  is it an array index?
                elif self.peek_next_token() == "{" and (re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.match("{")
                    #  array index assign path
                    if (re.match(r'Identifier\d*$', self.peek_next_token())
                            or self.peek_next_token() == "SunLiteral"):
                        self.match(Resources.Value3)  # consume the values
                        #  size expression
                        if (
                                self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                            self.match_mathop3(Resources.mathop1)  # size is a math expr
                            #  close it with "}" if size is fulfilled
                            if self.peek_next_token() == "}":
                                self.match("}")
                                # Terminate it
                                if self.peek_next_token() == "#":
                                    return
                                #  add is next
                                elif self.peek_next_token() == "+":
                                    self.match_mathop2("+")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop2("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop2("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop2("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop2("%")
                                # add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_assign("{")
                                    # Terminate it
                                    if self.peek_next_token() == "#":
                                        return
                                    #  add is next
                                    elif self.peek_next_token() == "+":
                                        self.match_mathop2("+")
                                    #  subtract is next
                                    elif self.peek_next_token() == "-":
                                        self.match_mathop2("-")
                                    #  multiply is next
                                    elif self.peek_next_token() == "*":
                                        self.match_mathop2("*")
                                    #  divide is next
                                    elif self.peek_next_token() == "/":
                                        self.match_mathop2("/")
                                    #  modulo is next
                                    elif self.peek_next_token() == "%":
                                        self.match_mathop2("%")
                                    #  not terminated or followed
                                    else:
                                        return False
                                #  not terminated or followed
                                else:
                                    return False
                            #  not closed with '}'
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                        #  size is single value
                        elif self.peek_next_token() == "}":
                            self.match("}")
                            # Terminate it
                            if self.peek_next_token() == "#":
                                return
                            #  add is next
                            elif self.peek_next_token() == "+":
                                self.match_mathop2("+")
                            #  subtract is next
                            elif self.peek_next_token() == "-":
                                self.match_mathop2("-")
                            #  multiply is next
                            elif self.peek_next_token() == "*":
                                self.match_mathop2("*")
                            #  divide is next
                            elif self.peek_next_token() == "/":
                                self.match_mathop2("/")
                            #  modulo is next
                            elif self.peek_next_token() == "%":
                                self.match_mathop2("%")
                            # add another size to become 2D array
                            elif self.peek_next_token() == "{":
                                self.match_arrID2D_assign("{")
                                # Terminate it
                                if self.peek_next_token() == "#":
                                    return
                                #  add is next
                                elif self.peek_next_token() == "+":
                                    self.match_mathop2("+")
                                #  subtract is next
                                elif self.peek_next_token() == "-":
                                    self.match_mathop2("-")
                                #  multiply is next
                                elif self.peek_next_token() == "*":
                                    self.match_mathop2("*")
                                #  divide is next
                                elif self.peek_next_token() == "/":
                                    self.match_mathop2("/")
                                #  modulo is next
                                elif self.peek_next_token() == "%":
                                    self.match_mathop2("%")
                                #  not terminated or followed
                                else:
                                    return False
                            #  not terminated or followed
                            else:
                                return False
                        #  size value is not followed by any of the following (# and Rcurl)
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  empty size, proceed to close it with '}'
                    elif self.peek_next_token() == "}":
                        self.match("}")
                        # add another size to become 2D array
                        if self.peek_next_token() == "{":
                            self.match_arrID2D_assign("{")
                            # Terminate it
                            if self.peek_next_token() == "#":
                                return True
                            #  add is next
                            elif self.peek_next_token() == "+":
                                self.match_mathop2("+")
                            #  subtract is next
                            elif self.peek_next_token() == "-":
                                self.match_mathop2("-")
                            #  multiply is next
                            elif self.peek_next_token() == "*":
                                self.match_mathop2("*")
                            #  divide is next
                            elif self.peek_next_token() == "/":
                                self.match_mathop2("/")
                            #  modulo is next
                            elif self.peek_next_token() == "%":
                                self.match_mathop2("%")
                            #  not terminated or followed
                            else:
                                return False
                        #  terminate it
                        elif self.peek_next_token() == "#":
                            self.match("#")
                        #  add is next
                        elif self.peek_next_token() == "+":
                            self.match_mathop2("+")
                        #  subtract is next
                        elif self.peek_next_token() == "-":
                            self.match_mathop2("-")
                        #  multiply is next
                        elif self.peek_next_token() == "*":
                            self.match_mathop2("*")
                        #  divide is next
                        elif self.peek_next_token() == "/":
                            self.match_mathop2("/")
                        #  modulo is next
                        elif self.peek_next_token() == "%":
                            self.match_mathop2("%")
                        #  not terminated or followed
                        else:
                            return False
                    else:
                        return True  # else: last identifier has no following identifiers (comma)

                else:
                    return True  # terminate
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")

    #  method to match if it is an array dec
    def match_arr_dec(self, expected_token):
        # SEMANTIC CHECK
        self.array_variable = self.peek_previous_lexeme()

        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "{":
            if (re.match(r'Identifier\d*$', self.peek_next_token())
                    or self.peek_next_token() == "SunLiteral"):
                self.match(Resources.Value3) # consume the values
                if (self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                    #  close it with "}" if size is fulfilled
                    if self.peek_next_token() == "}":
                        # SEMANTIC CHECK
                        self.array_size = self.peek_previous_lexeme()
                        self.declare_array(self.array_variable, self.array_size)
                        self.match("}")
                        # declare an array only
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  assign value to the declared array
                        # assign a value syntax for 1D array if followed by an equal after '}'
                        elif self.peek_next_token() == "=":
                            self.match("=")
                            # it must be followed by '['
                            if self.peek_next_token() == "[":
                                self.match_arr_value("[")
                                # close it with ']' after assigning value/s
                                if self.peek_next_token() == "]":
                                    self.match("]")
                                    # terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    # error, no terminator
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error if not closed with ']'
                                elif (self.peek_previous_token() == "SunLiteral"
                                            or self.peek_previous_token() == "LuhmanLiteral"
                                            or self.peek_previous_token() == "StarsysLiteral"
                                            or self.peek_previous_token() == "True"
                                            or self.peek_previous_token() == "False"
                                            or re.match(r'Identifier\d*$', self.peek_previous_token())
                                        and (self.peek_next_token() != "]" or self.peek_next_token() != ",")):
                                    self.arrayError = True
                                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', ',' but instead got '{self.peek_next_token()}'")
                            else:
                                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '[', but instead got '{self.peek_next_token()}'")
                        # add another size to become 2D array
                        elif self.peek_next_token() == "{":
                            self.match_arr_dec2d("{")
                            self.is2DValue = True
                        #  not terminated with # or followed by an '=' after Rcurl
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                    #  not closed with '}'
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                #  size is single value
                elif self.peek_next_token() == "}":
                    # SEMANTIC CHECK
                    self.array_size = self.peek_previous_lexeme()
                    self.declare_array(self.array_variable, self.array_size)
                    self.match("}")
                    if self.peek_next_token() == "#":
                        self.match("#")
                    # add another size to become 2D array
                    elif self.peek_next_token() == "{":
                        self.match_arr_dec2d("{")
                        self.is2DValue = True
                    # assign a value syntax for 1D array if followed by an equal after '}'
                    elif self.peek_next_token() == "=":
                        self.match("=")
                        # it must be followed by '['
                        if self.peek_next_token() == "[":
                            self.match_arr_value("[")
                            # close it with ']' after assigning value/s
                            if self.peek_next_token() == "]":
                                self.match("]")
                                # terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                # error, no terminator
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error if not closed with ']'
                            elif (self.peek_previous_token() == "SunLiteral"
                                          or self.peek_previous_token() == "LuhmanLiteral"
                                          or self.peek_previous_token() == "StarsysLiteral"
                                          or self.peek_previous_token() == "True"
                                          or self.peek_previous_token() == "False"
                                          or re.match(r'Identifier\d*$', self.peek_previous_token())
                                          and (self.peek_next_token() != "]" or self.peek_next_token() != ",")):
                                self.arrayError = True
                                self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected ']', ',' but instead got '{self.peek_next_token()}'")
                        #  not started with '[' after '='
                        else:
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '[', but instead got '{self.peek_next_token()}'")
                    #  not terminated with # or followed by an '=' after Rcurl
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', 'Lcurlraces', but instead got '{self.peek_next_token()}'")
                #  size value is not followed by any of the following (# and Rcurl)
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
            #  empty size, proceed to close it with '}'
            elif self.peek_next_token() == "}":
                # SEMANTIC CHECK
                self.array_size = None
                self.declare_array(self.array_variable, self.array_size)
                self.match("}")
                # assign a value syntax for 1D array (empty size)
                if self.peek_next_token() == "=":
                    self.match("=")
                    # it must be followed by '['
                    if self.peek_next_token() == "[":
                        self.match_arr_value("[")
                        # close it with ']' after assigning value/s
                        if self.peek_next_token() == "]":
                            self.match("]")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                            # error, no terminator
                            else:
                                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                        #  error if not closed with ']'
                        elif (self.peek_previous_token() == "SunLiteral"
                                      or self.peek_previous_token() == "LuhmanLiteral"
                                      or self.peek_previous_token() == "StarsysLiteral"
                                      or self.peek_previous_token() == "True"
                                      or self.peek_previous_token() == "False"
                                      or re.match(r'Identifier\d*$', self.peek_previous_token())
                                      and (self.peek_next_token() != "]" or self.peek_next_token() != ",")):
                            self.arrayError = True
                            self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected ']', ',' but instead got '{self.peek_next_token()}'")
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '[', but instead got '{self.peek_next_token()}'")
                # add another size to become 2D array
                elif self.peek_next_token() == "{":
                    self.match_arr_dec2d("{")
                    self.is2DValue = True
                # if it is terminated with '#'
                # or followed by anything other than '=' while being an empty size, it says an error
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '=', 'Lcurlybrace', but instead got '{self.peek_next_token()}'")
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', 'Rcurlybrace', but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected {expected_token} but found {self.current_token}")

    def match_arr_dec2d(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "{":
            if (re.match(r'Identifier\d*$', self.peek_next_token())
                    or self.peek_next_token() == "SunLiteral"):
                self.match(Resources.Value3) # consume the values
                if (self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                    #  close it with "}" if size is fulfilled
                    if self.peek_next_token() == "}":
                        # SEMANTIC CHECK
                        self.array2_size = self.peek_previous_lexeme()
                        self.declare_array2(self.array_variable, self.array2_size)
                        self.match("}")
                        if self.peek_next_token() == "#":
                            self.match("#")  # declare an array only
                        #  assign value to the declared array
                        # assign a value syntax for 2D array if followed by an equal after '}'
                        elif self.peek_next_token() == "=":
                            self.match("=")
                            # it must be followed by '['
                            if self.peek_next_token() == "[":
                                self.match_arr_value2d("[")  # assign 2D values
                                # close it with ']' after assigning value/s
                                if self.peek_next_token() == "]":
                                    self.match("]")
                                    # terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    # error, no terminator
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error if not closed with ']'
                                else:
                                    return False
                            else:
                                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '[', but instead got '{self.peek_next_token()}'")
                        #  not terminated with # or followed by an '=' after Rcurl
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', but instead got '{self.peek_next_token()}'")
                    #  not closed with '}'
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                #  size is single value
                elif self.peek_next_token() == "}":
                    # SEMANTIC CHECK
                    self.array2_size = self.peek_previous_lexeme()
                    self.declare_array2(self.array_variable, self.array2_size)
                    self.match("}")
                    if self.peek_next_token() == "#":
                        self.match("#")
                    # assign a value syntax for 2D array if followed by an equal after '}'
                    elif self.peek_next_token() == "=":
                        self.match("=")
                        # it must be followed by '['
                        if self.peek_next_token() == "[":
                            self.match_arr_value2d("[")  # assign 2D values
                            # close it with ']' after assigning value/s
                            if self.peek_next_token() == "]":
                                self.match("]")
                                # terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                # error, no terminator
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error if not closed with ']'
                            else:
                                return False
                        #  not started with '[' after '='
                        else:
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '[', but instead got '{self.peek_next_token()}'")
                    #  not terminated with # or followed by an '=' after Rcurl
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', but instead got '{self.peek_next_token()}'")
                #  size value is not followed by any of the following (# and Rcurl)
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '#', but instead got '{self.peek_next_token()}'")
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected {expected_token} but found {self.current_token}")

    # value/s in a 1D array
    def match_arr_value(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "[":
            if (re.match(r'Identifier\d*$', self.peek_next_token())
                    or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                    or self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True"
                    or self.peek_next_token() == "False"):
                # SEMANTIC CHECK
                self.check_array_type()
                self.match(Resources.Value1)
                self.array_value_count = 1
                self.array2_value_count_column = 1
                if self.peek_next_token() == ",":
                    self.match_mult_arr_val(",")
                    if self.peek_next_token() == "]":
                        #SEMANTIC CHECK
                        self.array_count(self.array_variable, self.array_value_count)
                        self.check_array_value()
                        return True # no more values next so next should be closing with ']'
                    # error no ']' found
                    else:
                        return False
                else:
                    return True  # single value
            elif self.peek_next_token() == "]":
                return True  # empty value
            else:
                self.arrayError = True
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected ']', 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral', 'Identifier', 'True', 'False', but instead got '{self.peek_next_token()}'")

    def match_arr_value2d(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()
        #  opening sqr brkt
        if expected_token == "[":
            #  opening sqr brkt again, for 2D assign value syntax
            if self.peek_next_token() == "[":
                self.match_arr_value("[") # assign values in that inner sqr brkt
                if self.peek_next_token() == "]":
                    # SEMANTIC CHECK
                    self.match("]")   # close it if done assigning 1st 2D values
                    self.array2_row_count = 1
                    #SEMANTIC CHECK
                    self.array2_value_count_row = 1

                    if self.peek_next_token() == "]":
                        # SEMANTIC CHECK
                        self.array_count_row(self.array_variable, self.array2_value_count_row)
                        self.array_count_column(self.array_variable, self.array2_value_count_column, self.array2_row_count)
                        # SEMANTIC CHECK
                        self.check_array2_value()
                        return True  # terminate it, no more 2D values next
                    # multiple 2D array values
                    elif self.peek_next_token() == ",":
                        self.match_mult_arr2d_val(",")
                        if self.peek_next_token() == "]":
                            # SEMANTIC CHECK
                            self.array_count_row(self.array_variable, self.array2_value_count_row)
                            self.array_count_column(self.array_variable, self.array2_value_count_column,
                                                    self.array2_row_count)
                            # SEMANTIC CHECK
                            self.check_array2_value()
                            return True # multiple array 2D value is done
                        elif self.peek_previous_token() == "]" and self.peek_next_token() != "]":
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', ',', but instead got '{self.peek_next_token()}'")
                    # unexpected next, should be ']' or ','
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', ',', but instead got '{self.peek_next_token()}'")
                #  error: not closed with ']'
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', ',', but instead got '{self.peek_next_token()}'")
            #  syntax: [[value]] not followed
            else:
                self.arrayError = True
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '[', but instead got '{self.peek_next_token()}'")

    # method for array multiple values
    def match_mult_arr_val(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == ",":
            if (re.match(r'Identifier\d*$', self.peek_next_token())
                    or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                    or self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True"
                    or self.peek_next_token() == "False"):
                # SEMANTIC CHECK
                self.check_array_type()
                self.match(Resources.Value1)
                self.array_value_count += 1
                self.array2_value_count_column += 1
                if self.peek_next_token() == ",":
                    self.match_mult_arr_val(",")  # more values
                else:
                    return True  # else: last value has no following values (comma)
            else:
                self.arrayError = True
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral', 'Identifier', 'True', 'False', but instead got '{self.peek_next_token()}'")

    def match_mult_arr2d_val(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == ",":
            if self.peek_next_token() == "[":
                self.match("[")
                if (re.match(r'Identifier\d*$', self.peek_next_token())
                        or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                        or self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True"
                        or self.peek_next_token() == "False"):
                    # SEMANTIC CHECK
                    self.check_array_type()
                    self.match(Resources.Value1)
                    self.array2_value_count_column += 1
                    if self.peek_next_token() == ",":
                        self.match_mult_arr_val(",")
                        if self.peek_next_token() == "]":
                            self.match("]")
                            # SEMANTIC CHECK
                            self.array2_value_count_row += 1
                            self.array2_row_count += 1
                            if self.peek_next_token() == ",":
                                self.match_mult_arr2d_val(",") # more 2D values
                            else:
                                return True # no more 2D values to add
                        #  error: not followed by ] or ,
                        elif (self.peek_previous_token() == "SunLiteral"
                                      or self.peek_previous_token() == "LuhmanLiteral"
                                      or self.peek_previous_token() == "StarsysLiteral"
                                      or self.peek_previous_token() == "True"
                                      or self.peek_previous_token() == "False"
                                      or re.match(r'Identifier\d*$', self.peek_previous_token())
                                      and (self.peek_next_token() != "]" or self.peek_next_token() != ",")):
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', ',' but instead got '{self.peek_next_token()}'")
                    #  single value
                    elif self.peek_next_token() == "]":
                        self.match("]")
                        # SEMANTIC CHECK
                        self.array2_value_count_row += 1
                        self.array2_row_count += 1
                        if self.peek_next_token() == ",":
                            self.match_mult_arr2d_val(",")  # more 2D values
                        else:
                            return True  # no more 2D values to add
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', ',', but instead got '{self.peek_next_token()}'")
                #  empty value
                elif self.peek_next_token() == "]":
                    self.match("]")
                    # SEMANTIC CHECK
                    self.array2_value_count_row += 1
                    self.array2_row_count += 1
                    if self.peek_next_token() == ",":
                        self.match_mult_arr2d_val(",")  # more 2D values
                    else:
                        return True  # no more 2D values to add
                # unexpected end, expected ']'
                else:
                    self.arrayError = True
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral', 'Identifier', 'True', 'False' but instead got '{self.peek_next_token()}'")
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected '[', but instead got '{self.peek_next_token()}'")

    #  method that parse the import statement
    def parse_import_statement(self):
        while self.peek_next_token() in ["Import"]:
            if self.peek_next_token() == "Import":
                self.match("Import")
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.match("Identifier")
                    if self.peek_next_token() == "#":
                        self.match("#")
                    elif self.peek_next_token() == "~":  # proceed to tilde syntax
                        self.parse_import_statement1()
                    # multiple?
                    elif self.peek_next_token() == ",":
                        self.match(",")
                        # must be followed by an identifier
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.matchID_mult("Identifier")
                            # terminate?
                            if self.peek_next_token() == "#":
                                self.match("#")
                            # not terminated
                            elif self.peek_next_token() != "#" and re.match(r'Identifier\d*$', self.peek_previous_token()):
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', ',', but instead got '{self.peek_next_token()}'")
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '~', 'comma', '#', but instead got '{self.peek_next_token()}'")
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            else:
                break


    #  method that also parse the import statement (tilde syntax)
    def parse_import_statement1(self):
        if self.peek_next_token() == "~":
            self.match("~")
            if re.match(r'Identifier\d*$', self.peek_next_token()):
                self.matchID_mult("Identifier")
                if self.peek_next_token() == "#":
                    self.match("#")
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected '~', ',', but instead got '{self.peek_next_token()}'")

    # method for parsing variable declarations (global)
    def parse_variable_declaration(self):
        # assign datatype
        if self.peek_previous_token() == "Sun":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Luhman":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Starsys":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Boolean":
            self.datatype = self.peek_previous_token()

        if re.match(r'Identifier\d*$', self.peek_next_token()):
            self.current_scope = 'global'
            self.matchID_mult("Identifier")
            if self.current_lexeme == "Universe":
                self.peek_next_token()
            else:
                self.var_name = self.current_lexeme  #  assign variable
                # check if the variable is a function prototype name
                if self.var_name in self.prototype_parameter_table:
                    self.prototype_function_exist = True
                scope = 'global'
                self.scope = scope # scope
                self.current_scope = scope # current scope
                self.declare_variable(self.var_name, self.datatype, self.scope)  # Store the datatype in the table (GLOBAL)
            #  is it an array declaration?
            if self.peek_next_token() == "{":
                self.match_arr_dec("{")
            #  is it a subfunction?
            elif self.peek_next_token() == "(":
                self.prototype_function_datatype = self.datatype
                self.parse_sub_function_ptype()
            #  or assign value/s?
            elif self.peek_next_token() == "=":
                self.match_mult_assign("=")
                # terminate it
                if self.peek_next_token() == "#":
                    self.match("#")
                #  error: not terminated (multiple path)
                elif self.peek_next_token() != "#" and self.isMultiple and not self.parenthError and not self.arrayError and (
                                self.peek_previous_token() == "SunLiteral"
                                or self.peek_previous_token() == "LuhmanLiteral"
                                or self.peek_previous_token() == "StarsysLiteral"
                                or self.peek_previous_token() == "True"
                                or self.peek_previous_token() == "False"
                                or re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '=', but instead got '{self.peek_next_token()}'")
                #  error: not terminated (values has invalid mathop or no (comma,#) next)
                elif self.peek_next_token() != "#" and not self.isMultiple and not self.parenthError and not self.arrayError and (
                        self.peek_previous_token() == "SunLiteral"
                        or self.peek_previous_token() == "LuhmanLiteral"
                        or self.peek_previous_token() == "StarsysLiteral"
                        or self.peek_previous_token() == "True"
                        or self.peek_previous_token() == "False"
                        or re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '+', '-', '*', '/', '%', '**' but instead got '{self.peek_next_token()}'")
            #  terminate?
            elif self.peek_next_token() == "#":
                self.match("#")

            # error: missing any of the possibilities
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', '(', 'Lcurlbraces', ','"
                    f", but instead got '{self.peek_next_token()}'")
        #  error: no identifier after the datatype
        else:
            return False

    # method for parsing variable declarations in functions
    def parse_variable_declaration_func(self):
        # assign datatype
        if self.peek_previous_token() == "Sun":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Luhman":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Starsys":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Boolean":
            self.datatype = self.peek_previous_token()

        if re.match(r'Identifier\d*$', self.peek_next_token()):
            self.current_scope = 'function'
            self.matchID_mult("Identifier")
            #  SEMANTIC CHECK
            if self.current_lexeme == "Universe":
                self.peek_next_token()
            else:
                self.var_name = self.current_lexeme  # assign variable
                scope = 'function'
                self.check_variable_redeclaration()
                self.scope = scope # scope
                self.current_scope = scope  # current scope
                self.declare_variable(self.var_name, self.datatype, self.scope)  # Store the datatype in the table
            #  is it an array declaration?
            if self.peek_next_token() == "{":
                self.match_arr_dec("{")
            #  is it a subfunction definition?
            elif self.peek_next_token() == "(":
                self.function_datatype = self.datatype
                self.match_subfunc_statement("(")  # consume '('
            #  or assign value/s?
            elif self.peek_next_token() == "=":
                self.match_mult_assign("=")
                if self.peek_next_token() == "#":
                    self.match("#")
                #  error: not terminated (multiple path)
                elif self.peek_next_token() != "#" and self.isMultiple and not self.parenthError and not self.arrayError and (self.peek_previous_token() == "SunLiteral"
                                                            or self.peek_previous_token() == "LuhmanLiteral"
                                                            or self.peek_previous_token() == "StarsysLiteral"
                                                            or self.peek_previous_token() == "True"
                                                            or self.peek_previous_token() == "False"
                                                            or re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '=', but instead got '{self.peek_next_token()}'")
                #  error: not terminated (values has invalid mathop or no (comma,#) next)
                elif self.peek_next_token() != "#" and not self.isMultiple and not self.parenthError and not self.arrayError and (
                                self.peek_previous_token() == "SunLiteral"
                                or self.peek_previous_token() == "LuhmanLiteral"
                                or self.peek_previous_token() == "StarsysLiteral"
                                or self.peek_previous_token() == "True"
                                or self.peek_previous_token() == "False"
                                or re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '+', '-', '*', '/', '%', '**' but instead got '{self.peek_next_token()}'")
            #  terminate?
            elif self.peek_next_token() == "#":
                self.match("#")
            # error: missing any of the possibilities
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', '(', 'Lcurlbraces', ',' "
                    f", but instead got '{self.peek_next_token()}'")
        #  error: no identifier after the datatype
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")

    # method for parsing variable declarations (local)
    def parse_variable_declaration_main(self):
        # assign datatype
        if self.peek_previous_token() == "Sun":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Luhman":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Starsys":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Boolean":
            self.datatype = self.peek_previous_token()
        if re.match(r'Identifier\d*$', self.peek_next_token()):
            self.current_scope = 'main'
            self.matchID_mult("Identifier")
            if self.current_lexeme == "Universe":
                self.peek_next_token()
            else:
                self.var_name = self.current_lexeme  # assign variable
                scope = 'main'
                self.scope = scope
                self.current_scope = scope  # current scope
                self.declare_variable(self.var_name, self.datatype, self.scope)  # Store the datatype in the table (MAIN)
            #  is it an array declaration?
            if self.peek_next_token() == "{":
                self.match_arr_dec("{")
            #  or assign value/s?
            elif self.peek_next_token() == "=":
                self.match_mult_assign("=")
                #  terminate it
                if self.peek_next_token() == "#":
                    self.match("#")
                #  error: not terminated (multiple path)
                elif self.peek_next_token() != "#" and self.isMultiple and not self.parenthError and not self.arrayError and (
                                self.peek_previous_token() == "SunLiteral"
                                or self.peek_previous_token() == "LuhmanLiteral"
                                or self.peek_previous_token() == "StarsysLiteral"
                                or self.peek_previous_token() == "True"
                                or self.peek_previous_token() == "False"
                                or re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '=', but instead got '{self.peek_next_token()}'")
                #  error: not terminated (values has invalid mathop or no (comma,#) next)
                elif self.peek_next_token() != "#" and not self.isMultiple and not self.parenthError and not self.arrayError and (
                        self.peek_previous_token() == "SunLiteral"
                        or self.peek_previous_token() == "LuhmanLiteral"
                        or self.peek_previous_token() == "StarsysLiteral"
                        or self.peek_previous_token() == "True"
                        or self.peek_previous_token() == "False"
                        or re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '+', '-', '*', '/', '%', '**' but instead got '{self.peek_next_token()}'")
            #  terminate?
            elif self.peek_next_token() == "#":
                self.match("#")
            # error: missing any of the possibilities
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', 'Lcurlbraces', ',' "
                    f", but instead got '{self.peek_next_token()}'")
        #  error: no identifier after the datatype
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")

    #  method for parsing Autom variable declaration
    def parse_auto_dec(self):
        if re.match(r'Identifier\d*$', self.peek_next_token()):
            self.matchID_mult("Identifier")

            #  assign value/s?
            if self.peek_next_token() == "=":
                self.match_auto_assign("=")
                if self.peek_next_token() == "#":
                    self.match("#")
                #  error: not terminated (multiple path)
                elif self.peek_next_token() != "#" and self.isMultiple and not self.parenthError and not self.arrayError and (
                            self.peek_previous_token() == "SunLiteral"
                            or self.peek_previous_token() == "LuhmanLiteral"
                            or self.peek_previous_token() == "StarsysLiteral"
                            or self.peek_previous_token() == "True"
                            or self.peek_previous_token() == "False"
                            or re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '=', but instead got '{self.peek_next_token()}'")
                #  error: not terminated (values has invalid mathop or no (comma,#) next)
                elif self.peek_next_token() != "#" and not self.isMultiple and not self.parenthError and not self.arrayError and (
                        self.peek_previous_token() == "SunLiteral"
                        or self.peek_previous_token() == "LuhmanLiteral"
                        or self.peek_previous_token() == "StarsysLiteral"
                        or self.peek_previous_token() == "True"
                        or self.peek_previous_token() == "False"
                        or re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '+', '-', '*', '/', '%', '**' but instead got '{self.peek_next_token()}'")
            #  is it an array declaration?
            elif self.peek_next_token() == "{":
                self.match_arr_dec("{")
            # error: missing any of the possibilities
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected 'Lcurlybrace', '=' "
                    f", but instead got '{self.peek_next_token()}'")
        #  error: no identifier after the datatype
        else:
            return False

    #  method for parsing boolean var declarations (global)
    def parse_boolean(self):
        # assign datatype
        if self.peek_previous_token() == "Sun":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Luhman":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Starsys":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Boolean":
            self.datatype = self.peek_previous_token()

        if re.match(r'Identifier\d*$', self.peek_next_token()):
            self.current_scope = 'global'
            self.matchID_mult("Identifier")
            if self.current_lexeme == "Universe":
                self.peek_next_token()
            else:
                self.var_name = self.current_lexeme  # assign variable
                # check if the variable is a function prototype name
                if self.var_name in self.prototype_parameter_table:
                    self.prototype_function_exist = True
                scope = 'global'
                self.scope = scope
                self.current_scope = scope  # current scope
                self.declare_variable(self.var_name, self.datatype, self.scope)  # Store the datatype in the table
            #  is it an array declaration?
            if self.peek_next_token() == "{":
                self.match_arr_dec("{")
            #  is it a subfunction?
            elif self.peek_next_token() == "(":
                self.parse_sub_function_ptype()
            #  or assign value/s?
            elif self.peek_next_token() == "=":
                self.match_auto_assign("=")
                #  terminate it
                if self.peek_next_token() == "#":
                    self.match("#")
                #  error: not terminated (multiple path)
                elif self.peek_next_token() != "#" and self.isMultiple and not self.parenthError and not self.arrayError and (
                            self.peek_previous_token() == "SunLiteral"
                            or self.peek_previous_token() == "LuhmanLiteral"
                            or self.peek_previous_token() == "StarsysLiteral"
                            or self.peek_previous_token() == "True"
                            or self.peek_previous_token() == "False"
                            or re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '=', but instead got '{self.peek_next_token()}'")
                #  error: not terminated (values has invalid mathop or no (comma,#) next)
                elif self.peek_next_token() != "#" and not self.isMultiple and not self.parenthError and not self.arrayError and (
                        self.peek_previous_token() == "SunLiteral"
                        or self.peek_previous_token() == "LuhmanLiteral"
                        or self.peek_previous_token() == "StarsysLiteral"
                        or self.peek_previous_token() == "True"
                        or self.peek_previous_token() == "False"
                        or re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '+', '-', '*', '/', '%', '**' but instead got '{self.peek_next_token()}'")
            #  terminate?
            elif self.peek_next_token() == "#":
                self.match("#")
            # error: missing any of the possibilities
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected '=', '#', 'Lcurlbraces' "
                    f", but instead got '{self.peek_next_token()}'")
        #  error: no identifier after the datatype
        else:
            return False

    #  method for parsing boolean var declarations in functions
    def parse_boolean_func(self):
        # assign datatype
        if self.peek_previous_token() == "Sun":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Luhman":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Starsys":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Boolean":
            self.datatype = self.peek_previous_token()

        if re.match(r'Identifier\d*$', self.peek_next_token()):
            self.current_scope = 'function'
            self.matchID_mult("Identifier")
            if self.current_lexeme == "Universe":
                self.peek_next_token()
            else:
                self.var_name = self.current_lexeme  # assign variable
                scope = 'function'
                self.check_variable_redeclaration()
                self.scope = scope # scope
                self.current_scope = scope  # current scope
                self.declare_variable(self.var_name, self.datatype, self.scope)  # Store the datatype in the table
            #  is it an array declaration?
            if self.peek_next_token() == "{":
                self.match_arr_dec("{")
            #  is it a subfunction definition?
            elif self.peek_next_token() == "(":
                self.function_datatype = self.datatype
                self.match_subfunc_statement("(")  # consume '('
            #  or assign value/s?
            elif self.peek_next_token() == "=":
                self.match_auto_assign("=")
                if self.peek_next_token() == "#":
                    self.match("#")
                #  error: not terminated (multiple path)
                elif self.peek_next_token() != "#" and self.isMultiple and not self.parenthError and not self.arrayError and (
                            self.peek_previous_token() == "SunLiteral"
                            or self.peek_previous_token() == "LuhmanLiteral"
                            or self.peek_previous_token() == "StarsysLiteral"
                            or self.peek_previous_token() == "True"
                            or self.peek_previous_token() == "False"
                            or re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '=', but instead got '{self.peek_next_token()}'")
                #  error: not terminated (values has invalid mathop or no (comma,#) next)
                elif self.peek_next_token() != "#" and not self.isMultiple and not self.parenthError and not self.arrayError and (
                        self.peek_previous_token() == "SunLiteral"
                        or self.peek_previous_token() == "LuhmanLiteral"
                        or self.peek_previous_token() == "StarsysLiteral"
                        or self.peek_previous_token() == "True"
                        or self.peek_previous_token() == "False"
                        or re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '+', '-', '*', '/', '%', '**' but instead got '{self.peek_next_token()}'")
            #  terminate?
            elif self.peek_next_token() == "#":
                self.match("#")
            # error: missing any of the possibilities
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', '(', 'Lcurlbraces' "
                    f", but instead got '{self.peek_next_token()}'")
        #  error: no identifier after the datatype
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")

    #  method for parsing boolean var declarations in main
    def parse_boolean_main(self):
        # assign datatype
        if self.peek_previous_token() == "Sun":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Luhman":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Starsys":
            self.datatype = self.peek_previous_token()
        if self.peek_previous_token() == "Boolean":
            self.datatype = self.peek_previous_token()

        if re.match(r'Identifier\d*$', self.peek_next_token()):
            self.current_scope = 'main'
            self.matchID_mult("Identifier")
            self.var_name = self.current_lexeme  # assign variable
            scope = 'main'
            self.scope = scope # scope
            self.current_scope = scope  # current scope
            self.declare_variable(self.var_name, self.datatype, self.scope)  # Store the datatype in the table
            #  is it an array declaration?
            if self.peek_next_token() == "{":
                self.match_arr_dec("{")
            #  or assign value/s?
            elif self.peek_next_token() == "=":
                self.match_auto_assign("=")
                if self.peek_next_token() == "#":
                    self.match("#")
                #  error: not terminated (multiple path)
                elif self.peek_next_token() != "#" and self.isMultiple and not self.arrayError and not self.parenthError and (
                            self.peek_previous_token() == "SunLiteral"
                            or self.peek_previous_token() == "LuhmanLiteral"
                            or self.peek_previous_token() == "StarsysLiteral"
                            or self.peek_previous_token() == "True"
                            or self.peek_previous_token() == "False"
                            or re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '=', but instead got '{self.peek_next_token()}'")
                #  error: not terminated (values has invalid mathop or no (comma,#) next)
                elif self.peek_next_token() != "#" and not self.isMultiple and not self.arrayError and not self.parenthError and (
                        self.peek_previous_token() == "SunLiteral"
                        or self.peek_previous_token() == "LuhmanLiteral"
                        or self.peek_previous_token() == "StarsysLiteral"
                        or self.peek_previous_token() == "True"
                        or self.peek_previous_token() == "False"
                        or re.match(r'Identifier\d*$', self.peek_previous_token())):
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '+', '-', '*', '/', '%', '**' but instead got '{self.peek_next_token()}'")
            #  terminate?
            elif self.peek_next_token() == "#":
                self.match("#")
            # error: missing any of the possibilities
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '=', 'Identifier', 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral' "
                    f", but instead got '{self.peek_next_token()}'")
        #  error: no identifier after the datatype
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")

    # method for parsing void subfunc
    def parse_void_declaration(self):
        if re.match(r'Identifier\d*$', self.peek_next_token()):
            self.matchID_mult("Identifier")

            #  is it an void subfunc prototype?
            if self.peek_next_token() == "(":
                self.parse_sub_function_ptype_void()
            # error: missing any of the possibilities
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected '(' "
                    f", but instead got '{self.peek_next_token()}'")
        #  error: no identifier after the datatype
        else:
            return False

    # method for sub function prototype (void)
    def parse_sub_function_ptype_void(self):
        # SEMANTIC CHECK
        self.prototype_function_datatype = "Void"
        self.prototype_function_name = self.peek_previous_lexeme()
        # Check if the function_name already exists in the parameter_table
        if self.prototype_function_name in self.prototype_parameter_table:
            self.errors.append(
                f"(Line {self.line_number}) | Semantic Error: (Redeclaration Error) Function '{self.prototype_function_name}' is already declared.")
            self.prototype_function_exist = True

        if self.peek_next_token() == "(":
            self.match("(")
            # static
            if self.peek_next_token() == "Static":
                self.match("Static")
                # has parameter path
                if (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                        or self.peek_next_token() == "Boolean" or self.peek_next_token() == "Starsys"):
                    self.match(Resources.Datatype2)
                    # SEMANTIC CHECK
                    self.prototype_parameter_datatype = self.peek_previous_lexeme()

                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.match("Identifier")
                        # SEMANTIC CHECK
                        self.prototype_function_parameter_var = self.peek_previous_lexeme()
                        self.prototype_parameter_var_name = self.peek_previous_lexeme()
                        if not self.prototype_function_exist:
                            self.declare_prototype_parameter_variable(self.prototype_function_datatype,
                                                                      self.prototype_function_name,
                                                                      self.prototype_parameter_datatype,
                                                                      self.prototype_parameter_var_name)

                        #  parameter is an array index path (static)
                        if self.peek_next_token() == "{":
                            self.match("{")  # consume
                            #  array index assign path
                            if (re.match(r'Identifier\d*$', self.peek_next_token())
                                    or self.peek_next_token() == "SunLiteral"):
                                self.match(Resources.Value3)  # consume the values
                                #  size expression
                                if (
                                        self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                                    #  close it with "}" if size is fulfilled
                                    if self.peek_next_token() == "}":
                                        self.match("}")
                                        #  check: if closed, single 1D array
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                # error: not terminated
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#'
                                            else:

                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult_prototype(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  terminate it
                                                    if self.peek_next_token() == "#":
                                                        self.match("#")
                                                    # error: not terminated
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '#'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        # or add another size to become 2D array
                                        elif self.peek_next_token() == "{":
                                            self.match_arrID2D_index_parameter("{")
                                            #  check: if closed, single 2D array
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  terminate it
                                                    if self.peek_next_token() == "#":
                                                        self.match("#")
                                                    # error: not terminated
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '#'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult_prototype(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  terminate it
                                                    if self.peek_next_token() == "#":
                                                        self.match("#")
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  terminate it
                                                        if self.peek_next_token() == "#":
                                                            self.match("#")
                                                        # error: not terminated
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by '#'
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                    #  not closed with '}'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                #  size is single value
                                elif self.peek_next_token() == "}":
                                    self.match("}")
                                    #  check: if closed, single 1D array (size is single value)
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            # error: not terminated
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult_prototype(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                # error: not terminated
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  check: if closed, single 1D array (size is single value)
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                # error: not terminated
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult_prototype(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  terminate it
                                                    if self.peek_next_token() == "#":
                                                        self.match("#")
                                                    # error: not terminated
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '#'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by an equal
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  size value is not followed by any of the following (# and Rcurl)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                            #  empty size, proceed to close it with '}'
                            elif self.peek_next_token() == "}":
                                self.match("}")
                                #  check: if closed, single 1D array (size is empty)
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        # error: not terminated
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '#'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult_prototype(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            # error: not terminated
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  check: if closed, single 2D array
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            # error: not terminated
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult_prototype(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                # error: not terminated
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by an equal
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                        #  equals, assign value to the parameter path (static)
                        elif self.peek_next_token() == "=":
                            self.isPrototype = True
                            self.match_param_assign("=")
                            #  close with ')' after assigning value/s
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    # error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '#'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  check: if closed, single id no value
                        elif self.peek_next_token() == ")":
                            self.match(")")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  has gotolerate
                            elif self.peek_next_token() == "Gotolerate":
                                self.match("Gotolerate")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                # error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by '#'
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                        #  single id is followed by a comma
                        elif self.peek_next_token() == ",":
                            self.match_param_assign_mult_prototype(",")
                            #  close with ')' after assigning value/s
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    # error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '#'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                        elif self.peek_next_token() == "=":
                            self.match_param_assign("=")
                            #  close with ')' after assigning value/s
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  must be followed by '#'
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  check: if closed, single id no value
                        elif self.peek_next_token() == ")":
                            self.match(")")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  has gotolerate
                            elif self.peek_next_token() == "Gotolerate":
                                self.match("Gotolerate")
                                #  must be followed by '#'
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                        #  single id is followed by a comma
                        elif self.peek_next_token() == ",":
                            self.match_param_assign_mult_prototype(",")
                            #  close with ')' after assigning value/s
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  must be followed by '#'
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                        #  unexpected end: no ')' to close, or comma to followed by, or (=) to assign values
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                    #  error: no identifier after the datatype
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                #  no datatype after static
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Sun', 'Luhman', 'Boolean', 'Starsys', but instead got '{self.peek_next_token()}'")
            # has parameter path (non static)
            elif (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                  or self.peek_next_token() == "Boolean" or self.peek_next_token() == "Starsys"):
                self.match(Resources.Datatype2)
                # SEMANTIC CHECK
                self.prototype_parameter_datatype = self.peek_previous_token()

                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.match("Identifier")
                    # SEMANTIC CHECK
                    self.prototype_function_parameter_var = self.peek_previous_lexeme()
                    self.prototype_parameter_var_name = self.peek_previous_lexeme()
                    if not self.prototype_function_exist:
                        self.declare_prototype_parameter_variable(self.prototype_function_datatype, self.prototype_function_name,
                                                                  self.prototype_parameter_datatype,
                                                                  self.prototype_parameter_var_name)
                    #  parameter is an array index path
                    if self.peek_next_token() == "{":
                        self.match("{")  # consume
                        #  array index assign path
                        if (re.match(r'Identifier\d*$', self.peek_next_token())
                                or self.peek_next_token() == "SunLiteral"):
                            self.match(Resources.Value3)  # consume the values
                            #  size expression
                            if (
                                    self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                    or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                self.match_mathop3(Resources.mathop1)  # size is a math expr
                                #  close it with "}" if size is fulfilled
                                if self.peek_next_token() == "}":
                                    self.match("}")
                                    #  check: if closed, single 1D array
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            # error: not terminated
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult_prototype(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                # error: not terminated
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  check: if closed, single 2D array
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                # error: not terminated
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult_prototype(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  terminate it
                                                    if self.peek_next_token() == "#":
                                                        self.match("#")
                                                    # error: not terminated
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '#'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  not closed with '}'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                            #  size is single value
                            elif self.peek_next_token() == "}":
                                self.match("}")
                                #  check: if closed, single 1D array (size is single value)
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        # error: not terminated
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '#'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult_prototype(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            # error: not terminated
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  check: if closed, single 1D array (size is single value)
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            # error: not terminated
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult_prototype(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                # error: not terminated
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by an equal
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            #  size value is not followed by any of the following (# and Rcurl)
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                        #  empty size, proceed to close it with '}'
                        elif self.peek_next_token() == "}":
                            self.match("}")
                            #  check: if closed, single 1D array (size is empty)
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    # error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '#'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            #  single id is followed by a comma, (Static Sun a{1},.....)
                            elif self.peek_next_token() == ",":
                                self.match_param_assign_mult_prototype(",")
                                #  close with ')' after assigning value/s
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        # error: not terminated
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '#'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            # or add another size to become 2D array
                            elif self.peek_next_token() == "{":
                                self.match_arrID2D_index_parameter("{")
                                #  check: if closed, single 2D array
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        # error: not terminated
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '#'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult_prototype(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            # error: not terminated
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by an equal
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by an equal
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                    elif self.peek_next_token() == "=":
                        self.isPrototype = True
                        self.match_param_assign("=")
                        #  close with ')' after assigning value/s
                        if self.peek_next_token() == ")":
                            self.match(")")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  has gotolerate
                            elif self.peek_next_token() == "Gotolerate":
                                self.match("Gotolerate")
                                #  must be followed by '#'
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                        #  error: not closed
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                    #  check: if closed, single id no value
                    elif self.peek_next_token() == ")":
                        self.match(")")
                        #  terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  has gotolerate
                        elif self.peek_next_token() == "Gotolerate":
                            self.match("Gotolerate")
                            #  must be followed by '#'
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                        #  error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                    #  single id is followed by a comma
                    elif self.peek_next_token() == ",":
                        self.match_param_assign_mult_prototype(",")
                        #  close with ')' after assigning value/s
                        if self.peek_next_token() == ")":
                            self.match(")")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  has gotolerate
                            elif self.peek_next_token() == "Gotolerate":
                                self.match("Gotolerate")
                                #  must be followed by '#'
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                    #  unexpected end: no ')' to close, or comma to followed by, or (=) to assign values
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                #  error: no identifier after the datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            #  no parameter
            elif self.peek_next_token() == ")":
                self.match(")")
                # SEMANTIC CHECK
                self.prototype_parameter_datatype = "null"
                # SEMANTIC CHECK
                self.prototype_function_parameter_var = "null"
                self.prototype_parameter_var_name = "null"
                if not self.prototype_function_exist:
                    self.declare_prototype_parameter_variable(self.prototype_function_datatype,
                                                              self.prototype_function_name,
                                                              self.prototype_parameter_datatype,
                                                              self.prototype_parameter_var_name)
                if self.peek_next_token() == "[":
                    self.parse_main_function()  # it is a function main??
                elif self.peek_next_token() == "#":
                    self.match("#")
                #  has gotolerate
                elif self.peek_next_token() == "Gotolerate":
                    self.match("Gotolerate")
                    #  must be followed by '#'
                    if self.peek_next_token() == "#":
                        self.match("#")
                    #  error: not terminated
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")

    #  method for main function
    def parse_main_function(self):
        if self.peek_next_token() == "[":
            self.parse_func_def() # change this
            if self.peek_next_token() == "]":
                self.match("]")
                self.function_is_defined = True
                #  no subfunction definition or class definition below? proceed to Disintegrate required in syntax
                if self.peek_next_token() == "Disintegrate":
                    self.disintegrate_exist = True
                    self.match("Disintegrate")
                # has subfunction/s
                elif (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                      or self.peek_next_token() == "Starsys" or self.peek_next_token() == "Boolean"):
                    self.match_subfunc(Resources.Datatype2)  # consume datatypes
                    #  Disintegrate
                    if self.peek_next_token() == "Disintegrate":
                        self.disintegrate_exist = True
                        self.match("Disintegrate")
                    #  error: no Disintegrate
                    else:
                        return False
                # has void
                elif self.peek_next_token() == "Void":
                    self.match_voidfunc("Void")  # consume datatypes
                    #  Disintegrate
                    if self.peek_next_token() == "Disintegrate":
                        self.disintegrate_exist = True
                        self.match("Disintegrate")
                    #  error: no Disintegrate
                    else:
                        return False
                # has Class
                elif self.peek_next_token() == "Class":
                    self.match_class("Class")
                    #  Disintegrate
                    if self.peek_next_token() == "Disintegrate":
                        self.disintegrate_exist = True
                        self.match("Disintegrate")
                    #  error: no Disintegrate
                    else:
                        return False
                #  no Disintegrate
                elif not self.notMainError:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Disintegrate', 'Class', 'Void', 'Sun', 'Luhman',"
                                       f" 'Starsys', 'Boolean', but instead got '{self.peek_next_token()}'")
            else:
                return False
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")

    #  class method
    def match_class(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "Class":
            #  must be followed by an identifier
            if re.match(r'Identifier\d*$', self.peek_next_token()):
                self.match("Identifier")

                # SEMANTIC CHECK
                self.class_scope = "global"
                self.class_current_scope = self.class_scope
                self.class_name = self.peek_previous_lexeme()
                self.declare_class(self.class_name, self.class_scope)

                #  access specifier path derived: Class MyClass : Private BaseClass
                if self.peek_next_token() == ":":
                    self.match(":")  # consume ':'
                    #  must be followed by any of these access specifiers
                    if (self.peek_next_token() == "Public" or self.peek_next_token() == "Private"
                            or self.peek_next_token() == "Protected"):
                        self.match(Resources.access_specifier)  # consume access specifiers
                        #  must be followed by the id
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.match("Identifier")
                            # follow with '['
                            if self.peek_next_token() == "[":
                                self.match("[")
                                self.parse_class_body() #  body
                                #  terminate the class
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                    if self.peek_next_token() == "Disintegrate":
                                        return True
                                    # has subfunction next
                                    elif (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                                          or self.peek_next_token() == "Starsys" or self.peek_next_token() == "Boolean"):
                                        self.match_subfunc(Resources.Datatype2)  # consume datatypes
                                    #  void function next
                                    elif self.peek_next_token() == "Void":
                                        self.match_voidfunc("Void")
                                    #  has class next
                                    elif self.peek_next_token() == "Class":
                                        self.match_class("Class")
                                #  error: not terminated
                                elif self.peek_next_token() != "#" and self.peek_previous_token() == "]":
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by '['
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by an identifier
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  error: not followed by access specifiers
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Public', 'Private', 'Protected', but instead got '{self.peek_next_token()}'")
                # follow with '[', no derived
                elif self.peek_next_token() == "[":
                    self.match("[")
                    self.parse_class_body()  # body
                    #  terminate the class
                    if self.peek_next_token() == "#":
                        self.match("#")
                        if self.peek_next_token() == "Disintegrate":
                            return True
                        # has subfunction next
                        elif (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                                or self.peek_next_token() == "Starsys" or self.peek_next_token() == "Boolean"):
                            self.match_subfunc(Resources.Datatype2)  # consume datatypes
                        #  void function next
                        elif self.peek_next_token() == "Void":
                            self.match_voidfunc("Void")
                        #  has class next
                        elif self.peek_next_token() == "Class":
                            self.match_class("Class")
                    #  error: not terminated
                    elif self.peek_next_token() != "#" and self.peek_previous_token() == "]":
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                #  error: not followed by any expected next
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected ':', '[', but instead got '{self.peek_next_token()}'")
            #  error: no identifier
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")

    #  class method (inside functions, main, struct, global)
    def match_class_stmnt(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "Class":
            #  must be followed by an identifier
            if re.match(r'Identifier\d*$', self.peek_next_token()):
                self.match("Identifier")
                # SEMANTIC CHECK
                self.class_name = self.peek_previous_lexeme()
                self.declare_class(self.class_name, self.class_scope)

                #  access specifier path derived: Class MyClass : Private BaseClass
                if self.peek_next_token() == ":":
                    self.match(":")  # consume ':'
                    #  must be followed by any of these access specifiers
                    if (self.peek_next_token() == "Public" or self.peek_next_token() == "Private"
                            or self.peek_next_token() == "Protected"):
                        self.match(Resources.access_specifier)  # consume access specifiers
                        #  must be followed by the id
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.match("Identifier")
                            # follow with '['
                            if self.peek_next_token() == "[":
                                self.match("[")
                                self.parse_class_body() #  body
                                #  terminate the class
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not terminated
                                elif self.peek_next_token() != "#" and self.peek_previous_token() == "]":
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by '['
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by an identifier
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  error: not followed by access specifiers
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Public', 'Private', 'Protected', but instead got '{self.peek_next_token()}'")
                # follow with '[', no derived
                elif self.peek_next_token() == "[":
                    self.match("[")
                    self.parse_class_body()  # body
                    #  terminate the class
                    if self.peek_next_token() == "#":
                        self.match("#")
                    #  error: not terminated
                    elif self.peek_next_token() != "#" and self.peek_previous_token() == "]":
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                #  class instance path
                elif re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.match("Identifier")
                    #  terminate
                    if self.peek_next_token() == "#":
                        self.match("#")
                    #  multiple instance path
                    elif self.peek_next_token() == ",":
                        self.match(",")
                        # assign id
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.matchID_mult("Identifier")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                        #  error: no id next
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  assign values to it? (constructor)
                    elif self.peek_next_token() == "(":
                        if self.peek_next_token() == "(":
                            self.match("(")
                            #  assign values
                            if (self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                                    or self.peek_next_token() == "StarsysLiteral" or re.match(r'Identifier\d*$',
                                                                                              self.peek_next_token())
                                    or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                                self.matchValue_mult(Resources.Value1)
                                # close it
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error: expected ')'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                            #  not followed by values (close it)
                            elif self.peek_next_token() == ")":
                                self.match(")")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            # error: not followed by any values
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral', 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  error: not terminated, or no following multiple instances
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', ',', but instead got '{self.peek_next_token()}'")
                #  global scope res path
                elif self.peek_next_token() == "::":
                    self.match("::")
                    # must be followed by the id
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.match("Identifier")
                        #  must be followed by another identifier
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.match("Identifier")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by an identifier
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  error: not followed by an identifier
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                #  error: not followed by any expected next
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected ':', '[', 'Identifier', '::', but instead got '{self.peek_next_token()}'")
            #  error: no identifier
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")

    #  struct method
    def match_struct(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "ISS":
            #  must be followed by an identifier
            if re.match(r'Identifier\d*$', self.peek_next_token()):
                self.match("Identifier")
                # SEMANTIC CHECK
                self.struct_name = self.peek_previous_lexeme()
                self.declare_struct(self.struct_name, self.struct_scope)

                #  access specifier path derived: ISS MyStruct : Private BaseStruct
                if self.peek_next_token() == ":":
                    self.match(":")  # consume ':'
                    #  must be followed by any of these access specifiers
                    if (self.peek_next_token() == "Public" or self.peek_next_token() == "Private"
                            or self.peek_next_token() == "Protected"):
                        self.match(Resources.access_specifier)  # consume access specifiers
                        #  must be followed by the id
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.match("Identifier")
                            # follow with '['
                            if self.peek_next_token() == "[":
                                self.match("[")
                                self.parse_struct_body() #  body
                                #  terminate the iss
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not terminated
                                elif self.peek_next_token() != "#" and self.peek_previous_token() == "]":
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Identifier' but instead got '{self.peek_next_token()}'")
                            #  error: not followed by '['
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by an identifier
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  error: not followed by access specifiers
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Public', 'Private', 'Protected', but instead got '{self.peek_next_token()}'")
                # follow with '[', no derived
                elif self.peek_next_token() == "[":
                    self.match("[")
                    self.parse_struct_body()  # body
                    #  terminate the struct
                    if self.peek_next_token() == "#":
                        self.match("#")
                    #  error: not terminated
                    elif self.peek_next_token() != "#" and self.peek_previous_token() == "]":
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Identifier' but instead got '{self.peek_next_token()}'")
                #  struct instance path
                elif re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.match("Identifier")
                    #  terminate
                    if self.peek_next_token() == "#":
                        self.match("#")
                    #  multiple instance path
                    elif self.peek_next_token() == ",":
                        self.match(",")
                        # assign id
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.matchID_mult("Identifier")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                        #  error: no id next
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  assign values to it? (constructor)
                    elif self.peek_next_token() == "(":
                        if self.peek_next_token() == "(":
                            self.match("(")
                            #  assign values
                            if (self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                                    or self.peek_next_token() == "StarsysLiteral" or re.match(r'Identifier\d*$',
                                                                                              self.peek_next_token())
                                    or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                                self.matchValue_mult(Resources.Value1)
                                # close it
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error: expected ')'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                            #  not followed by values (close it)
                            elif self.peek_next_token() == ")":
                                self.match(")")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            # error: not followed by any values
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral', 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  error: not terminated, or no following multiple instances
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '(', but instead got '{self.peek_next_token()}'")
                #  global scope res path
                elif self.peek_next_token() == "::":
                    self.match("::")
                    # must be followed by the id
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.match("Identifier")
                        #  must be followed by another identifier
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.match("Identifier")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by an identifier
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  error: not followed by an identifier
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")

                #  error: not followed by any expected next
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected ':', '[', 'Identifier', '::', but instead got '{self.peek_next_token()}'")
            #  error: no identifier
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")

    # for struct and class
    def match_assignment(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()
        if re.match(r'Identifier\d*$', expected_token):
            #  constructor path
            if self.peek_next_token() == "(":
                self.match("(")
                if self.peek_next_token() == "Static":
                    self.match("Static")
                    # has parameter path
                    if (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                            or self.peek_next_token() == "Boolean" or self.peek_next_token() == "Starsys"):
                        self.match(Resources.Datatype2)
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.match("Identifier")
                            #  parameter is an array index path (static)
                            if self.peek_next_token() == "{":
                                self.match("{")  # consume
                                #  array index assign path
                                if (re.match(r'Identifier\d*$', self.peek_next_token())
                                        or self.peek_next_token() == "SunLiteral"):
                                    self.match(Resources.Value3)  # consume the values
                                    #  size expression
                                    if (
                                            self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                            or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                        self.match_mathop3(Resources.mathop1)  # size is a math expr
                                        #  close it with "}" if size is fulfilled
                                        if self.peek_next_token() == "}":
                                            self.match("}")
                                            #  check: if closed, single 1D array
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_constructor_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_constructor_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            # or add another size to become 2D array
                                            elif self.peek_next_token() == "{":
                                                self.match_arrID2D_index_parameter("{")
                                                #  check: if closed, single 2D array
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  followed it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_constructor_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                                elif self.peek_next_token() == ",":
                                                    self.match_param_assign_mult(",")
                                                    #  close with ')' after assigning value/s
                                                    if self.peek_next_token() == ")":
                                                        self.match(")")
                                                        #  followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_constructor_definition_statement()  # body
                                                            #  close it
                                                            if self.peek_next_token() == "]":
                                                                self.match("]")
                                                            #  error: not closed
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}''")
                                        #  not closed with '}'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                    #  size is single value
                                    elif self.peek_next_token() == "}":
                                        self.match("}")
                                        #  check: if closed, single 1D array (size is single value)
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_constructor_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_constructor_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        # or add another size to become 2D array
                                        elif self.peek_next_token() == "{":
                                            self.match_arrID2D_index_parameter("{")
                                            #  check: if closed, single 1D array (size is single value)
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_constructor_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_constructor_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by an equal
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by an equal
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                    #  size value is not followed by any of the following (# and Rcurl)
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                                #  empty size, proceed to close it with '}'
                                elif self.peek_next_token() == "}":
                                    self.match("}")
                                    #  check: if closed, single 1D array (size is empty)
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '['
                                        if self.peek_next_token() == "[":
                                            self.parse_constructor_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_constructor_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  check: if closed, single 2D array
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_constructor_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_constructor_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by an equal
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                            elif self.peek_next_token() == "=":
                                self.match_param_assign("=")
                                #  close with ')' after assigning value/s
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  follow it with '['
                                    if self.peek_next_token() == "[":
                                        self.parse_constructor_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                #  error: not closed
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                            #  check: if closed, single id no value
                            elif self.peek_next_token() == ")":
                                self.match(")")
                                #  followed it with '['
                                if self.peek_next_token() == "[":
                                    self.parse_constructor_definition_statement()  # body
                                    #  close it
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                    #  error: not closed
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '['
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                            #  single id is followed by a comma
                            elif self.peek_next_token() == ",":
                                self.match_param_assign_mult(",")
                                #  close with ')' after assigning value/s
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed by '['
                                    if self.peek_next_token() == "[":
                                        self.parse_constructor_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                            #  unexpected end: no ')' to close, or comma to followed by, or (=) to assign values
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                        #  error: no identifier after the datatype
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  no datatype after static
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Sun', 'Luhman', 'Boolean', 'Starsys', but instead got '{self.peek_next_token()}'")
                # has parameter path
                elif (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                      or self.peek_next_token() == "Boolean" or self.peek_next_token() == "Starsys"):
                    self.match(Resources.Datatype2)
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.match("Identifier")
                        #  parameter is an array index path (static)
                        if self.peek_next_token() == "{":
                            self.match("{")  # consume
                            #  array index assign path
                            if (re.match(r'Identifier\d*$', self.peek_next_token())
                                    or self.peek_next_token() == "SunLiteral"):
                                self.match(Resources.Value3)  # consume the values
                                #  size expression
                                if (
                                        self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                                    #  close it with "}" if size is fulfilled
                                    if self.peek_next_token() == "}":
                                        self.match("}")
                                        #  check: if closed, single 1D array
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_constructor_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_constructor_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        # or add another size to become 2D array
                                        elif self.peek_next_token() == "{":
                                            self.match_arrID2D_index_parameter("{")
                                            #  check: if closed, single 2D array
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_constructor_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_constructor_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                    #  not closed with '}'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                #  size is single value
                                elif self.peek_next_token() == "}":
                                    self.match("}")
                                    #  check: if closed, single 1D array (size is single value)
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '['
                                        if self.peek_next_token() == "[":
                                            self.parse_constructor_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_constructor_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  check: if closed, single 1D array (size is single value)
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_constructor_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_constructor_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by an equal
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  size value is not followed by any of the following (# and Rcurl)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                            #  empty size, proceed to close it with '}'
                            elif self.peek_next_token() == "}":
                                self.match("}")
                                #  check: if closed, single 1D array (size is empty)
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed it with '['
                                    if self.peek_next_token() == "[":
                                        self.parse_constructor_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_constructor_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  check: if closed, single 2D array
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '['
                                        if self.peek_next_token() == "[":
                                            self.parse_constructor_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_constructor_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by an equal
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                        elif self.peek_next_token() == "=":
                            self.match_param_assign("=")
                            #  close with ')' after assigning value/s
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  follow '['
                                if self.peek_next_token() == "[":
                                    self.parse_constructor_definition_statement()  # body
                                    #  close it
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                    #  error: not closed
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '['
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  check: if closed, single id no value
                        elif self.peek_next_token() == ")":
                            self.match(")")
                            #  followed by '['
                            if self.peek_next_token() == "[":
                                self.parse_constructor_definition_statement()  # body
                                #  close it
                                if self.peek_next_token() == "]":
                                    self.match("]")
                                #  error: not closed
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by '['
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                        #  single id is followed by a comma
                        elif self.peek_next_token() == ",":
                            self.match_param_assign_mult(",")
                            #  close with ')' after assigning value/s
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  followed by '['
                                if self.peek_next_token() == "[":
                                    self.parse_constructor_definition_statement()  # body
                                    #  close it
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                    #  error: not closed
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '['
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                        #  unexpected end: no ')' to close, or comma to followed by, or (=) to assign values
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                    #  error: no identifier after the datatype
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                #  no parameter
                elif self.peek_next_token() == ")":
                    self.match(")")
                    #  must be followed by '['
                    if self.peek_next_token() == "[":
                        self.parse_constructor_definition_statement()  # body
                        #  close it
                        if self.peek_next_token() == "]":
                            self.match("]")
                        #  error: not closed
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ']', but instead got '{self.peek_next_token()}'")
                    #  function call (no values)
                    #  terminate it
                    elif self.peek_next_token() == "#":
                        self.match("#")
                    #  error: not followed by '['
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '[', '#', but instead got '{self.peek_next_token()}'")
                #  function call path (has values)
                elif (self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                        or self.peek_next_token() == "StarsysLiteral" or re.match(r'Identifier\d*$',
                        self.peek_next_token()) or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                    self.matchValue_mult(Resources.Value1)
                    # close it
                    if self.peek_next_token() == ")":
                        self.match(")")
                        #  terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                    #  error: expected ')'
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral', 'Identifier', 'True', 'False', but instead got '{self.peek_next_token()}'")
            #  assignment path
            elif self.peek_next_token() == "=":
                #  SEMANTIC CHECK
                self.function_parameter_variable()  # is it from a parameter
                if self.peek_previous_lexeme() in self.array_variable_table and not self.isParameterVariable:
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Assignment Mismatch) Variable '{self.peek_previous_lexeme()}' is declared as an array.")
                elif self.peek_previous_lexeme() not in self.symbol_table and not self.isParameterVariable and self.peek_previous_lexeme() not in [
                    entry['var_name'] for entry in self.fore_table.values()]:
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Undeclared Variable) Variable '{self.peek_previous_lexeme()}' is not declared.")
                elif not self.isParameterVariable:
                    self.check_variable_usage()
                    self.assignment_variable = self.peek_previous_lexeme()  # store variable
                elif self.isParameterVariable:
                    self.function_assignment_variable = self.peek_previous_lexeme()  # store variable

                self.match("=")  # consume =
                #  must be followed by these values
                if (self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True"
                        or self.peek_next_token() == "False" ):
                    #  SEMANTIC CHECK
                    if self.isParameterVariable:
                        self.check_function_assignment_type()
                    else:
                        self.check_assignment_type()
                    self.match(Resources.Value6) # consume values
                    # must be terminated
                    if self.peek_next_token() == "#":
                        self.match("#")
                    #  error: not terminated
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                #  numbers, id, is the value
                elif (self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                        or re.match(r'Identifier\d*$',self.peek_next_token())):
                    #  SEMANTIC CHECK
                    if self.isParameterVariable:
                        self.check_function_assignment_type()
                    else:
                        self.check_assignment_type()
                    self.match(Resources.Value2) # consume values
                    # terminate it?
                    if self.peek_next_token() == "#":
                        self.match("#")
                    #  assign subfunction val path
                    elif re.match(r'Identifier\d*$',self.peek_previous_token()) and self.peek_next_token() == "(":
                        self.match("(")
                        #  followed by these values
                        if (self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                                or self.peek_next_token() == "StarsysLiteral" or re.match(r'Identifier\d*$',
                                self.peek_next_token()) or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                            self.matchValue_mult(Resources.Value1)
                            # close it
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: expected ')'
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  not followed by any values (empty)
                        elif self.peek_next_token() == ")":
                            self.match(")")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                        #  error: no expected next
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral', 'Idnetifier',"
                                f"'True', 'False', but instead got '{self.peek_next_token()}'")
                    #  add it?
                    elif self.peek_next_token() == "+":
                        self.match_mathop2("+")
                        # terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        elif (
                                self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                or re.match(r'Identifier\d*$', self.peek_previous_token())
                                and (self.peek_next_token() != "#" or self.peek_next_token() != "+"
                                     or self.peek_next_token() != "-" or self.peek_next_token() != "*"
                                     or self.peek_next_token() != "/" or self.peek_next_token() != "%" or self.peek_next_token() != "**")):
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%' but instead got '{self.peek_next_token()}'")
                    #  subtract it?
                    elif self.peek_next_token() == "-":
                        self.match_mathop2("-")
                        # terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        elif (
                                self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                or re.match(r'Identifier\d*$', self.peek_previous_token())
                                and (self.peek_next_token() != "#" or self.peek_next_token() != "+"
                                     or self.peek_next_token() != "-" or self.peek_next_token() != "*"
                                     or self.peek_next_token() != "/" or self.peek_next_token() != "%" or self.peek_next_token() != "**")):
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  multiply it?
                    elif self.peek_next_token() == "*":
                        self.match_mathop2("*")
                        # terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        elif (
                                self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                or re.match(r'Identifier\d*$', self.peek_previous_token())
                                and (self.peek_next_token() != "#" or self.peek_next_token() != "+"
                                     or self.peek_next_token() != "-" or self.peek_next_token() != "*"
                                     or self.peek_next_token() != "/" or self.peek_next_token() != "%" or self.peek_next_token() != "**")):
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  divide it?
                    elif self.peek_next_token() == "/":
                        self.match_mathop2("/")
                        # terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        elif (
                                self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                or re.match(r'Identifier\d*$', self.peek_previous_token())
                                and (self.peek_next_token() != "#" or self.peek_next_token() != "+"
                                     or self.peek_next_token() != "-" or self.peek_next_token() != "*"
                                     or self.peek_next_token() != "/" or self.peek_next_token() != "%" or self.peek_next_token() != "**")):
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  modulo it?
                    elif self.peek_next_token() == "%":
                        self.match_mathop2("%")
                        # terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        elif (
                                self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                or re.match(r'Identifier\d*$', self.peek_previous_token())
                                and (self.peek_next_token() != "#" or self.peek_next_token() != "+"
                                     or self.peek_next_token() != "-" or self.peek_next_token() != "*"
                                     or self.peek_next_token() != "/" or self.peek_next_token() != "%" or self.peek_next_token() != "**")):
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  exponentiate it?
                    elif self.peek_next_token() == "**":
                        self.match_exponent2("**")
                        # terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        elif (
                                self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                or re.match(r'Identifier\d*$', self.peek_previous_token())
                                and (self.peek_next_token() != "#" or self.peek_next_token() != "+"
                                     or self.peek_next_token() != "-" or self.peek_next_token() != "*"
                                     or self.peek_next_token() != "/" or self.peek_next_token() != "%" or self.peek_next_token() != "**")):
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  error: not terminated
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '(', '#', '+', '-', '*', '/', '%', '**', but instead got '{self.peek_next_token()}'")
                #  error: not followed by any of the values
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral'"
                                       f" , 'Identifier', 'True', 'False', but instead got '{self.peek_next_token()}'")
            #  access module/s, function path
            elif self.peek_next_token() == ".":
                self.instance_path(".")  # >>>>call method
            #  assign value to an array index path
            elif self.peek_next_token() == "{":
                #  SEMANTIC CHECK
                if self.peek_previous_lexeme() in self.symbol_table and self.peek_previous_lexeme() not in self.array_variable_table and not self.isParameterVariable:
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Assignment Mismatch) Variable '{self.peek_previous_lexeme()}' is not declared as an array.")
                elif self.peek_previous_lexeme() not in self.array_variable_table:
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Undeclared Array Variable) Array Variable '{self.peek_previous_lexeme()}' is not declared.")
                else:
                    self.check_variable_usage()
                self.array_index_assign("{")
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '(', '=', '.', but instead got '{self.peek_next_token()}'")

    #  for main function, functions, if-else, loops, switch
    def match_assignment1(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()
        if re.match(r'Identifier\d*$', expected_token):
            #  call function direct path
            if self.peek_next_token() == "(":
                self.match("(")
                #  has values inside?
                if (self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                        or self.peek_next_token() == "StarsysLiteral"
                        or re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "True"
                        or self.peek_next_token() == "False"):
                    self.matchValue_mult(Resources.Value1)
                    # close it
                    if self.peek_next_token() == ")":
                        self.match(")")
                        #  terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                    #  error: expected ')'
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                #  no values inside
                elif self.peek_next_token() == ")":
                    self.match(")")
                    #  terminate it
                    if self.peek_next_token() == "#":
                        self.match("#")
                    #  error: not terminated
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                #  not followed by ')' to close
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected ')', 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral', 'True', 'False', 'Identifier' but instead got '{self.peek_next_token()}'")
            #  assignment path
            elif self.peek_next_token() == "=":
                #  SEMANTIC CHECK
                self.function_parameter_variable() # is it from a parameter
                if self.peek_previous_lexeme() in self.array_variable_table and not self.isParameterVariable:
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Assignment Mismatch) Variable '{self.peek_previous_lexeme()}' is declared as an array.")
                elif self.peek_previous_lexeme() not in self.symbol_table and not self.isParameterVariable and self.peek_previous_lexeme() not in [entry['var_name'] for entry in self.fore_table.values()]:
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Undeclared Variable) Variable '{self.peek_previous_lexeme()}' is not declared.")
                elif not self.isParameterVariable:
                    self.check_variable_usage()
                    self.assignment_variable = self.peek_previous_lexeme() # store variable
                elif self.isParameterVariable:
                    self.function_assignment_variable = self.peek_previous_lexeme()  # store variable

                self.match("=")
                if self.peek_next_token() == "(":
                    self.match_parenth("(")
                    if self.peek_previous_token() == ")":
                        #  terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '+', '-', '*', '/', '%' but instead got '{self.peek_next_token()}'")
                    elif (self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                            or re.match(r'Identifier\d*$', self.peek_previous_token())):
                        #  terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', ',', '+', '-', '*', '/', '%' but instead got '{self.peek_next_token()}'")
                    else:
                        self.parenthError = True
                        return False
                #  must be followed by these values
                elif (self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True"
                        or self.peek_next_token() == "False" ):
                    #  SEMANTIC CHECK
                    if self.isParameterVariable:
                        self.check_function_assignment_type()
                    else:
                        self.check_assignment_type()
                    self.match(Resources.Value6) # consume values
                    # must be terminated
                    if self.peek_next_token() == "#":
                        self.match("#")
                    #  error: not terminated
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                #  numbers, id, is the value
                elif (self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                        or re.match(r'Identifier\d*$',self.peek_next_token())):
                    #  SEMANTIC CHECK
                    if self.isParameterVariable:
                        self.check_function_assignment_type()
                    else:
                        self.check_assignment_type()
                    self.match(Resources.Value2) # consume values
                    # terminate it?
                    if self.peek_next_token() == "#":
                        self.match("#")
                    #  assign subfunction val path
                    elif re.match(r'Identifier\d*$',self.peek_previous_token()) and self.peek_next_token() == "(":
                        self.match("(")
                        #  followed by these values
                        if (self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                                or self.peek_next_token() == "StarsysLiteral" or re.match(r'Identifier\d*$',
                                self.peek_next_token()) or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                            self.matchValue_mult(Resources.Value1)
                            # close it
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: expected ')'
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  not followed by any values (empty)
                        elif self.peek_next_token() == ")":
                            self.match(")")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                        #  error: no expected next
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral', 'Idnetifier',"
                                f"'True', 'False', but instead got '{self.peek_next_token()}'")
                    #  add it?
                    elif self.peek_next_token() == "+":
                        self.match_mathop2("+")
                        # terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        elif (self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                              or re.match(r'Identifier\d*$', self.peek_previous_token())
                              and (self.peek_next_token() != "#" or self.peek_next_token() != "+"
                                   or self.peek_next_token() != "-" or self.peek_next_token() != "*"
                                   or self.peek_next_token() != "/" or self.peek_next_token() != "%" or self.peek_next_token() != "**")):
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%' but instead got '{self.peek_next_token()}'")
                    #  subtract it?
                    elif self.peek_next_token() == "-":
                        self.match_mathop2("-")
                        # terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        elif (
                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                        and (self.peek_next_token() != "#" or self.peek_next_token() != "+"
                                             or self.peek_next_token() != "-" or self.peek_next_token() != "*"
                                             or self.peek_next_token() != "/" or self.peek_next_token() != "%" or self.peek_next_token() != "**")):
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  multiply it?
                    elif self.peek_next_token() == "*":
                        self.match_mathop2("*")
                        # terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        elif (
                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                        and (self.peek_next_token() != "#" or self.peek_next_token() != "+"
                                             or self.peek_next_token() != "-" or self.peek_next_token() != "*"
                                             or self.peek_next_token() != "/" or self.peek_next_token() != "%" or self.peek_next_token() != "**")):
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  divide it?
                    elif self.peek_next_token() == "/":
                        self.match_mathop2("/")
                        # terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        elif (
                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                        and (self.peek_next_token() != "#" or self.peek_next_token() != "+"
                                             or self.peek_next_token() != "-" or self.peek_next_token() != "*"
                                             or self.peek_next_token() != "/" or self.peek_next_token() != "%" or self.peek_next_token() != "**")):
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  modulo it?
                    elif self.peek_next_token() == "%":
                        self.match_mathop2("%")
                        # terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        elif (
                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                        and (self.peek_next_token() != "#" or self.peek_next_token() != "+"
                                             or self.peek_next_token() != "-" or self.peek_next_token() != "*"
                                             or self.peek_next_token() != "/" or self.peek_next_token() != "%" or self.peek_next_token() != "**")):
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  exponentiate it?
                    elif self.peek_next_token() == "**":
                        self.match_exponent2("**")
                        # terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        elif (
                                        self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                                        or re.match(r'Identifier\d*$', self.peek_previous_token())
                                        and (self.peek_next_token() != "#" or self.peek_next_token() != "+"
                                             or self.peek_next_token() != "-" or self.peek_next_token() != "*"
                                             or self.peek_next_token() != "/" or self.peek_next_token() != "%" or self.peek_next_token() != "**")):
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  error: not terminated
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '(', '#', '+', '-', '*', '/', '%', '**', but instead got '{self.peek_next_token()}'")
                #  error: not followed by any of the values
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral'"
                                       f" , 'Identifier', 'True', 'False', but instead got '{self.peek_next_token()}'")
            #  access module/s, function path
            elif self.peek_next_token() == ".":
                self.instance_path(".")  #>>>>call method
            #  assign value to an array index path
            elif self.peek_next_token() == "{":
                #  SEMANTIC CHECK
                if self.peek_previous_lexeme() in self.symbol_table and self.peek_previous_lexeme() not in self.array_variable_table and not self.isParameterVariable:
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Assignment Mismatch) Variable '{self.peek_previous_lexeme()}' is not declared as an array.")
                elif self.peek_previous_lexeme() not in self.array_variable_table:
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Undeclared Array Variable) Array Variable '{self.peek_previous_lexeme()}' is not declared.")
                else:
                    self.check_variable_usage()
                self.array_index_assign("{")
            #  assign increment/decrement
            elif self.peek_next_token() == "++" or self.peek_next_token() == "--":
                self.match(Resources.loopup)
                if self.peek_next_token() == "#":
                    self.match("#")
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '(', '=', '.', but instead got '{self.peek_next_token()}'")

    #  assign a value to an array index
    def array_index_assign(self, expected_token):
        # SEMANTIC CHECK
        self.array_variable = self.peek_previous_lexeme()
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        #  array index assign path
        if expected_token == "{":
            #  array index assign path
            if (re.match(r'Identifier\d*$', self.peek_next_token())
                    or self.peek_next_token() == "SunLiteral"):
                self.match(Resources.Value3)  # consume the values
                #  size expression
                if (self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                    #  close it with "}" if size is fulfilled
                    if self.peek_next_token() == "}":
                        # SEMANTIC CHECK
                        self.check_array_size()
                        self.match("}")

                        #  must be followed by an '='
                        if self.peek_next_token() == "=":
                            self.match("=")

                            #SEMANTIC CHECK
                            if self.array_variable in self.array2_variable_table and not self.isParameterVariable:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Semantic Error: (Assignment Mismatch) Variable '{self.array_variable}' is declared as a 2D array.")

                            #  must be followed by these values
                            if (self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True" or self.peek_next_token() == "False"
                                    or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral" or self.peek_next_token() == "Identifier"):
                                # SEMANTIC CHECK
                                self.check_array_type()
                                self.match(Resources.Value1)  # consume values
                                # terminate
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by the values expected
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral', "
                                    f"'StarsysLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                        # or add another size to become 2D array
                        elif self.peek_next_token() == "{":
                            self.match_arrID2D_index_assign("{")
                            #  must be followed by an '='
                            if self.peek_next_token() == "=":
                                self.match("=")

                                # SEMANTIC CHECK
                                if self.array_variable not in self.array2_variable_table and not self.isParameterVariable:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Semantic Error: (Assignment Mismatch) Variable '{self.array_variable}' is declared as a 1D array.")

                                #  must be followed by these values
                                if (
                                        self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True" or self.peek_next_token() == "False"
                                        or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral" or self.peek_next_token() == "Identifier"):
                                    # SEMANTIC CHECK
                                    self.check_array_type()
                                    self.match(Resources.Value1)  # consume values
                                    # terminate
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by the values expected
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral', "
                                        f"'StarsysLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by an equal
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '=', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by an equal
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '=', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                    #  not closed with '}'
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                #  size is single value
                elif self.peek_next_token() == "}":
                    # SEMANTIC CHECK
                    self.check_array_size()
                    self.match("}")
                    #  must be followed by an '='
                    if self.peek_next_token() == "=":
                        self.match("=")

                        # SEMANTIC CHECK
                        if self.array_variable in self.array2_variable_table and not self.isParameterVariable:
                            self.errors.append(
                                f"(Line {self.line_number}) | Semantic Error: (Assignment Mismatch) Variable '{self.array_variable}' is declared as a 2D array.")

                        # must be followed by these values
                        if (
                                self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True" or self.peek_next_token() == "False"
                                or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral" or self.peek_next_token() == "Identifier"):
                            # SEMANTIC CHECK
                            self.check_array_type()
                            self.match(Resources.Value1)  # consume values
                            # terminate
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by the values expected
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral', "
                                f"'StarsysLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                    # or add another size to become 2D array
                    elif self.peek_next_token() == "{":
                        self.match_arrID2D_index_assign("{")
                        #  must be followed by an '='
                        if self.peek_next_token() == "=":
                            self.match("=")

                            # SEMANTIC CHECK
                            if self.array_variable not in self.array2_variable_table and not self.isParameterVariable:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Semantic Error: (Assignment Mismatch) Variable '{self.array_variable}' is declared as a 1D array.")

                            # must be followed by these values
                            if (self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True" or self.peek_next_token() == "False"
                                    or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral" or self.peek_next_token() == "Identifier"):
                                # SEMANTIC CHECK
                                self.check_array_type()
                                self.match(Resources.Value1)  # consume values
                                # terminate
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by the values expected
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral', "
                                    f"'StarsysLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by an equal
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '=', but instead got '{self.peek_next_token()}'")
                    #  error: not followed by an equal
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '=', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                #  size value is not followed by any of the following (# and Rcurl)
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
            #  empty size, proceed to close it with '}'
            elif self.peek_next_token() == "}":
                # SEMANTIC CHECK
                self.check_array_size()
                self.match("}")
                #  must be followed by an '='
                if self.peek_next_token() == "=":
                    self.match("=")

                    # SEMANTIC CHECK
                    if self.array_variable in self.array2_variable_table and not self.isParameterVariable:
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Assignment Mismatch) Variable '{self.array_variable}' is declared as a 2D array.")

                    # must be followed by these values
                    if (
                            self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True" or self.peek_next_token() == "False"
                            or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral" or self.peek_next_token() == "Identifier"):
                        # SEMANTIC CHECK
                        self.check_array_type()
                        self.match(Resources.Value1)  # consume values
                        # terminate
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                    #  error: not followed by the values expected
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral', "
                            f"'StarsysLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                # or add another size to become 2D array
                elif self.peek_next_token() == "{":
                    self.match_arrID2D_index_assign("{")
                    #  must be followed by an '='
                    if self.peek_next_token() == "=":
                        self.match("=")

                        # SEMANTIC CHECK
                        if self.array_variable not in self.array2_variable_table and not self.isParameterVariable:
                            self.errors.append(
                                f"(Line {self.line_number}) | Semantic Error: (Assignment Mismatch) Variable '{self.array_variable}' is declared as a 1D array.")

                        # must be followed by these values
                        if (
                                self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True" or self.peek_next_token() == "False"
                                or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral" or self.peek_next_token() == "Identifier"):
                            # SEMANTIC CHECK
                            self.check_array_type()
                            self.match(Resources.Value1)  # consume values
                            # terminate
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by the values expected
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral', "
                                f"'StarsysLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
                    #  error: not followed by an equal
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '=', but instead got '{self.peek_next_token()}'")
                #  error: not followed by an equal
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '=', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
            else:
                return True  # else: last identifier has no following identifiers (comma)

    def instance_path(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == ".":
            if re.match(r'Identifier\d*$', self.peek_next_token()):
                self.match("Identifier")
                #  access the module of the module?
                if self.peek_next_token() == ".":
                    self.instance_path(".")
                #  call a function (id.id()#)
                elif self.peek_next_token() == "(":
                    self.match("(")
                    #  has values inside?
                    if (self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                            or self.peek_next_token() == "StarsysLiteral"
                            or re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "True"
                            or self.peek_next_token() == "False"):
                        self.matchValue_mult(Resources.Value1)
                        # close it
                        if self.peek_next_token() == ")":
                            self.match(")")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                        #  error: expected ')'
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                    #  no values inside
                    elif self.peek_next_token() == ")":
                        self.match(")")
                        #  terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected ')', 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral', 'Identifier', 'True',"
                            f"'False', but instead got '{self.peek_next_token()}'")
                #  assign a value to it (id.id = 5#)
                elif self.peek_next_token() == "=":
                    self.match("=")
                    # assign a value
                    if (self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                            or self.peek_next_token() == "StarsysLiteral" or re.match(r'Identifier\d*$',
                                                                                      self.peek_next_token())
                            or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                        self.match(Resources.Value1)
                        #  terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                    #  error: values are not assigned
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected 'SunLiteral', 'LuhmanLiteral', 'StarsysLiteral',"
                            f" 'Identifier', 'True', 'False', but instead got '{self.peek_next_token()}'")
                #  terminate it (no more next)
                elif self.peek_next_token() == "#":
                    self.match("#")
                #  values next are not expected
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax Error: Expected '#', '(', '.', '=', but instead got '{self.peek_next_token()}'")
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")

    def instance_path_output(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()
        if re.match(r'Identifier\d*$', self.peek_next_token()):
            self.match("Identifier")
            #  access the module of the module?
            if self.peek_next_token() == ".":
                self.instance_path_output(".")
            #  call a function (id.id()#)
            elif self.peek_next_token() == "(":
                self.match("(")
                #  has values inside?
                if (self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"
                        or self.peek_next_token() == "StarsysLiteral"
                        or re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "True"
                        or self.peek_next_token() == "False"):
                    self.matchValue_mult(Resources.Value1)
                    # close it
                    if self.peek_next_token() == ")":
                        self.match(")")
                        #  terminate it (no more next)
                        if self.peek_next_token() == "#":
                            return True
                        #  more display
                        elif self.peek_next_token() == "<<":
                            return True
                        #  values next are not expected
                        else:
                            return False
                    #  error: expected ')'
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                #  no values inside
                elif self.peek_next_token() == ")":
                    self.match(")")
                    #  terminate it (no more next)
                    if self.peek_next_token() == "#":
                        return True
                    #  more display
                    elif self.peek_next_token() == "<<":
                        return True
                    #  values next are not expected
                    else:
                        return False
            #  terminate it (no more next)
            elif self.peek_next_token() == "#":
                return True
            #  more display
            elif self.peek_next_token() == "<<":
                return True
            #  values next are not expected
            else:
                return False
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")

    #  class body
    def parse_class_body(self):
        #  is it under a class specifier?
        if (self.peek_next_token() == "Public" or self.peek_next_token() == "Private"
                or self.peek_next_token() == "Protected"):
            self.match(Resources.access_specifier)  # consume access specifiers
            #  must be followed by ':'
            if self.peek_next_token() == ":":
                self.match(":")  # consume ':'
                self.parse_statements2()  #  statements
                # is the next statements or code block under a class specifier again?
                if (self.peek_next_token() == "Public" or self.peek_next_token() == "Private"
                        or self.peek_next_token() == "Protected"):
                    self.parse_class_body()  # consume access specifiers
                #  close it?
                elif self.peek_next_token() == "]":
                    self.match("]")
                    #  terminate it
                    if self.peek_next_token() == "#":
                        return True
                    #  error: not terminated
                    else:
                        return False
                #  error: not closed or followed by any of the values
                elif self.peek_next_token() != "]" and (self.peek_previous_token() == "#" or self.peek_previous_token() == "]" or self.peek_previous_token() == ":" or self.peek_previous_token() == "["):
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected ']', 'Public', 'Private', 'Protected', "
                        f"'Sun', 'Luhman', 'Starsys', 'Identifier', 'Boolean', 'Void', 'Class', 'ISS' but instead got '{self.peek_next_token()}'")
            #  error: not followed by ':'
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected ':', but instead got '{self.peek_next_token()}'")
        #  statements are not under an access specifier
        else:
            self.parse_statements2()
            # is the statement/ code blocks next under an access specifier?
            if (self.peek_next_token() == "Public" or self.peek_next_token() == "Private"
                    or self.peek_next_token() == "Protected"):
                self.parse_class_body()
            #  close it?
            elif self.peek_next_token() == "]":
                self.match("]")
                #  terminate it
                if self.peek_next_token() == "#":
                    return True
                #  error: not terminated
                else:
                    return False
            #  error: not closed or followed by any of the values
            elif self.peek_next_token() != "]" and (self.peek_previous_token() == "#" or self.peek_previous_token() == "]" or self.peek_previous_token() == ":" or self.peek_previous_token() == "["):
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected ']', 'Public', 'Private', 'Protected', "
                    f"'Sun', 'Luhman', 'Starsys', 'Identifier', 'Boolean', 'Void', 'Class', 'ISS' but instead got '{self.peek_next_token()}'")

    #  struct body
    def parse_struct_body(self):
        #  is it under a class specifier?
        if (self.peek_next_token() == "Public" or self.peek_next_token() == "Private"
                or self.peek_next_token() == "Protected"):
            self.match(Resources.access_specifier)  # consume access specifiers
            #  must be followed by ':'
            if self.peek_next_token() == ":":
                self.match(":")  # consume ':'
                self.parse_statements2()  #  statements
                # is the next statements or code block under a class specifier again?
                if (self.peek_next_token() == "Public" or self.peek_next_token() == "Private"
                        or self.peek_next_token() == "Protected"):
                    self.parse_struct_body()  # consume access specifiers
                #  close it?
                elif self.peek_next_token() == "]":
                    self.match("]")
                    #  terminate it
                    if self.peek_next_token() == "#":
                        return True
                    # struct initial instance path
                    elif re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.match("Identifier")
                        #  terminate
                        if self.peek_next_token() == "#":
                            return True
                        #  multiple instance path
                        elif self.peek_next_token() == ",":
                            self.match(",")
                            # assign id
                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.matchID_mult("Identifier")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    return True
                                #  error: not terminated
                                else:
                                    return False
                            #  error: no id next
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                        #  error: not terminated, or no following multiple instances
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', ',', but instead got '{self.peek_next_token()}'")
                    #  error: not terminated
                    else:
                        return False
                #  error: not closed or followed by any of the values
                elif self.peek_next_token() != "]" and (self.peek_previous_token() == "#" or self.peek_previous_token() == "]" or self.peek_previous_token() == ":" or self.peek_previous_token() == "["):
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected ']', 'Public', 'Private', 'Protected', "
                        f"'Sun', 'Luhman', 'Starsys', 'Identifier', 'Boolean', 'Void', 'Class', 'ISS' but instead got '{self.peek_next_token()}'")
            #  error: not followed by ':'
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected ':', but instead got '{self.peek_next_token()}'")
        #  statements are not under an access specifier
        else:
            self.parse_statements2()
            # is the statement/ code blocks next under an access specifier?
            if (self.peek_next_token() == "Public" or self.peek_next_token() == "Private"
                    or self.peek_next_token() == "Protected"):
                self.parse_struct_body()
            #  close it?
            elif self.peek_next_token() == "]":
                self.match("]")
                #  terminate it
                if self.peek_next_token() == "#":
                    return True
                # struct initial instance path
                elif re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.match("Identifier")
                    #  terminate
                    if self.peek_next_token() == "#":
                        return True
                    #  multiple instance path
                    elif self.peek_next_token() == ",":
                        self.match(",")
                        # assign id
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.matchID_mult("Identifier")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                return True
                            #  error: not terminated
                            else:
                                return False
                        #  error: no id next
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  error: not terminated, or no following multiple instances
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', ',', but instead got '{self.peek_next_token()}'")
                #  error: not terminated
                else:
                    return False
            #  error: not closed or followed by any of the values
            elif self.peek_next_token() != "]" and (self.peek_previous_token() == "#" or self.peek_previous_token() == "]" or self.peek_previous_token() == ":" or self.peek_previous_token() == "["):
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected ']', 'Public', 'Private', 'Protected', "
                    f"'Sun', 'Luhman', 'Starsys', 'Identifier', 'Boolean', 'Void', 'Class', 'ISS' but instead got '{self.peek_next_token()}'")

    #  match subfunc
    def match_subfunc(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        #  expected token could be: id, sunliteral, luhmanliteral, starsysliteral, true, false
        if isinstance(expected_token, list):
            if (self.current_token == "Sun" or self.current_token == "Luhman"
                    or self.current_token == "Starsys" or self.current_token == "Boolean"):
                # SEMANTIC CHECK
                self.function_datatype = self.current_token

                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.match("Identifier")
                    # SEMANTIC CHECK
                    self.function_name = self.peek_previous_lexeme()
                    # Check if the function_name already exists in the parameter_table
                    if self.function_name in self.parameter_table:
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Redeclaration Error) Function '{self.function_name}' is already defined.")
                        self.function_exist = True

                    if self.peek_next_token() == "(":
                        self.match("(")
                        # Static Parameter
                        if self.peek_next_token() == "Static":
                            self.match("Static")
                            # has parameter path
                            if (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                                    or self.peek_next_token() == "Boolean" or self.peek_next_token() == "Starsys"):
                                self.match(Resources.Datatype2)
                                # SEMANTIC CHECK
                                self.parameter_datatype = self.peek_previous_lexeme()

                                if re.match(r'Identifier\d*$', self.peek_next_token()):
                                    self.match("Identifier")
                                    # SEMANTIC CHECK
                                    self.parameter_var_name = self.peek_previous_lexeme()
                                    if not self.function_exist:
                                        self.declare_parameter_variable(self.function_datatype, self.function_name,
                                                                        self.parameter_datatype,
                                                                        self.parameter_var_name)

                                    #  parameter is an array index path (static)
                                    if self.peek_next_token() == "{":
                                        self.match("{")  # consume
                                        #  array index assign path
                                        if (re.match(r'Identifier\d*$', self.peek_next_token())
                                                or self.peek_next_token() == "SunLiteral"):
                                            self.match(Resources.Value3)  # consume the values
                                            #  size expression
                                            if (
                                                    self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                                    or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                                self.match_mathop3(Resources.mathop1)  # size is a math expr
                                                #  close it with "}" if size is fulfilled
                                                if self.peek_next_token() == "}":
                                                    self.match("}")
                                                    #  close with ')' after assigning value/s
                                                    if self.peek_next_token() == ")":
                                                        self.match(")")
                                                        #  follow it with '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_sub_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  has gotolerate
                                                        elif self.peek_next_token() == "Gotolerate":
                                                            self.match("Gotolerate")
                                                            #  must be followed by '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_sub_function_definition()  # body
                                                                if self.peek_next_token() == "Disintegrate":
                                                                    return True
                                                            #  error: not followed by '['
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                                    elif self.peek_next_token() == ",":
                                                        self.match_param_assign_mult(",")
                                                        #  close with ')' after assigning value/s
                                                        if self.peek_next_token() == ")":
                                                            self.match(")")
                                                            #  follow it with '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_sub_function_definition()  # body
                                                                if self.peek_next_token() == "Disintegrate":
                                                                    return True
                                                            #  has gotolerate
                                                            elif self.peek_next_token() == "Gotolerate":
                                                                self.match("Gotolerate")
                                                                #  must be followed by '['
                                                                if self.peek_next_token() == "[":
                                                                    self.parse_sub_function_definition()  # body
                                                                    if self.peek_next_token() == "Disintegrate":
                                                                        return True
                                                                #  error: not followed by '['
                                                                else:
                                                                    self.errors.append(
                                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                            #  error: not followed
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                    # or add another size to become 2D array
                                                    elif self.peek_next_token() == "{":
                                                        self.match_arrID2D_index_parameter("{")
                                                        #  close with ')' after assigning value/s
                                                        if self.peek_next_token() == ")":
                                                            self.match(")")
                                                            #  follow it with '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_sub_function_definition()  # body
                                                                if self.peek_next_token() == "Disintegrate":
                                                                    return True
                                                            #  has gotolerate
                                                            elif self.peek_next_token() == "Gotolerate":
                                                                self.match("Gotolerate")
                                                                #  must be followed by '['
                                                                if self.peek_next_token() == "[":
                                                                    self.parse_sub_function_definition()  # body
                                                                    if self.peek_next_token() == "Disintegrate":
                                                                        return True
                                                                #  error: not followed by '['
                                                                else:
                                                                    self.errors.append(
                                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                            #  error: not followed
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                                        elif self.peek_next_token() == ",":
                                                            self.match_param_assign_mult(",")
                                                            #  close with ')' after assigning value/s
                                                            if self.peek_next_token() == ")":
                                                                self.match(")")
                                                                #  follow it with '['
                                                                if self.peek_next_token() == "[":
                                                                    self.parse_sub_function_definition()  # body
                                                                    if self.peek_next_token() == "Disintegrate":
                                                                        return True
                                                                #  has gotolerate
                                                                elif self.peek_next_token() == "Gotolerate":
                                                                    self.match("Gotolerate")
                                                                    #  must be followed by '['
                                                                    if self.peek_next_token() == "[":
                                                                        self.parse_sub_function_definition()  # body
                                                                        if self.peek_next_token() == "Disintegrate":
                                                                            return True
                                                                    #  error: not followed by '['
                                                                    else:
                                                                        self.errors.append(
                                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                                #  error: not followed
                                                                else:
                                                                    self.errors.append(
                                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed by
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                                #  not closed with '}'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                            #  size is single value
                                            elif self.peek_next_token() == "}":
                                                self.match("}")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  follow it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_sub_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                                elif self.peek_next_token() == ",":
                                                    self.match_param_assign_mult(",")
                                                    #  close with ')' after assigning value/s
                                                    if self.peek_next_token() == ")":
                                                        self.match(")")
                                                        #  follow it with '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_sub_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  has gotolerate
                                                        elif self.peek_next_token() == "Gotolerate":
                                                            self.match("Gotolerate")
                                                            #  must be followed by '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_sub_function_definition()  # body
                                                                if self.peek_next_token() == "Disintegrate":
                                                                    return True
                                                            #  error: not followed by '['
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                # or add another size to become 2D array
                                                elif self.peek_next_token() == "{":
                                                    self.match_arrID2D_index_parameter("{")
                                                    #  close with ')' after assigning value/s
                                                    if self.peek_next_token() == ")":
                                                        self.match(")")
                                                        #  follow it with '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_sub_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  has gotolerate
                                                        elif self.peek_next_token() == "Gotolerate":
                                                            self.match("Gotolerate")
                                                            #  must be followed by '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_sub_function_definition()  # body
                                                                if self.peek_next_token() == "Disintegrate":
                                                                    return True
                                                            #  error: not followed by '['
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                                    elif self.peek_next_token() == ",":
                                                        self.match_param_assign_mult(",")
                                                        #  close with ')' after assigning value/s
                                                        if self.peek_next_token() == ")":
                                                            self.match(")")
                                                            #  follow it with '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_void_function_definition()  # body
                                                                if self.peek_next_token() == "Disintegrate":
                                                                    return True
                                                            #  has gotolerate
                                                            elif self.peek_next_token() == "Gotolerate":
                                                                self.match("Gotolerate")
                                                                #  must be followed by '['
                                                                if self.peek_next_token() == "[":
                                                                    self.parse_void_function_definition()  # body
                                                                    if self.peek_next_token() == "Disintegrate":
                                                                        return True
                                                                #  error: not followed by '['
                                                                else:
                                                                    self.errors.append(
                                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                            #  error: not followed
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by an equal
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by an equal
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                            #  size value is not followed by any of the following (# and Rcurl)
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                                        #  empty size, proceed to close it with '}'
                                        elif self.peek_next_token() == "}":
                                            self.match("}")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  follow it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  follow it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_sub_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            # or add another size to become 2D array
                                            elif self.peek_next_token() == "{":
                                                self.match_arrID2D_index_parameter("{")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  follow it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_sub_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                                elif self.peek_next_token() == ",":
                                                    self.match_param_assign_mult(",")
                                                    #  close with ')' after assigning value/s
                                                    if self.peek_next_token() == ")":
                                                        self.match(")")
                                                        #  follow it with '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_sub_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  has gotolerate
                                                        elif self.peek_next_token() == "Gotolerate":
                                                            self.match("Gotolerate")
                                                            #  must be followed by '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_sub_function_definition()  # body
                                                                if self.peek_next_token() == "Disintegrate":
                                                                    return True
                                                            #  error: not followed by '['
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by an equal
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by an equal
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                                    #  equals path
                                    elif self.peek_next_token() == "=":
                                        self.match_param_assign("=")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  follow it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition()  # body
                                                if self.peek_next_token() == "Disintegrate":
                                                    return True
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  error: not closed
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                                    #  check: if closed, single id no value
                                    elif self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition()  # body
                                            if self.peek_next_token() == "Disintegrate":
                                                return True
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition()  # body
                                                if self.peek_next_token() == "Disintegrate":
                                                    return True
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition()  # body
                                                if self.peek_next_token() == "Disintegrate":
                                                    return True
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  unexpected end: no ')' to close, or comma to followed by, or (=) to assign values
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                                #  error: no identifier after the datatype
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                            #  no datatype after static
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Sun', 'Luhman', 'Boolean', 'Starsys', but instead got '{self.peek_next_token()}'")
                        # has parameter path
                        elif (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                              or self.peek_next_token() == "Boolean" or self.peek_next_token() == "Starsys"):
                            self.match(Resources.Datatype2)
                            # SEMANTIC CHECK
                            self.parameter_datatype = self.peek_previous_token()

                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.match("Identifier")
                                # SEMANTIC CHECK
                                self.parameter_var_name = self.peek_previous_lexeme()
                                if not self.function_exist:
                                    self.declare_parameter_variable(self.function_datatype, self.function_name, self.parameter_datatype, self.parameter_var_name)

                                #  parameter is an array index path
                                if self.peek_next_token() == "{":
                                    self.match("{")  # consume
                                    #  array index assign path
                                    if (re.match(r'Identifier\d*$', self.peek_next_token())
                                            or self.peek_next_token() == "SunLiteral"):
                                        self.match(Resources.Value3)  # consume the values
                                        #  size expression
                                        if (
                                                self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                                or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                            self.match_mathop3(Resources.mathop1)  # size is a math expr
                                            #  close it with "}" if size is fulfilled
                                            if self.peek_next_token() == "}":
                                                self.match("}")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  follow it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_sub_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                                elif self.peek_next_token() == ",":
                                                    self.match_param_assign_mult(",")
                                                    #  close with ')' after assigning value/s
                                                    if self.peek_next_token() == ")":
                                                        self.match(")")
                                                        #  follow it with '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_sub_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  has gotolerate
                                                        elif self.peek_next_token() == "Gotolerate":
                                                            self.match("Gotolerate")
                                                            #  must be followed by '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_sub_function_definition()  # body
                                                                if self.peek_next_token() == "Disintegrate":
                                                                    return True
                                                            #  error: not followed by '['
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                # or add another size to become 2D array
                                                elif self.peek_next_token() == "{":
                                                    self.match_arrID2D_index_parameter("{")
                                                    #  close with ')' after assigning value/s
                                                    if self.peek_next_token() == ")":
                                                        self.match(")")
                                                        #  follow it with '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_sub_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  has gotolerate
                                                        elif self.peek_next_token() == "Gotolerate":
                                                            self.match("Gotolerate")
                                                            #  must be followed by '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_sub_function_definition()  # body
                                                                if self.peek_next_token() == "Disintegrate":
                                                                    return True
                                                            #  error: not followed by '['
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                                    elif self.peek_next_token() == ",":
                                                        self.match_param_assign_mult(",")
                                                        #  close with ')' after assigning value/s
                                                        if self.peek_next_token() == ")":
                                                            self.match(")")
                                                            #  follow it with '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_sub_function_definition()  # body
                                                                if self.peek_next_token() == "Disintegrate":
                                                                    return True
                                                            #  has gotolerate
                                                            elif self.peek_next_token() == "Gotolerate":
                                                                self.match("Gotolerate")
                                                                #  must be followed by '['
                                                                if self.peek_next_token() == "[":
                                                                    self.parse_sub_function_definition()  # body
                                                                    if self.peek_next_token() == "Disintegrate":
                                                                        return True
                                                                #  error: not followed by '['
                                                                else:
                                                                    self.errors.append(
                                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                            #  error: not followed
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                            #  not closed with '}'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                        #  size is single value
                                        elif self.peek_next_token() == "}":
                                            self.match("}")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  follow it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  follow it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_sub_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            # or add another size to become 2D array
                                            elif self.peek_next_token() == "{":
                                                self.match_arrID2D_index_parameter("{")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  follow it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_sub_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}' after {self.peek_previous_token()}")
                                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                                elif self.peek_next_token() == ",":
                                                    self.match_param_assign_mult(",")
                                                    #  close with ')' after assigning value/s
                                                    if self.peek_next_token() == ")":
                                                        self.match(")")
                                                        #  follow it with '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  has gotolerate
                                                        elif self.peek_next_token() == "Gotolerate":
                                                            self.match("Gotolerate")
                                                            #  must be followed by '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_void_function_definition()  # body
                                                                if self.peek_next_token() == "Disintegrate":
                                                                    return True
                                                            #  error: not followed by '['
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by an equal
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by an equal
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                        #  size value is not followed by any of the following (# and Rcurl)
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                                    #  empty size, proceed to close it with '}'
                                    elif self.peek_next_token() == "}":
                                        self.match("}")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  follow it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition()  # body
                                                if self.peek_next_token() == "Disintegrate":
                                                    return True
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  follow it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        # or add another size to become 2D array
                                        elif self.peek_next_token() == "{":
                                            self.match_arrID2D_index_parameter("{")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  follow it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  follow it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_sub_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by an equal
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by an equal
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                                elif self.peek_next_token() == "=":
                                    self.match_param_assign("=")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  follow '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition()  # body
                                            if self.peek_next_token() == "Disintegrate":
                                                return True
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition()  # body
                                                if self.peek_next_token() == "Disintegrate":
                                                    return True
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  error: not closed
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                                #  check: if closed, single id no value
                                elif self.peek_next_token() == ")":
                                    self.match(")")
                                    self.compare_function_parameters(self.function_name)
                                    #  followed by '['
                                    if self.peek_next_token() == "[":
                                        self.parse_sub_function_definition()  # body
                                        if self.peek_next_token() == "Disintegrate":
                                            return True
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition()  # body
                                            if self.peek_next_token() == "Disintegrate":
                                                return True
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition()  # body
                                            if self.peek_next_token() == "Disintegrate":
                                                return True
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition()  # body
                                                if self.peek_next_token() == "Disintegrate":
                                                    return True
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  unexpected end: no ')' to close, or comma to followed by, or (=) to assign values
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                            #  error: no identifier after the datatype
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                        #  no parameter
                        elif self.peek_next_token() == ")":
                            self.match(")")
                            # SEMANTIC CHECK
                            self.parameter_datatype = "null"
                            # SEMANTIC CHECK
                            self.parameter_var_name = "null"
                            if not self.function_exist:
                                self.declare_parameter_variable(self.function_datatype, self.function_name,
                                                                self.parameter_datatype, self.parameter_var_name)
                            self.compare_function_parameters(self.function_name)

                            #  must be followed by '['
                            if self.peek_next_token() == "[":
                                self.parse_sub_function_definition()  #  body
                                if self.peek_next_token() == "Disintegrate":
                                    return True
                            #  has gotolerate
                            elif self.peek_next_token() == "Gotolerate":
                                self.match("Gotolerate")
                                #  must be followed by '['
                                if self.peek_next_token() == "[":
                                    self.parse_sub_function_definition()  # body
                                    if self.peek_next_token() == "Disintegrate":
                                        return True
                                #  error: not followed by '['
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by '['
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                        else:
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '(', but instead got '{self.peek_next_token()}'")
                #  error: not followed by an identifier
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            #  error: unknown datatypes
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected 'Sun', 'Luhman', 'Starsys', 'Boolean', but instead got '{self.peek_next_token()}'")


    def match_voidfunc(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()
        # SEMANTIC CHECK
        self.function_datatype = "Void"

        if expected_token == "Void" :
            if re.match(r'Identifier\d*$', self.peek_next_token()):
                self.match("Identifier")
                # SEMANTIC CHECK
                self.function_name = self.peek_previous_lexeme()
                # Check if the function_name already exists in the parameter_table
                if self.function_name in self.parameter_table:
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Redeclaration Error) Function '{self.function_name}' is already defined.")
                    self.function_exist = True

                if self.peek_next_token() == "(":
                    self.match("(")
                    if self.peek_next_token() == "Static":
                        self.match("Static")
                        # has parameter path
                        if (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                                or self.peek_next_token() == "Boolean" or self.peek_next_token() == "Starsys"):
                            self.match(Resources.Datatype2)
                            # SEMANTIC CHECK
                            self.parameter_datatype = self.peek_previous_lexeme()

                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.match("Identifier")
                                # SEMANTIC CHECK
                                self.parameter_var_name = self.peek_previous_lexeme()
                                if not self.function_exist:
                                    self.declare_parameter_variable(self.function_datatype, self.function_name,
                                                                    self.parameter_datatype, self.parameter_var_name)

                                #  parameter is an array index path (static)
                                if self.peek_next_token() == "{":
                                    self.match("{")  # consume
                                    #  array index assign path
                                    if (re.match(r'Identifier\d*$', self.peek_next_token())
                                            or self.peek_next_token() == "SunLiteral"):
                                        self.match(Resources.Value3)  # consume the values
                                        #  size expression
                                        if (
                                                self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                                or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                            self.match_mathop3(Resources.mathop1)  # size is a math expr
                                            #  close it with "}" if size is fulfilled
                                            if self.peek_next_token() == "}":
                                                self.match("}")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  follow it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                                elif self.peek_next_token() == ",":
                                                    self.match_param_assign_mult(",")
                                                    #  close with ')' after assigning value/s
                                                    if self.peek_next_token() == ")":
                                                        self.match(")")
                                                        #  follow it with '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  has gotolerate
                                                        elif self.peek_next_token() == "Gotolerate":
                                                            self.match("Gotolerate")
                                                            #  must be followed by '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_void_function_definition()  # body
                                                                if self.peek_next_token() == "Disintegrate":
                                                                    return True
                                                            #  error: not followed by '['
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                # or add another size to become 2D array
                                                elif self.peek_next_token() == "{":
                                                    self.match_arrID2D_index_parameter("{")
                                                    #  close with ')' after assigning value/s
                                                    if self.peek_next_token() == ")":
                                                        self.match(")")
                                                        #  follow it with '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  has gotolerate
                                                        elif self.peek_next_token() == "Gotolerate":
                                                            self.match("Gotolerate")
                                                            #  must be followed by '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_void_function_definition()  # body
                                                                if self.peek_next_token() == "Disintegrate":
                                                                    return True
                                                            #  error: not followed by '['
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                                    elif self.peek_next_token() == ",":
                                                        self.match_param_assign_mult(",")
                                                        #  close with ')' after assigning value/s
                                                        if self.peek_next_token() == ")":
                                                            self.match(")")
                                                            #  follow it with '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_void_function_definition()  # body
                                                                if self.peek_next_token() == "Disintegrate":
                                                                    return True
                                                            #  has gotolerate
                                                            elif self.peek_next_token() == "Gotolerate":
                                                                self.match("Gotolerate")
                                                                #  must be followed by '['
                                                                if self.peek_next_token() == "[":
                                                                    self.parse_void_function_definition()  # body
                                                                    if self.peek_next_token() == "Disintegrate":
                                                                        return True
                                                                #  error: not followed by '['
                                                                else:
                                                                    self.errors.append(
                                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                            #  error: not followed
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                            #  not closed with '}'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                        #  size is single value
                                        elif self.peek_next_token() == "}":
                                            self.match("}")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  follow it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  follow it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            # or add another size to become 2D array
                                            elif self.peek_next_token() == "{":
                                                self.match_arrID2D_index_parameter("{")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  follow it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                                elif self.peek_next_token() == ",":
                                                    self.match_param_assign_mult(",")
                                                    #  close with ')' after assigning value/s
                                                    if self.peek_next_token() == ")":
                                                        self.match(")")
                                                        #  follow it with '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  has gotolerate
                                                        elif self.peek_next_token() == "Gotolerate":
                                                            self.match("Gotolerate")
                                                            #  must be followed by '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_void_function_definition()  # body
                                                                if self.peek_next_token() == "Disintegrate":
                                                                    return True
                                                            #  error: not followed by '['
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by an equal
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by an equal
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                        #  size value is not followed by any of the following (# and Rcurl)
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                                    #  empty size, proceed to close it with '}'
                                    elif self.peek_next_token() == "}":
                                        self.match("}")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  follow it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_void_function_definition()  # body
                                                if self.peek_next_token() == "Disintegrate":
                                                    return True
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  follow it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed
                                                else:
                                                    self.errors.append(f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        # or add another size to become 2D array
                                        elif self.peek_next_token() == "{":
                                            self.match_arrID2D_index_parameter("{")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  follow it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  follow it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by an equal
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by an equal
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  equals path
                                elif self.peek_next_token() == "=":
                                    self.match_param_assign("=")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  follow it with '['
                                        if self.peek_next_token() == "[":
                                            self.parse_void_function_definition()  # body
                                            if self.peek_next_token() == "Disintegrate":
                                                return True
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_void_function_definition()  # body
                                                if self.peek_next_token() == "Disintegrate":
                                                    return True
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  error: not closed
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                                #  check: if closed, single id no value
                                elif self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed it with '['
                                    if self.peek_next_token() == "[":
                                        self.parse_void_function_definition()  # body
                                        if self.peek_next_token() == "Disintegrate":
                                            return True
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_void_function_definition()  # body
                                            if self.peek_next_token() == "Disintegrate":
                                                return True
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_void_function_definition()  # body
                                            if self.peek_next_token() == "Disintegrate":
                                                return True
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_void_function_definition()  # body
                                                if self.peek_next_token() == "Disintegrate":
                                                    return True
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  unexpected end: no ')' to close, or comma to followed by, or (=) to assign values
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                            #  error: no identifier after the datatype
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                        #  no datatype after static
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Sun', 'Luhman', 'Boolean', 'Starsys', but instead got '{self.peek_next_token()}'")
                    # has parameter path
                    elif (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                            or self.peek_next_token() == "Boolean" or self.peek_next_token() == "Starsys"):
                        self.match(Resources.Datatype2)
                        # SEMANTIC CHECK
                        self.parameter_datatype = self.peek_previous_token()

                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.match("Identifier")
                            # SEMANTIC CHECK
                            self.parameter_var_name = self.peek_previous_lexeme()
                            if not self.function_exist:
                                self.declare_parameter_variable(self.function_datatype, self.function_name, self.parameter_datatype,
                                                                self.parameter_var_name)

                            #  parameter is an array index path
                            if self.peek_next_token() == "{":
                                self.match("{")  # consume
                                #  array index assign path
                                if (re.match(r'Identifier\d*$', self.peek_next_token())
                                        or self.peek_next_token() == "SunLiteral"):
                                    self.match(Resources.Value3)  # consume the values
                                    #  size expression
                                    if (
                                            self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                            or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                        self.match_mathop3(Resources.mathop1)  # size is a math expr
                                        #  close it with "}" if size is fulfilled
                                        if self.peek_next_token() == "}":
                                            self.match("}")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  follow it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  follow it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            # or add another size to become 2D array
                                            elif self.peek_next_token() == "{":
                                                self.match_arrID2D_index_parameter("{")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  follow it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                                elif self.peek_next_token() == ",":
                                                    self.match_param_assign_mult(",")
                                                    #  close with ')' after assigning value/s
                                                    if self.peek_next_token() == ")":
                                                        self.match(")")
                                                        #  follow it with '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  has gotolerate
                                                        elif self.peek_next_token() == "Gotolerate":
                                                            self.match("Gotolerate")
                                                            #  must be followed by '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_void_function_definition()  # body
                                                                if self.peek_next_token() == "Disintegrate":
                                                                    return True
                                                            #  error: not followed by '['
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                        #  not closed with '}'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                    #  size is single value
                                    elif self.peek_next_token() == "}":
                                        self.match("}")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  follow it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_void_function_definition()  # body
                                                if self.peek_next_token() == "Disintegrate":
                                                    return True
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  follow it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        # or add another size to become 2D array
                                        elif self.peek_next_token() == "{":
                                            self.match_arrID2D_index_parameter("{")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  follow it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  follow it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition()  # body
                                                            if self.peek_next_token() == "Disintegrate":
                                                                return True
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by an equal
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by an equal
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                    #  size value is not followed by any of the following (# and Rcurl)
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                                #  empty size, proceed to close it with '}'
                                elif self.peek_next_token() == "}":
                                    self.match("}")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  follow it with '['
                                        if self.peek_next_token() == "[":
                                            self.parse_void_function_definition()  # body
                                            if self.peek_next_token() == "Disintegrate":
                                                return True
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_void_function_definition()  # body
                                                if self.peek_next_token() == "Disintegrate":
                                                    return True
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  follow it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_void_function_definition()  # body
                                                if self.peek_next_token() == "Disintegrate":
                                                    return True
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  follow it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_void_function_definition()  # body
                                                if self.peek_next_token() == "Disintegrate":
                                                    return True
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  follow it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition()  # body
                                                    if self.peek_next_token() == "Disintegrate":
                                                        return True
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition()  # body
                                                        if self.peek_next_token() == "Disintegrate":
                                                            return True
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by an equal
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                            #  equal path
                            elif self.peek_next_token() == "=":
                                self.match_param_assign("=")
                                #  close with ')' after assigning value/s
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  follow '['
                                    if self.peek_next_token() == "[":
                                        self.parse_void_function_definition()  # body
                                        if self.peek_next_token() == "Disintegrate":
                                            return True
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_void_function_definition()  # body
                                            if self.peek_next_token() == "Disintegrate":
                                                return True
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  error: not closed
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                            #  check: if closed, single id no value
                            elif self.peek_next_token() == ")":
                                self.match(")")
                                #  followed by '['
                                if self.peek_next_token() == "[":
                                    self.parse_void_function_definition()  # body
                                    if self.peek_next_token() == "Disintegrate":
                                        return True
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  must be followed by '['
                                    if self.peek_next_token() == "[":
                                        self.parse_void_function_definition()  # body
                                        if self.peek_next_token() == "Disintegrate":
                                            return True
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '['
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            #  single id is followed by a comma
                            elif self.peek_next_token() == ",":
                                self.match_param_assign_mult(",")
                                #  close with ')' after assigning value/s
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed by '['
                                    if self.peek_next_token() == "[":
                                        self.parse_void_function_definition()  # body
                                        if self.peek_next_token() == "Disintegrate":
                                            return True
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_void_function_definition()  # body
                                            if self.peek_next_token() == "Disintegrate":
                                                return True
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            #  unexpected end: no ')' to close, or comma to followed by, or (=) to assign values
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                        #  error: no identifier after the datatype
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  no parameter
                    elif self.peek_next_token() == ")":
                        self.match(")")
                        # SEMANTIC CHECK
                        self.parameter_datatype = "null"
                        # SEMANTIC CHECK
                        self.parameter_var_name = "null"
                        if not self.function_exist:
                            self.declare_parameter_variable(self.function_datatype, self.function_name,
                                                            self.parameter_datatype, self.parameter_var_name)
                        self.compare_function_parameters(self.function_name)

                        #  must be followed by '['
                        if self.peek_next_token() == "[":
                            self.parse_void_function_definition()  #  body
                            if self.peek_next_token() == "Disintegrate":
                                return True
                        #  has gotolerate
                        elif self.peek_next_token() == "Gotolerate":
                            self.match("Gotolerate")
                            #  must be followed by '['
                            if self.peek_next_token() == "[":
                                self.parse_void_function_definition()  # body
                                if self.peek_next_token() == "Disintegrate":
                                    return True
                            #  error: not followed by '['
                            else:
                                self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by '['
                        else:
                            self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  error: not followed by an identifier
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
        #  error: unknown datatypes
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Syntax error: Expected 'Void', but instead got '{self.peek_next_token()}'")

    #  method for void function creation inside classes, functions
    def match_voidfunc_statement(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()
        #SEMANTIC CHECK
        self.function_datatype = "Void"

        if expected_token == "Void":
            if re.match(r'Identifier\d*$', self.peek_next_token()):
                self.match("Identifier")
                # SEMANTIC CHECK
                self.function_name = self.peek_previous_lexeme()
                # Check if the function_name already exists in the parameter_table
                if self.function_name in self.parameter_table:
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Redeclaration Error) Function '{self.function_name}' is already defined.")
                    self.function_exist = True

                if self.peek_next_token() == "(":
                    self.match("(")
                    if self.peek_next_token() == "Static":
                        self.match("Static")
                        # has parameter path
                        if (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                                or self.peek_next_token() == "Boolean" or self.peek_next_token() == "Starsys"):
                            self.match(Resources.Datatype2)
                            # SEMANTIC CHECK
                            self.parameter_datatype = self.peek_previous_lexeme()

                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.match("Identifier")
                                # SEMANTIC CHECK
                                self.parameter_var_name = self.peek_previous_lexeme()
                                if not self.function_exist:
                                    self.declare_parameter_variable(self.function_datatype, self.function_name,
                                                                    self.parameter_datatype,
                                                                    self.parameter_var_name)

                                #  parameter is an array index path (static)
                                if self.peek_next_token() == "{":
                                    self.match("{")  # consume
                                    #  array index assign path
                                    if (re.match(r'Identifier\d*$', self.peek_next_token())
                                            or self.peek_next_token() == "SunLiteral"):
                                        self.match(Resources.Value3)  # consume the values
                                        #  size expression
                                        if (
                                                self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                                or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                            self.match_mathop3(Resources.mathop1)  # size is a math expr
                                            #  close it with "}" if size is fulfilled
                                            if self.peek_next_token() == "}":
                                                self.match("}")
                                                #  check: if closed, single 1D array
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  followed it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition_statement()  # body
                                                            #  close it
                                                            if self.peek_next_token() == "]":
                                                                self.match("]")
                                                            #  error: not closed
                                                            else:
                                                                return False
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                                elif self.peek_next_token() == ",":
                                                    self.match_param_assign_mult(",")
                                                    #  close with ')' after assigning value/s
                                                    if self.peek_next_token() == ")":
                                                        self.match(")")
                                                        #  followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition_statement()  # body
                                                            #  close it
                                                            if self.peek_next_token() == "]":
                                                                self.match("]")
                                                            #  error: not closed
                                                            else:
                                                                return False
                                                        #  has gotolerate
                                                        elif self.peek_next_token() == "Gotolerate":
                                                            self.match("Gotolerate")
                                                            #  must be followed by '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_void_function_definition_statement()  # body
                                                                #  close it
                                                                if self.peek_next_token() == "]":
                                                                    self.match("]")
                                                                #  error: not closed
                                                                else:
                                                                    return False
                                                            #  error: not followed by '['
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                # or add another size to become 2D array
                                                elif self.peek_next_token() == "{":
                                                    self.match_arrID2D_index_parameter("{")
                                                    #  check: if closed, single 2D array
                                                    if self.peek_next_token() == ")":
                                                        self.match(")")
                                                        #  followed it with '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition_statement()  # body
                                                            #  close it
                                                            if self.peek_next_token() == "]":
                                                                self.match("]")
                                                            #  error: not closed
                                                            else:
                                                                return False
                                                        #  has gotolerate
                                                        elif self.peek_next_token() == "Gotolerate":
                                                            self.match("Gotolerate")
                                                            #  must be followed by '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_void_function_definition_statement()  # body
                                                                #  close it
                                                                if self.peek_next_token() == "]":
                                                                    self.match("]")
                                                                #  error: not closed
                                                                else:
                                                                    return False
                                                            #  error: not followed by '['
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                                    elif self.peek_next_token() == ",":
                                                        self.match_param_assign_mult(",")
                                                        #  close with ')' after assigning value/s
                                                        if self.peek_next_token() == ")":
                                                            self.match(")")
                                                            #  followed by '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_void_function_definition_statement()  # body
                                                                #  close it
                                                                if self.peek_next_token() == "]":
                                                                    self.match("]")
                                                                #  error: not closed
                                                                else:
                                                                    return False
                                                            #  has gotolerate
                                                            elif self.peek_next_token() == "Gotolerate":
                                                                self.match("Gotolerate")
                                                                #  must be followed by '['
                                                                if self.peek_next_token() == "[":
                                                                    self.parse_void_function_definition_statement()  # body
                                                                    #  close it
                                                                    if self.peek_next_token() == "]":
                                                                        self.match("]")
                                                                    #  error: not closed
                                                                    else:
                                                                        return False
                                                                #  error: not followed by '['
                                                                else:
                                                                    self.errors.append(
                                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                            #  error: not followed by '['
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                            #  not closed with '}'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                        #  size is single value
                                        elif self.peek_next_token() == "}":
                                            self.match("}")
                                            #  check: if closed, single 1D array (size is single value)
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition_statement()  # body
                                                            #  close it
                                                            if self.peek_next_token() == "]":
                                                                self.match("]")
                                                            #  error: not closed
                                                            else:
                                                                return False
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            # or add another size to become 2D array
                                            elif self.peek_next_token() == "{":
                                                self.match_arrID2D_index_parameter("{")
                                                #  check: if closed, single 1D array (size is single value)
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  followed it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition_statement()  # body
                                                            #  close it
                                                            if self.peek_next_token() == "]":
                                                                self.match("]")
                                                            #  error: not closed
                                                            else:
                                                                return False
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                                elif self.peek_next_token() == ",":
                                                    self.match_param_assign_mult(",")
                                                    #  close with ')' after assigning value/s
                                                    if self.peek_next_token() == ")":
                                                        self.match(")")
                                                        #  followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition_statement()  # body
                                                            #  close it
                                                            if self.peek_next_token() == "]":
                                                                self.match("]")
                                                            #  error: not closed
                                                            else:
                                                                return False
                                                        #  has gotolerate
                                                        elif self.peek_next_token() == "Gotolerate":
                                                            self.match("Gotolerate")
                                                            #  must be followed by '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_void_function_definition_statement()  # body
                                                                #  close it
                                                                if self.peek_next_token() == "]":
                                                                    self.match("]")
                                                                #  error: not closed
                                                                else:
                                                                    return False
                                                            #  error: not followed by '['
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by an equal
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by an equal
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                        #  size value is not followed by any of the following (# and Rcurl)
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                                    #  empty size, proceed to close it with '}'
                                    elif self.peek_next_token() == "}":
                                        self.match("}")
                                        #  check: if closed, single 1D array (size is empty)
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_void_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        # or add another size to become 2D array
                                        elif self.peek_next_token() == "{":
                                            self.match_arrID2D_index_parameter("{")
                                            #  check: if closed, single 2D array
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition_statement()  # body
                                                            #  close it
                                                            if self.peek_next_token() == "]":
                                                                self.match("]")
                                                            #  error: not closed
                                                            else:
                                                                return False
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by an equal
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by an equal
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                                elif self.peek_next_token() == "=":
                                    self.match_param_assign("=")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  follow it with '['
                                        if self.peek_next_token() == "[":
                                            self.parse_void_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_void_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  error: not closed
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                                #  check: if closed, single id no value
                                elif self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed it with '['
                                    if self.peek_next_token() == "[":
                                        self.parse_void_function_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            return False
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_void_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_void_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_void_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  unexpected end: no ')' to close, or comma to followed by, or (=) to assign values
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                            #  error: no identifier after the datatype
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                        #  no datatype after static
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Sun', 'Luhman', 'Boolean', 'Starsys', but instead got '{self.peek_next_token()}'")
                    # has parameter path
                    elif (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                            or self.peek_next_token() == "Boolean" or self.peek_next_token() == "Starsys"):
                        self.match(Resources.Datatype2)
                        # SEMANTIC CHECK
                        self.parameter_datatype = self.peek_previous_token()

                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.match("Identifier")
                            # SEMANTIC CHECK
                            self.parameter_var_name = self.peek_previous_lexeme()
                            if not self.function_exist:
                                self.declare_parameter_variable(self.function_datatype, self.function_name, self.parameter_datatype,
                                                                self.parameter_var_name)
                            #  parameter is an array index path (static)
                            if self.peek_next_token() == "{":
                                self.match("{")  # consume
                                #  array index assign path
                                if (re.match(r'Identifier\d*$', self.peek_next_token())
                                        or self.peek_next_token() == "SunLiteral"):
                                    self.match(Resources.Value3)  # consume the values
                                    #  size expression
                                    if (
                                            self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                            or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                        self.match_mathop3(Resources.mathop1)  # size is a math expr
                                        #  close it with "}" if size is fulfilled
                                        if self.peek_next_token() == "}":
                                            self.match("}")
                                            #  check: if closed, single 1D array
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition_statement()  # body
                                                            #  close it
                                                            if self.peek_next_token() == "]":
                                                                self.match("]")
                                                            #  error: not closed
                                                            else:
                                                                return False
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            # or add another size to become 2D array
                                            elif self.peek_next_token() == "{":
                                                self.match_arrID2D_index_parameter("{")
                                                #  check: if closed, single 2D array
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  followed it with '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition_statement()  # body
                                                            #  close it
                                                            if self.peek_next_token() == "]":
                                                                self.match("]")
                                                            #  error: not closed
                                                            else:
                                                                return False
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                                elif self.peek_next_token() == ",":
                                                    self.match_param_assign_mult(",")
                                                    #  close with ')' after assigning value/s
                                                    if self.peek_next_token() == ")":
                                                        self.match(")")
                                                        #  followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition_statement()  # body
                                                            #  close it
                                                            if self.peek_next_token() == "]":
                                                                self.match("]")
                                                            #  error: not closed
                                                            else:
                                                                return False
                                                        #  has gotolerate
                                                        elif self.peek_next_token() == "Gotolerate":
                                                            self.match("Gotolerate")
                                                            #  must be followed by '['
                                                            if self.peek_next_token() == "[":
                                                                self.parse_void_function_definition_statement()  # body
                                                                #  close it
                                                                if self.peek_next_token() == "]":
                                                                    self.match("]")
                                                                #  error: not closed
                                                                else:
                                                                    return False
                                                            #  error: not followed by '['
                                                            else:
                                                                self.errors.append(
                                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                        #  not closed with '}'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                    #  size is single value
                                    elif self.peek_next_token() == "}":
                                        self.match("}")
                                        #  check: if closed, single 1D array (size is single value)
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_void_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        # or add another size to become 2D array
                                        elif self.peek_next_token() == "{":
                                            self.match_arrID2D_index_parameter("{")
                                            #  check: if closed, single 1D array (size is single value)
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_void_function_definition_statement()  # body
                                                            #  close it
                                                            if self.peek_next_token() == "]":
                                                                self.match("]")
                                                            #  error: not closed
                                                            else:
                                                                return False
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by an equal
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by an equal
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                    #  size value is not followed by any of the following (# and Rcurl)
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                                #  empty size, proceed to close it with '}'
                                elif self.peek_next_token() == "}":
                                    self.match("}")
                                    #  check: if closed, single 1D array (size is empty)
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '['
                                        if self.peek_next_token() == "[":
                                            self.parse_void_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_void_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_void_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  check: if closed, single 2D array
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_void_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_void_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_void_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by an equal
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                            elif self.peek_next_token() == "=":
                                self.match_param_assign("=")
                                #  close with ')' after assigning value/s
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  follow '['
                                    if self.peek_next_token() == "[":
                                        self.parse_void_function_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            return False
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_void_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  error: not closed
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                            #  check: if closed, single id no value
                            elif self.peek_next_token() == ")":
                                self.match(")")
                                #  followed by '['
                                if self.peek_next_token() == "[":
                                    self.parse_void_function_definition_statement()  # body
                                    #  close it
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                    #  error: not closed
                                    else:
                                        return False
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  must be followed by '['
                                    if self.peek_next_token() == "[":
                                        self.parse_void_function_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            return False
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '['
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            #  single id is followed by a comma
                            elif self.peek_next_token() == ",":
                                self.match_param_assign_mult(",")
                                #  close with ')' after assigning value/s
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed by '['
                                    if self.peek_next_token() == "[":
                                        self.parse_void_function_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            return False
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_void_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            #  unexpected end: no ')' to close, or comma to followed by, or (=) to assign values
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                        #  error: no identifier after the datatype
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  no parameter
                    elif self.peek_next_token() == ")":
                        self.match(")")
                        # SEMANTIC CHECK
                        self.parameter_datatype = "null"
                        # SEMANTIC CHECK
                        self.parameter_var_name = "null"
                        if not self.function_exist:
                            self.declare_parameter_variable(self.function_datatype, self.function_name,
                                                            self.parameter_datatype, self.parameter_var_name)
                        self.compare_function_parameters(self.function_name)

                        #  must be followed by '['
                        if self.peek_next_token() == "[":
                            self.parse_void_function_definition_statement()  # body
                            #  close it
                            if self.peek_next_token() == "]":
                                self.match("]")
                            #  error: not closed
                            else:
                                return False
                        #  has gotolerate
                        elif self.peek_next_token() == "Gotolerate":
                            self.match("Gotolerate")
                            #  must be followed by '['
                            if self.peek_next_token() == "[":
                                self.parse_void_function_definition_statement()  # body
                                #  close it
                                if self.peek_next_token() == "]":
                                    self.match("]")
                                #  error: not closed
                                else:
                                    return False
                            #  error: not followed by '['
                            else:
                                self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by '['
                        else:
                            self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  error: not followed by an identifier
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
        #  error: unknown datatypes
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Syntax error: Expected 'Void', but instead got '{self.peek_next_token()}'")

    def match_subfunc_statement(self, expected_token):
        # SEMANTIC CHECK
        self.function_name = self.peek_previous_lexeme()
        # Check if the function_name already exists in the parameter_table
        if self.function_name in self.parameter_table:
            self.errors.append(
                f"(Line {self.line_number}) | Semantic Error: (Redeclaration Error) Function '{self.function_name}' is already defined.")
            self.function_exist = True

        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "(":
            if self.peek_next_token() == "Static":
                self.match("Static")
                # has parameter path
                if (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                        or self.peek_next_token() == "Boolean" or self.peek_next_token() == "Starsys"):
                    self.match(Resources.Datatype2)
                    # SEMANTIC CHECK
                    self.parameter_datatype = self.peek_previous_lexeme()

                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.match("Identifier")
                        # SEMANTIC CHECK
                        self.parameter_var_name = self.peek_previous_lexeme()
                        if not self.function_exist:
                            self.declare_parameter_variable(self.function_datatype, self.function_name,
                                                            self.parameter_datatype,
                                                            self.parameter_var_name)

                        #  parameter is an array index path (static)
                        if self.peek_next_token() == "{":
                            self.match("{")  # consume
                            #  array index assign path
                            if (re.match(r'Identifier\d*$', self.peek_next_token())
                                    or self.peek_next_token() == "SunLiteral"):
                                self.match(Resources.Value3)  # consume the values
                                #  size expression
                                if (
                                        self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                                    #  close it with "}" if size is fulfilled
                                    if self.peek_next_token() == "}":
                                        self.match("}")
                                        #  check: if closed, single 1D array
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement() # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        # or add another size to become 2D array
                                        elif self.peek_next_token() == "{":
                                            self.match_arrID2D_index_parameter("{")
                                            #  check: if closed, single 2D array
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed it with '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  must be followed by '['
                                                        if self.peek_next_token() == "[":
                                                            self.parse_sub_function_definition_statement()  # body
                                                            #  close it
                                                            if self.peek_next_token() == "]":
                                                                self.match("]")
                                                            #  error: not closed
                                                            else:
                                                                return False
                                                        #  error: not followed by '['
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                    #  not closed with '}'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                #  size is single value
                                elif self.peek_next_token() == "}":
                                    self.match("}")
                                    #  check: if closed, single 1D array (size is single value)
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  check: if closed, single 1D array (size is single value)
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by an equal
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  size value is not followed by any of the following (# and Rcurl)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                            #  empty size, proceed to close it with '}'
                            elif self.peek_next_token() == "}":
                                self.match("}")
                                #  check: if closed, single 1D array (size is empty)
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed it with '['
                                    if self.peek_next_token() == "[":
                                        self.parse_sub_function_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            return False
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  check: if closed, single 2D array
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by an equal
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                        #  equals, assign value to the parameter path (static)
                        elif self.peek_next_token() == "=":
                            self.match_param_assign("=")
                            #  close with ')' after assigning value/s
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  follow it with '['
                                if self.peek_next_token() == "[":
                                    self.parse_sub_function_definition_statement()  # body
                                    #  close it
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                    #  error: not closed
                                    else:
                                        return False
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  must be followed by '['
                                    if self.peek_next_token() == "[":
                                        self.parse_sub_function_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            return False
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                #  error: not followed
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  check: if closed, single id no value
                        elif self.peek_next_token() == ")":
                            self.match(")")
                            #  followed it with '['
                            if self.peek_next_token() == "[":
                                self.parse_sub_function_definition_statement()  # body
                                #  close it
                                if self.peek_next_token() == "]":
                                    self.match("]")
                                #  error: not closed
                                else:
                                    return False
                            #  has gotolerate
                            elif self.peek_next_token() == "Gotolerate":
                                self.match("Gotolerate")
                                #  must be followed by '['
                                if self.peek_next_token() == "[":
                                    self.parse_sub_function_definition_statement()  # body
                                    #  close it
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                    #  error: not closed
                                    else:
                                        return False
                                #  error: not followed by '['
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by '['
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                        #  single id is followed by a comma
                        elif self.peek_next_token() == ",":
                            self.match_param_assign_mult(",")
                            #  close with ')' after assigning value/s
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  followed by '['
                                if self.peek_next_token() == "[":
                                    self.parse_sub_function_definition_statement()  # body
                                    #  close it
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                    #  error: not closed
                                    else:
                                        return False
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  must be followed by '['
                                    if self.peek_next_token() == "[":
                                        self.parse_sub_function_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            return False
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '['
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                        #  unexpected end: no ')' to close, or comma to followed by, or (=) to assign values
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                    #  error: no identifier after the datatype
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                #  no datatype after static
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Sun', 'Luhman', 'Boolean', 'Starsys', but instead got '{self.peek_next_token()}'")
            # has parameter path
            elif (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                  or self.peek_next_token() == "Boolean" or self.peek_next_token() == "Starsys"):
                self.match(Resources.Datatype2)
                # SEMANTIC CHECK
                self.parameter_datatype = self.peek_previous_token()

                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.match("Identifier")
                    # SEMANTIC CHECK
                    self.parameter_var_name = self.peek_previous_lexeme()
                    if not self.function_exist:
                        self.declare_parameter_variable(self.function_datatype, self.function_name, self.parameter_datatype,
                                                        self.parameter_var_name)

                    #  parameter is an array index path
                    if self.peek_next_token() == "{":
                        self.match("{")  # consume
                        #  array index assign path
                        if (re.match(r'Identifier\d*$', self.peek_next_token())
                                or self.peek_next_token() == "SunLiteral"):
                            self.match(Resources.Value3)  # consume the values
                            #  size expression
                            if (
                                    self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                    or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                self.match_mathop3(Resources.mathop1)  # size is a math expr
                                #  close it with "}" if size is fulfilled
                                if self.peek_next_token() == "}":
                                    self.match("}")
                                    #  check: if closed, single 1D array
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  check: if closed, single 2D array
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed it with '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  must be followed by '['
                                                    if self.peek_next_token() == "[":
                                                        self.parse_sub_function_definition_statement()  # body
                                                        #  close it
                                                        if self.peek_next_token() == "]":
                                                            self.match("]")
                                                        #  error: not closed
                                                        else:
                                                            return False
                                                    #  error: not followed by '['
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  not closed with '}'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                            #  size is single value
                            elif self.peek_next_token() == "}":
                                self.match("}")
                                #  check: if closed, single 1D array (size is single value)
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed it with '['
                                    if self.peek_next_token() == "[":
                                        self.parse_sub_function_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            return False
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  check: if closed, single 1D array (size is single value)
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed it with '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  must be followed by '['
                                                if self.peek_next_token() == "[":
                                                    self.parse_sub_function_definition_statement()  # body
                                                    #  close it
                                                    if self.peek_next_token() == "]":
                                                        self.match("]")
                                                    #  error: not closed
                                                    else:
                                                        return False
                                                #  error: not followed by '['
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by an equal
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            #  size value is not followed by any of the following (# and Rcurl)
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                        #  empty size, proceed to close it with '}'
                        elif self.peek_next_token() == "}":
                            self.match("}")
                            #  check: if closed, single 1D array (size is empty)
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  followed it with '['
                                if self.peek_next_token() == "[":
                                    self.parse_sub_function_definition_statement()  # body
                                    #  close it
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                    #  error: not closed
                                    else:
                                        return False
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  must be followed by '['
                                    if self.peek_next_token() == "[":
                                        self.parse_sub_function_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            return False
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '['
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            #  single id is followed by a comma, (Static Sun a{1},.....)
                            elif self.peek_next_token() == ",":
                                self.match_param_assign_mult(",")
                                #  close with ')' after assigning value/s
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed by '['
                                    if self.peek_next_token() == "[":
                                        self.parse_sub_function_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            return False
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            # or add another size to become 2D array
                            elif self.peek_next_token() == "{":
                                self.match_arrID2D_index_parameter("{")
                                #  check: if closed, single 2D array
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  followed it with '['
                                    if self.peek_next_token() == "[":
                                        self.parse_sub_function_definition_statement()  # body
                                        #  close it
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not closed
                                        else:
                                            return False
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  must be followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '['
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  followed by '['
                                        if self.peek_next_token() == "[":
                                            self.parse_sub_function_definition_statement()  # body
                                            #  close it
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not closed
                                            else:
                                                return False
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  must be followed by '['
                                            if self.peek_next_token() == "[":
                                                self.parse_sub_function_definition_statement()  # body
                                                #  close it
                                                if self.peek_next_token() == "]":
                                                    self.match("]")
                                                #  error: not closed
                                                else:
                                                    return False
                                            #  error: not followed by '['
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '['
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by an equal
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by an equal
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                    elif self.peek_next_token() == "=":
                        self.match_param_assign("=")
                        #  close with ')' after assigning value/s
                        if self.peek_next_token() == ")":
                            self.match(")")
                            #  follow '['
                            if self.peek_next_token() == "[":
                                self.parse_sub_function_definition_statement()  # body
                                #  close it
                                if self.peek_next_token() == "]":
                                    self.match("]")
                                #  error: not closed
                                else:
                                    return False
                            #  has gotolerate
                            elif self.peek_next_token() == "Gotolerate":
                                self.match("Gotolerate")
                                #  must be followed by '['
                                if self.peek_next_token() == "[":
                                    self.parse_sub_function_definition_statement()  # body
                                    #  close it
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                    #  error: not closed
                                    else:
                                        return False
                                #  error: not followed by '['
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by '['
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                        #  error: not closed
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                    #  check: if closed, single id no value
                    elif self.peek_next_token() == ")":
                        self.match(")")
                        #  followed by '['
                        if self.peek_next_token() == "[":
                            self.parse_sub_function_definition_statement()  # body
                            #  close it
                            if self.peek_next_token() == "]":
                                self.match("]")
                            #  error: not closed
                            else:
                                return False
                        #  has gotolerate
                        elif self.peek_next_token() == "Gotolerate":
                            self.match("Gotolerate")
                            #  must be followed by '['
                            if self.peek_next_token() == "[":
                                self.parse_sub_function_definition_statement()  # body
                                #  close it
                                if self.peek_next_token() == "]":
                                    self.match("]")
                                #  error: not closed
                                else:
                                    return False
                            #  error: not followed by '['
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by '['
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                    #  single id is followed by a comma
                    elif self.peek_next_token() == ",":
                        self.match_param_assign_mult(",")
                        #  close with ')' after assigning value/s
                        if self.peek_next_token() == ")":
                            self.match(")")
                            #  followed by '['
                            if self.peek_next_token() == "[":
                                self.parse_sub_function_definition_statement()  # body
                                #  close it
                                if self.peek_next_token() == "]":
                                    self.match("]")
                                #  error: not closed
                                else:
                                    return False
                            #  has gotolerate
                            elif self.peek_next_token() == "Gotolerate":
                                self.match("Gotolerate")
                                #  must be followed by '['
                                if self.peek_next_token() == "[":
                                    self.parse_sub_function_definition_statement()  # body
                                    #  close it
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                    #  error: not closed
                                    else:
                                        return False
                                #  error: not followed by '['
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by '['
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                    #  unexpected end: no ')' to close, or comma to followed by, or (=) to assign values
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                #  error: no identifier after the datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            #  no parameter
            elif self.peek_next_token() == ")":
                self.match(")")
                # SEMANTIC CHECK
                self.parameter_datatype = "null"
                # SEMANTIC CHECK
                self.parameter_var_name = "null"
                if not self.function_exist:
                    self.declare_parameter_variable(self.function_datatype, self.function_name,
                                                    self.parameter_datatype, self.parameter_var_name)
                self.compare_function_parameters(self.function_name)

                #  must be followed by '['
                if self.peek_next_token() == "[":
                    self.parse_sub_function_definition_statement()  # body
                    #  close it
                    if self.peek_next_token() == "]":
                        self.match("]")
                    #  error: not closed
                    else:
                        return False
                #  has gotolerate
                elif self.peek_next_token() == "Gotolerate":
                    self.match("Gotolerate")
                    #  must be followed by '['
                    if self.peek_next_token() == "[":
                        self.parse_sub_function_definition_statement()  # body
                        #  close it
                        if self.peek_next_token() == "]":
                            self.match("]")
                        #  error: not closed
                        else:
                            return False
                    #  error: not followed by '['
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                #  error: not followed by '['
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '[', 'Gotolerate', but instead got '{self.peek_next_token()}'")
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '(', but instead got '{self.peek_next_token()}'")


    #  method for sub function definition (statement)
    def parse_sub_function_definition_statement(self):
        if self.peek_next_token() == "[":
            self.match("[")
            self.parse_statements()  # body
            if self.peek_next_token() == "]":
                return True  # close it
            # has return statement
            elif self.peek_next_token() == "Retrieve":
                self.match("Retrieve")  # consume Retrieve
                if (self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True"
                        or self.peek_next_token() == "False"):
                    self.match(Resources.ret_str_bool)  # consume values
                    #  terminate it
                    if self.peek_next_token() == "#":
                        self.match("#")  # consume terminator
                        #  close it with ']'
                        if self.peek_next_token() == "]":
                            return True
                        #  error: not followed by ']'
                        else:
                            return False
                    #  error: not terminated
                    else:
                        self.errors.append(
                            f"Syntax error: Expected '#' after {self.peek_previous_token()}")
                #  is it followed by an identifier, sunliteral, or luhmanliteral?
                elif re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral" \
                        or self.peek_next_token() == "LuhmanLiteral":
                    self.match(Resources.Value2)
                    #  return is an array index path
                    if self.peek_next_token() == "{":
                        self.match("{")  # consume
                        #  array index assign path
                        if (re.match(r'Identifier\d*$', self.peek_next_token())
                                or self.peek_next_token() == "SunLiteral"):
                            self.match(Resources.Value3)  # consume the values
                            #  size expression
                            if (
                                    self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                    or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                self.match_mathop3(Resources.mathop1)  # size is a math expr
                                #  close it with "}" if size is fulfilled
                                if self.peek_next_token() == "}":
                                    self.match("}")
                                    #  check: if terminated, single 1D array
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                        #  close it with ']'
                                        if self.peek_next_token() == "]":
                                            return True
                                        #  error: not followed by ']'
                                        else:
                                            return False
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  check: if terminated, single 2D array
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                            #  close it with ']'
                                            if self.peek_next_token() == "]":
                                                return True
                                            #  error: not followed by ']'
                                            else:
                                                return False
                                        #  error: not followed by a terminator
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '#' or '{'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  not closed with '}'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                            #  size is single value
                            elif self.peek_next_token() == "}":
                                self.match("}")
                                #  check: if terminated, single 1D array (size is single value)
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                    #  close it with ']'
                                    if self.peek_next_token() == "]":
                                        return True
                                    #  error: not followed by ']'
                                    else:
                                        return False
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  check: if terminated, single 1D array (size is single value)
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                        #  close it with ']'
                                        if self.peek_next_token() == "]":
                                            return True
                                        #  error: not followed by ']'
                                        else:
                                            return False
                                    #  error: not followed by a terminator
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by a terminator or '{'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            #  size value is not followed by any of the following (# and Rcurl)
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                        #  empty size, proceed to close it with '}'
                        elif self.peek_next_token() == "}":
                            self.match("}")
                            #  check: if terminated, single 1D array (size is single value)
                            if self.peek_next_token() == "#":
                                self.match("#")
                                #  close it with ']'
                                if self.peek_next_token() == "]":
                                    return True
                                #  error: not followed by ']'
                                else:
                                    return False
                            # or add another size to become 2D array
                            elif self.peek_next_token() == "{":
                                self.match_arrID2D_index_parameter("{")
                                #  check: if terminated, single 1D array (size is single value)
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                    #  close it with ']'
                                    if self.peek_next_token() == "]":
                                        return True
                                    #  error: not followed by ']'
                                    else:
                                        return False
                                #  error: not followed by a terminator
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by a terminator or '{'
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                        #  no following
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Idnetifier', 'SunLiteral', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                    # multiple return id?
                    if self.peek_next_token() == "," and re.match(r'Identifier\d*$', self.peek_previous_token()):
                        self.match(",")
                        # must be followed by another identifier
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.matchID_mult("Identifier")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")  # consume terminator
                                #  close it with ']'
                                if self.peek_next_token() == "]":
                                    return True
                                #  error: not followed by ']'
                                else:
                                    return False
                        #  error: not followed by an identifier
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  add it
                    if self.peek_next_token() == "+":
                        self.match_mathop2("+")
                        #  terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")  # consume terminator
                            #  close it with ']'
                            if self.peek_next_token() == "]":
                                return True
                            #  error: not followed by ']'
                            else:
                                return False
                        #  error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                    #  subtract it
                    elif self.peek_next_token() == "-":
                        self.match_mathop2("-")
                        #  terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")  # consume terminator
                            #  close it with ']'
                            if self.peek_next_token() == "]":
                                return True
                            #  error: not followed by ']'
                            else:
                                return False
                        #  error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                    #  multiply it
                    elif self.peek_next_token() == "*":
                        self.match_mathop2("*")
                        #  terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")  # consume terminator
                            #  close it with ']'
                            if self.peek_next_token() == "]":
                                return True
                            #  error: not followed by ']'
                            else:
                                return False
                        #  error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                    #  divide it
                    elif self.peek_next_token() == "/":
                        self.match_mathop2("/")
                        #  terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")  # consume terminator
                            #  close it with ']'
                            if self.peek_next_token() == "]":
                                return True
                            #  error: not followed by ']'
                            else:
                                return False
                        #  error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                    #  modulo it
                    elif self.peek_next_token() == "%":
                        self.match_mathop2("%")
                        #  terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")  # consume terminator
                            #  close it with ']'
                            if self.peek_next_token() == "]":
                                return True
                            #  error: not followed by ']'
                            else:
                                return False
                        #  error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                    #  exponentiate it
                    elif self.peek_next_token() == "**":
                        self.match_exponent2("**")
                        #  terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")  # consume terminator
                            #  close it with ']'
                            if self.peek_next_token() == "]":
                                return True
                            #  error: not followed by ']'
                            else:
                                return False
                        #  error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                    #  terminate it (single value)
                    elif self.peek_next_token() == "#":
                        self.match("#")  # consume terminator
                        #  close it with ']'
                        if self.peek_next_token() == "]":
                            return True
                        #  error: not followed by ']'
                        else:
                            return False
                    #  error: not followed by any mathops or a terminator
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', '+', '-', "
                            f"'*', '/', '%', '**', but instead got '{self.peek_next_token()}'")
                #  error: not followed by any of the values
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral', "
                        f"'StarsysLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
            elif self.peek_next_token() != "]" and (self.peek_previous_token() == "#" or self.peek_previous_token() == "]"or self.peek_previous_token() == "["):
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Retrieve', 'Sun', 'Luhman', 'Starsys', 'Boolean', 'Identifier', 'Class', 'ISS', 'Void', but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")

    #  method for void function definition (statement)
    def parse_void_function_definition_statement(self):
        if self.peek_next_token() == "[":
            self.match("[")
            self.parse_statements()  # body
            if self.peek_next_token() == "]":
                return True  # close it
            #  unexpected end
            elif self.peek_next_token() != "]" and (self.peek_previous_token() == "#" or self.peek_previous_token() == "]" or self.peek_previous_token() == "["):
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Sun', 'Luhman', 'Starsys', 'Boolean', 'Identifier', 'Class', 'ISS', 'Void', but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")

    #  method for constructor definition (statement)
    def parse_constructor_definition_statement(self):
        if self.peek_next_token() == "[":
            self.match("[")
            self.parse_statements1()  # body

            if self.peek_next_token() == "]":
                return True  # close it
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")

    #  method for void function definition
    def parse_void_function_definition(self):
        if self.peek_next_token() == "[":
            self.match("[")
            self.parse_statements()  # body

            if self.peek_next_token() == "]":
                self.match("]")
                #  disintegrate if done
                if self.peek_next_token() == "Disintegrate":
                    return True
                # has another subfunction/s
                elif (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                      or self.peek_next_token() == "Starsys" or self.peek_next_token() == "Boolean"):
                    self.match_subfunc(Resources.Datatype2)  # consume datatypes
                #  void function is next
                elif self.peek_next_token() == "Void":
                    self.match_voidfunc("Void")
                #  has class next
                elif self.peek_next_token() == "Class":
                    self.match_class("Class")
                #  no next
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Disintegrate', 'Sun', 'Luhman',"
                                       f"'Starsys', 'Boolean', 'Class', 'Void', but instead got '{self.peek_next_token()}'")
            #  unexpected end
            elif self.peek_next_token() != "]" and (self.peek_previous_token() == "#" or self.peek_previous_token() == "]" or self.peek_previous_token() == "["):
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Sun', 'Luhman', 'Starsys', 'Boolean', 'Identifier', 'Class', 'ISS', 'Void', but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")

    #  method for sub function definition
    def parse_sub_function_definition(self):
        if self.peek_next_token() == "[":
            self.match("[")
            self.parse_statements()  # body
            # has return statement
            if self.peek_next_token() == "Retrieve":
                self.match_return("Retrieve")  # consume Retrieve
                #  close it with ']'
                if self.peek_next_token() == "]":
                    self.match("]")
                    #  disintegrate if done
                    if self.peek_next_token() == "Disintegrate":
                        return True
                    # has another subfunction/s
                    elif (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                          or self.peek_next_token() == "Starsys" or self.peek_next_token() == "Boolean"):
                        self.match_subfunc(Resources.Datatype2)  # consume datatypes
                    #  void function is next
                    elif self.peek_next_token() == "Void":
                        self.match_voidfunc("Void")
                    #  has class next
                    elif self.peek_next_token() == "Class":
                        self.match_class("Class")
                    #  no next
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Disintegrate', 'Sun', 'Luhman',"
                                           f"'Starsys', 'Boolean', 'Class', 'Void', but instead got '{self.peek_next_token()}'")
                #  not closed
                elif self.peek_next_token() != "]" and (self.peek_previous_token() == "#" or self.peek_previous_token() == "]" or self.peek_previous_token() == "["):
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
            elif self.peek_next_token() == "]":
                self.match("]")
                #  disintegrate if done
                if self.peek_next_token() == "Disintegrate":
                    return True
                # has another subfunction/s
                elif (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                          or self.peek_next_token() == "Starsys" or self.peek_next_token() == "Boolean"):
                    self.match_subfunc(Resources.Datatype2)  # consume datatypes
                #  void function is next
                elif self.peek_next_token() == "Void":
                    self.match_voidfunc("Void")
                #  has class next
                elif self.peek_next_token() == "Class":
                    self.match_class("Class")
                #  no next
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Disintegrate', 'Sun', 'Luhman',"
                                       f"'Starsys', 'Boolean', 'Class', 'Void', but instead got '{self.peek_next_token()}'")
            elif self.peek_next_token() != "]" and (self.peek_previous_token() == "#" or self.peek_previous_token() == "]" or self.peek_previous_token() == "["):
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Retrieve', 'Sun', 'Luhman', 'Starsys', 'Boolean', 'Identifier', 'Void', 'Class', 'ISS' but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")

    #  method for return statement
    def match_return(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "Retrieve":
            #  is it followed by a boolean value or a starsysliteral?
            if (self.peek_next_token() == "StarsysLiteral" or self.peek_next_token() == "True"
                    or self.peek_next_token() == "False"):
                self.match(Resources.ret_str_bool)  # consume values
                #  terminate it
                if self.peek_next_token() == "#":
                    self.match("#")  # consume terminator
                    #  close it with ']'
                    if self.peek_next_token() == "]":
                        return True
                    #  error: not followed by ']'
                    else:
                        return False
                #  error: not terminated
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#' after {self.peek_previous_token()}")
            #  is it followed by an identifier, sunliteral, or luhmanliteral?
            elif re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral"\
                    or self.peek_next_token() == "LuhmanLiteral":
                self.match(Resources.Value2)  # consume values
                #  return is an array index path
                if self.peek_next_token() == "{":
                    self.match("{")  # consume
                    #  array index assign path
                    if (re.match(r'Identifier\d*$', self.peek_next_token())
                            or self.peek_next_token() == "SunLiteral"):
                        self.match(Resources.Value3)  # consume the values
                        #  size expression
                        if (
                                self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                            self.match_mathop3(Resources.mathop1)  # size is a math expr
                            #  close it with "}" if size is fulfilled
                            if self.peek_next_token() == "}":
                                self.match("}")
                                #  check: if terminated, single 1D array
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                    #  close it with ']'
                                    if self.peek_next_token() == "]":
                                        return True
                                    #  error: not followed by ']'
                                    else:
                                        return False
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  check: if terminated, single 2D array
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                        #  close it with ']'
                                        if self.peek_next_token() == "]":
                                            return True
                                        #  error: not followed by ']'
                                        else:
                                            return False
                                    #  error: not followed by a terminator
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '#' or '{'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            #  not closed with '}'
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                        #  size is single value
                        elif self.peek_next_token() == "}":
                            self.match("}")
                            #  check: if terminated, single 1D array (size is single value)
                            if self.peek_next_token() == "#":
                                self.match("#")
                                #  close it with ']'
                                if self.peek_next_token() == "]":
                                    return True
                                #  error: not followed by ']'
                                else:
                                    return False
                            # or add another size to become 2D array
                            elif self.peek_next_token() == "{":
                                self.match_arrID2D_index_parameter("{")
                                #  check: if terminated, single 1D array (size is single value)
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                    #  close it with ']'
                                    if self.peek_next_token() == "]":
                                        return True
                                    #  error: not followed by ']'
                                    else:
                                        return False
                                #  error: not followed by a terminator
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by a terminator or '{'
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                        #  size value is not followed by any of the following (# and Rcurl)
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  empty size, proceed to close it with '}'
                    elif self.peek_next_token() == "}":
                        self.match("}")
                        #  check: if terminated, single 1D array (size is single value)
                        if self.peek_next_token() == "#":
                            self.match("#")
                            #  close it with ']'
                            if self.peek_next_token() == "]":
                                return True
                            #  error: not followed by ']'
                            else:
                                return False
                        # or add another size to become 2D array
                        elif self.peek_next_token() == "{":
                            self.match_arrID2D_index_parameter("{")
                            #  check: if terminated, single 1D array (size is single value)
                            if self.peek_next_token() == "#":
                                self.match("#")
                                #  close it with ']'
                                if self.peek_next_token() == "]":
                                    return True
                                #  error: not followed by ']'
                                else:
                                    return False
                            #  error: not followed by a terminator
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by a terminator or '{'
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                    #  no following
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Idnetifier', 'SunLiteral', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                # multiple return id?
                elif self.peek_next_token() == "," and re.match(r'Identifier\d*$', self.peek_previous_token()):
                    self.match(",")
                    # must be followed by another identifier
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.matchID_mult("Identifier")
                        #  terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")  # consume terminator
                            #  close it with ']'
                            if self.peek_next_token() == "]":
                                return True
                            #  error: not followed by ']'
                            else:
                                return False
                    #  error: not followed by an identifier
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                #  add it
                elif self.peek_next_token() == "+":
                    self.match_mathop2("+")
                    #  terminate it
                    if self.peek_next_token() == "#":
                        self.match("#")  # consume terminator
                        #  close it with ']'
                        if self.peek_next_token() == "]":
                            return True
                        #  error: not followed by ']'
                        else:
                            return False
                    #  error: not terminated
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                #  subtract it
                elif self.peek_next_token() == "-":
                    self.match_mathop2("-")
                    #  terminate it
                    if self.peek_next_token() == "#":
                        self.match("#")  # consume terminator
                        #  close it with ']'
                        if self.peek_next_token() == "]":
                            return True
                        #  error: not followed by ']'
                        else:
                            return False
                    #  error: not terminated
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                #  multiply it
                elif self.peek_next_token() == "*":
                    self.match_mathop2("*")
                    #  terminate it
                    if self.peek_next_token() == "#":
                        self.match("#")  # consume terminator
                        #  close it with ']'
                        if self.peek_next_token() == "]":
                            return True
                        #  error: not followed by ']'
                        else:
                            return False
                    #  error: not terminated
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                #  divide it
                elif self.peek_next_token() == "/":
                    self.match_mathop2("/")
                    #  terminate it
                    if self.peek_next_token() == "#":
                        self.match("#")  # consume terminator
                        #  close it with ']'
                        if self.peek_next_token() == "]":
                            return True
                        #  error: not followed by ']'
                        else:
                            return False
                    #  error: not terminated
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                #  modulo it
                elif self.peek_next_token() == "%":
                    self.match_mathop2("%")
                    #  terminate it
                    if self.peek_next_token() == "#":
                        self.match("#")  # consume terminator
                        #  close it with ']'
                        if self.peek_next_token() == "]":
                            return True
                        #  error: not followed by ']'
                        else:
                            return False
                    #  error: not terminated
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                #  exponentiate it
                elif self.peek_next_token() == "**":
                    self.match_exponent2("**")
                    #  terminate it
                    if self.peek_next_token() == "#":
                        self.match("#")  # consume terminator
                        #  close it with ']'
                        if self.peek_next_token() == "]":
                            return True
                        #  error: not followed by ']'
                        else:
                            return False
                    #  error: not terminated
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                #  terminate it (single value)
                elif self.peek_next_token() == "#":
                    self.match("#")  # consume terminator
                    #  close it with ']'
                    if self.peek_next_token() == "]":
                        return True
                    #  error: not followed by ']'
                    else:
                        return False
                #  error: not followed by any mathops or a terminator
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', '+', '-', "
                        f"'*', '/', '%', '**', but instead got '{self.peek_next_token()}'")
            elif self.peek_next_token() == "(":
                self.match_parenth("(")
                #  terminate it
                if self.peek_next_token() == "#":
                    self.match("#")  # consume terminator
                    #  close it with ']'
                    if self.peek_next_token() == "]":
                        return True
                    #  error: not followed by ']'
                    else:
                        return False
                #  not terminated
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
            #  error: not followed by any of the values
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral', "
                    f"'StarsysLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
        #  next token is not Retrieve
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Syntax error: Expected 'Retrieve'")

    # method for sub function prototype
    def parse_sub_function_ptype(self):
        # SEMANTIC CHECK
        self.prototype_function_name = self.peek_previous_lexeme()
        # Check if the function_name already exists in the parameter_table
        if self.prototype_function_name in self.prototype_parameter_table:
            self.errors.append(
                f"(Line {self.line_number}) | Semantic Error: (Redeclaration Error) Function '{self.prototype_function_name}' is already declared.")
            self.prototype_function_exist = True

        if self.peek_next_token() == "(":
            self.match("(")
            # static
            if self.peek_next_token() == "Static":
                self.match("Static")
                # has parameter path
                if (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                        or self.peek_next_token() == "Boolean" or self.peek_next_token() ==  "Starsys"):
                    self.match(Resources.Datatype2)
                    # SEMANTIC CHECK
                    self.prototype_parameter_datatype = self.peek_previous_lexeme()

                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.match("Identifier")
                        # SEMANTIC CHECK
                        self.prototype_function_parameter_var = self.peek_previous_lexeme()
                        self.prototype_parameter_var_name = self.peek_previous_lexeme()
                        if not self.prototype_function_exist:
                            self.declare_prototype_parameter_variable(self.prototype_function_datatype,
                                                                      self.prototype_function_name,
                                                                      self.prototype_parameter_datatype,
                                                                      self.prototype_parameter_var_name)
                        
                        #  parameter is an array index path
                        if self.peek_next_token() == "{":
                            self.match("{")  # consume
                            #  array index assign path
                            if (re.match(r'Identifier\d*$', self.peek_next_token())
                                    or self.peek_next_token() == "SunLiteral"):
                                self.match(Resources.Value3)  # consume the values
                                #  size expression
                                if (
                                        self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                        or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                    self.match_mathop3(Resources.mathop1)  # size is a math expr
                                    #  close it with "}" if size is fulfilled
                                    if self.peek_next_token() == "}":
                                        self.match("}")
                                        #  check: if closed, single 1D array
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                # error: not terminated
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#'
                                            else:

                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult_prototype(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  terminate it
                                                    if self.peek_next_token() == "#":
                                                        self.match("#")
                                                    # error: not terminated
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '#'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        # or add another size to become 2D array
                                        elif self.peek_next_token() == "{":
                                            self.match_arrID2D_index_parameter("{")
                                            #  check: if closed, single 2D array
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  terminate it
                                                    if self.peek_next_token() == "#":
                                                        self.match("#")
                                                    # error: not terminated
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '#'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  single id is followed by a comma, (Static Sun a{1},.....)
                                            elif self.peek_next_token() == ",":
                                                self.match_param_assign_mult_prototype(",")
                                                #  close with ')' after assigning value/s
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  terminate it
                                                    if self.peek_next_token() == "#":
                                                        self.match("#")
                                                    #  has gotolerate
                                                    elif self.peek_next_token() == "Gotolerate":
                                                        self.match("Gotolerate")
                                                        #  terminate it
                                                        if self.peek_next_token() == "#":
                                                            self.match("#")
                                                        # error: not terminated
                                                        else:
                                                            self.errors.append(
                                                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                                    #  error: not followed by '#'
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                    #  not closed with '}'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                                #  size is single value
                                elif self.peek_next_token() == "}":
                                    self.match("}")
                                    #  check: if closed, single 1D array (size is single value)
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            # error: not terminated
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult_prototype(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                # error: not terminated
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  check: if closed, single 1D array (size is single value)
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                # error: not terminated
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult_prototype(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  terminate it
                                                    if self.peek_next_token() == "#":
                                                        self.match("#")
                                                    # error: not terminated
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '#'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by an equal
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  size value is not followed by any of the following (# and Rcurl)
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                            #  empty size, proceed to close it with '}'
                            elif self.peek_next_token() == "}":
                                self.match("}")
                                #  check: if closed, single 1D array (size is empty)
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        # error: not terminated
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '#'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult_prototype(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            # error: not terminated
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  check: if closed, single 2D array
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            # error: not terminated
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult_prototype(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                # error: not terminated
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by an equal
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                        #  equals, assign value to the parameter path (static)
                        elif self.peek_next_token() == "=":
                            self.isPrototype = True
                            self.match_param_assign("=")
                            #  close with ')' after assigning value/s
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    # error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '#'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  check: if closed, single id no value
                        elif self.peek_next_token() == ")":
                            self.match(")")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  has gotolerate
                            elif self.peek_next_token() == "Gotolerate":
                                self.match("Gotolerate")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                # error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by '#'
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                        #  single id is followed by a comma
                        elif self.peek_next_token() == ",":
                            self.match_param_assign_mult_prototype(",")
                            #  close with ')' after assigning value/s
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    # error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '#'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                        elif self.peek_next_token() == "=":
                            self.isPrototype = True
                            self.match_param_assign("=")
                            #  close with ')' after assigning value/s
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  must be followed by '#'
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            #  error: not closed
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  check: if closed, single id no value
                        elif self.peek_next_token() == ")":
                            self.match(")")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  has gotolerate
                            elif self.peek_next_token() == "Gotolerate":
                                self.match("Gotolerate")
                                #  must be followed by '#'
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                        #  single id is followed by a comma
                        elif self.peek_next_token() == ",":
                            self.match_param_assign_mult_prototype(",")
                            #  close with ')' after assigning value/s
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  must be followed by '#'
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                        #  unexpected end: no ')' to close, or comma to followed by, or (=) to assign values
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                    #  error: no identifier after the datatype
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                #  no datatype after static
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Sun', 'Luhman', 'Boolean', 'Starsys', but instead got '{self.peek_next_token()}'")
            # has parameter path (non static)
            elif (self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman"
                        or self.peek_next_token() == "Boolean" or self.peek_next_token() ==  "Starsys"):
                self.match(Resources.Datatype2)
                # SEMANTIC CHECK
                self.prototype_parameter_datatype = self.peek_previous_token()

                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.match("Identifier")
                    # SEMANTIC CHECK
                    self.prototype_function_parameter_var = self.peek_previous_lexeme()
                    self.prototype_parameter_var_name = self.peek_previous_lexeme()
                    if not self.prototype_function_exist:
                        self.declare_prototype_parameter_variable(self.prototype_function_datatype, self.prototype_function_name, self.prototype_parameter_datatype,
                                                        self.prototype_parameter_var_name)

                    #  parameter is an array index path
                    if self.peek_next_token() == "{":
                        self.match("{")  # consume
                        #  array index assign path
                        if (re.match(r'Identifier\d*$', self.peek_next_token())
                                or self.peek_next_token() == "SunLiteral"):
                            self.match(Resources.Value3)  # consume the values
                            #  size expression
                            if (
                                    self.peek_next_token() == "+" or self.peek_next_token() == "-" or self.peek_next_token() == "*"
                                    or self.peek_next_token() == "/" or self.peek_next_token() == "%"):
                                self.match_mathop3(Resources.mathop1)  # size is a math expr
                                #  close it with "}" if size is fulfilled
                                if self.peek_next_token() == "}":
                                    self.match("}")
                                    #  check: if closed, single 1D array
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            # error: not terminated
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult_prototype(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                # error: not terminated
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    # or add another size to become 2D array
                                    elif self.peek_next_token() == "{":
                                        self.match_arrID2D_index_parameter("{")
                                        #  check: if closed, single 2D array
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                # error: not terminated
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  single id is followed by a comma, (Static Sun a{1},.....)
                                        elif self.peek_next_token() == ",":
                                            self.match_param_assign_mult_prototype(",")
                                            #  close with ')' after assigning value/s
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  has gotolerate
                                                elif self.peek_next_token() == "Gotolerate":
                                                    self.match("Gotolerate")
                                                    #  terminate it
                                                    if self.peek_next_token() == "#":
                                                        self.match("#")
                                                    # error: not terminated
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                                #  error: not followed by '#'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                                #  not closed with '}'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbrace', but instead got '{self.peek_next_token()}'")
                            #  size is single value
                            elif self.peek_next_token() == "}":
                                self.match("}")
                                #  check: if closed, single 1D array (size is single value)
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        # error: not terminated
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '#'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult_prototype(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            # error: not terminated
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                # or add another size to become 2D array
                                elif self.peek_next_token() == "{":
                                    self.match_arrID2D_index_parameter("{")
                                    #  check: if closed, single 1D array (size is single value)
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            # error: not terminated
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  single id is followed by a comma, (Static Sun a{1},.....)
                                    elif self.peek_next_token() == ",":
                                        self.match_param_assign_mult_prototype(",")
                                        #  close with ')' after assigning value/s
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  has gotolerate
                                            elif self.peek_next_token() == "Gotolerate":
                                                self.match("Gotolerate")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                # error: not terminated
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed by '#'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by an equal
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by an equal
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                            #  size value is not followed by any of the following (# and Rcurl)
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Rcurlbraces', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                        #  empty size, proceed to close it with '}'
                        elif self.peek_next_token() == "}":
                            self.match("}")
                            #  check: if closed, single 1D array (size is empty)
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  has gotolerate
                                elif self.peek_next_token() == "Gotolerate":
                                    self.match("Gotolerate")
                                    #  terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    # error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '#'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            #  single id is followed by a comma, (Static Sun a{1},.....)
                            elif self.peek_next_token() == ",":
                                self.match_param_assign_mult_prototype(",")
                                #  close with ')' after assigning value/s
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        # error: not terminated
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '#'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                            # or add another size to become 2D array
                            elif self.peek_next_token() == "{":
                                self.match_arrID2D_index_parameter("{")
                                #  check: if closed, single 2D array
                                if self.peek_next_token() == ")":
                                    self.match(")")
                                    #  terminate it
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                    #  has gotolerate
                                    elif self.peek_next_token() == "Gotolerate":
                                        self.match("Gotolerate")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        # error: not terminated
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by '#'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  single id is followed by a comma, (Static Sun a{1},.....)
                                elif self.peek_next_token() == ",":
                                    self.match_param_assign_mult_prototype(",")
                                    #  close with ')' after assigning value/s
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  has gotolerate
                                        elif self.peek_next_token() == "Gotolerate":
                                            self.match("Gotolerate")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            # error: not terminated
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed by '#'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by an equal
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected ',', ')', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by an equal
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected ',', 'Lcurlbraces', but instead got '{self.peek_next_token()}'")
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'SunLiteral', 'Identifier', 'Rcurlbraces', but instead got '{self.peek_next_token()}'")
                    elif self.peek_next_token() == "=":
                        self.isPrototype = True
                        self.match_param_assign("=")
                        #  close with ')' after assigning value/s
                        if self.peek_next_token() == ")":
                            self.match(")")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  has gotolerate
                            elif self.peek_next_token() == "Gotolerate":
                                self.match("Gotolerate")
                                #  must be followed by '#'
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                        #  error: not closed
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
                    #  check: if closed, single id no value
                    elif self.peek_next_token() == ")":
                        self.match(")")
                        #  terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                        #  has gotolerate
                        elif self.peek_next_token() == "Gotolerate":
                            self.match("Gotolerate")
                            #  must be followed by '#'
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                        #  error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                    #  single id is followed by a comma
                    elif self.peek_next_token() == ",":
                        self.match_param_assign_mult_prototype(",")
                        #  close with ')' after assigning value/s
                        if self.peek_next_token() == ")":
                            self.match(")")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                            #  has gotolerate
                            elif self.peek_next_token() == "Gotolerate":
                                self.match("Gotolerate")
                                #  must be followed by '#'
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
                    #  unexpected end: no ')' to close, or comma to followed by, or (=) to assign values
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected ')', ',', '=', but instead got '{self.peek_next_token()}'")
                #  error: no identifier after the datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            #  no parameter
            elif self.peek_next_token() == ")":
                self.match(")")
                # SEMANTIC CHECK
                self.prototype_parameter_datatype = "null"
                # SEMANTIC CHECK
                self.prototype_function_parameter_var = "null"
                self.prototype_parameter_var_name = "null"
                if not self.prototype_function_exist:
                    self.declare_prototype_parameter_variable(self.prototype_function_datatype,
                                                              self.prototype_function_name,
                                                              self.prototype_parameter_datatype,
                                                              self.prototype_parameter_var_name)
                if self.peek_next_token() == "[":
                    self.parse_main_function()  # it is a function main??
                elif self.peek_next_token() == "#":
                    self.match("#")
                #  has gotolerate
                elif self.peek_next_token() == "Gotolerate":
                    self.match("Gotolerate")
                    #  must be followed by '#'
                    if self.peek_next_token() == "#":
                        self.match("#")
                    #  error: not terminated
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '#', but instead got '{self.peek_next_token()}'")
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '#', 'Gotolerate', but instead got '{self.peek_next_token()}'")
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")

    #  method for function definition
    def parse_func_def(self):
        if self.peek_next_token() == "[":
            self.match("[")
            self.parse_statements_main()
            if self.peek_next_token() == "]":
                return True
            #  error: main function is not closed
            elif self.peek_next_token() != ']' and (self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and not self.arrayError:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Sun', 'Luhman', 'Starsys', 'Identifier', 'ISS', 'Class', 'Divert', but instead got '{self.peek_next_token()}'")
        else:
            return

    #  method for statements of main
    def parse_statements_main(self):
        # Parse: is it a Sun global variable declaration or a subfunction prototype?
        while (self.peek_next_token() in ["Static", "Sun", "Luhman", "Starsys", "Boolean", "Autom", "Disp", "Capt", "If",
                                         "Divert", "Fore", "Span", "Perform", "Test", "ISS", "Class"]
               or re.match(r'Identifier\d*$', self.peek_next_token())):
            #  Parse: is it a constant dec?
            if self.peek_next_token() == "Static":
                self.match("Static")  # consume Static
                # Parse: is it a Sun global variable declaration or a subfunction prototype?
                if self.peek_next_token() == "Sun":
                    self.match("Sun")  # consume Sun
                    #  check if there is an identifier after the datatype
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_variable_declaration_main()
                    #  error: no identifier after datatype
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                # Parse: is it a Luhman global variable declaration or a subfunction prototype?
                elif self.peek_next_token() == "Luhman":
                    self.match("Luhman")  # consume Luhman
                    #  check if there is an identifier after the datatype
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_variable_declaration_main()
                    #  error: no identifier after datatype
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                # Parse: is it a Starsys global variable declaration or a subfunction prototype?
                elif self.peek_next_token() == "Starsys":
                    self.match("Starsys")  # consume Starsys
                    #  check if there is an identifier after the datatype
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_variable_declaration_main()
                    else:
                        #  error: no identifier after datatype
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                # Parse: is it a Boolean global variable declaration or a subfunction prototype?
                elif self.peek_next_token() == "Boolean":
                    self.match("Boolean")  # consume Bool
                    #  check if there is an identifier after the datatype
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_boolean_main()
                    #  error: no identifier after datatype
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                #  no data type is next to Static
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Sun', 'Luhman', 'Starsys', 'Boolean', but instead got '{self.peek_next_token()}'")
            # Parse: is it a Sun global variable declaration or a subfunction prototype?
            elif self.peek_next_token() == "Sun":
                self.match("Sun")  # consume Sun
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_variable_declaration_main()
                #  error: no identifier after datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            # Parse: is it a Luhman global variable declaration or a subfunction prototype?
            elif self.peek_next_token() == "Luhman":
                self.match("Luhman")  # consume Luhman
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_variable_declaration_main()
                #  error: no identifier after datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            # Parse: is it a Starsys global variable declaration or a subfunction prototype?
            elif self.peek_next_token() == "Starsys":
                self.match("Starsys")  # consume Starsys
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_variable_declaration_main()
                else:
                    #  error: no identifier after datatype
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            # Parse: is it a Boolean global variable declaration or a subfunction prototype?
            elif self.peek_next_token() == "Boolean":
                self.match("Boolean")  # consume Bool
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_boolean_main()
                #  error: no identifier after datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            # Parse: is it an Autom global variable declaration?
            elif self.peek_next_token() == "Autom":
                self.match("Autom")  # consume Autom
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_auto_dec()
                #  error: no identifier after datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            #  Parse: is it an output statement? (Disp)
            elif self.peek_next_token() == "Disp":
                self.match("Disp")
                #  check if there is a '<<' after the Disp keyword
                if self.peek_next_token() == "<<":
                    self.parse_disp_stmnt()
                #  error: not followed by "<<"
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '<<', but instead got '{self.peek_next_token()}'")
            #  Parse: is it an input statement? (Capt)
            elif self.peek_next_token() == "Capt":
                self.match("Capt")
                #  check if there is a '<<' after the Disp keyword
                if self.peek_next_token() == ">>":
                    self.parse_capt_stmnt()
                #  error: not followed by "<<"
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '>>', but instead got '{self.peek_next_token()}'")
            #  Parse: is an If condition statement?
            elif self.peek_next_token() == "If":
                self.match("If")
                #  check if there is a '(' after the If keyword
                if self.peek_next_token() == "(":
                    self.parse_if_stmnt()
                #  error: not followed by "("
                else:
                    self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  Parse: is it a Switch condition statement (Divert)?
            elif self.peek_next_token() == "Divert":
                self.match("Divert")
                #  check if there is a '(' after the Divert keyword
                if self.peek_next_token() == "(":
                    self.parse_switch_stmnt()
                #  error: not followed by "("
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  Parse: is it a for loop statement (Fore)?
            elif self.peek_next_token() == "Fore":
                self.match("Fore")  # consume Fore
                #  check if there is a '(' after the Divert keyword
                if self.peek_next_token() == "(":
                    self.parse_for_loop()
                #  error: not followed by "("
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  Parse: is it a while loop statement (Span)?
            elif self.peek_next_token() == "Span":
                self.parse_while_loop()
            #  Parse: is it a do-while loop statement (Span)?
            elif self.peek_next_token() == "Perform":
                self.parse_dowhile_loop()
            #  Parse: is it a Try-Catch?
            elif self.peek_next_token() == "Test":
                self.parse_trycatch()
            #  Parse: is it a Struct?
            elif self.peek_next_token() == "ISS":
                self.struct_scope = "main"
                self.struct_current_scope = self.struct_scope
                self.match_struct("ISS")
            #  Parse: is it a globally declared Class?
            elif self.peek_next_token() == "Class":
                # SEMANTIC CHECK
                self.class_scope = "main"
                self.class_current_scope = self.class_scope
                self.match_class_stmnt("Class")
            #  is it am assignment, or function call, or module access? (a = a#
            #  a(value)# : mod.mod1.mod2#/s.func()#)
            elif re.match(r'Identifier\d*$', self.peek_next_token()):
                self.match_assignment1("Identifier")
            else:
                break


    #  method for statements of functions
    def parse_statements(self):
        # Parse: is it a Sun global variable declaration or a subfunction prototype?
        while (self.peek_next_token() in ["Static", "Sun", "Luhman", "Starsys", "Boolean", "Autom", "Disp", "Capt", "If",
                                         "Divert", "Fore", "Span", "Perform", "Void", "Test", "ISS", "Class"]
               or re.match(r'Identifier\d*$', self.peek_next_token())):
            #  Parse: is it a constant dec?
            if self.peek_next_token() == "Static":
                self.match("Static")  # consume Static
                # Parse: is it a Sun global variable declaration or a subfunction prototype?
                if self.peek_next_token() == "Sun":
                    self.match("Sun")  # consume Sun
                    #  check if there is an identifier after the datatype
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_variable_declaration_func()
                    #  error: no identifier after datatype
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                # Parse: is it a Luhman global variable declaration or a subfunction prototype?
                elif self.peek_next_token() == "Luhman":
                    self.match("Luhman")  # consume Luhman
                    #  check if there is an identifier after the datatype
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_variable_declaration_func()
                    #  error: no identifier after datatype
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                # Parse: is it a Starsys global variable declaration or a subfunction prototype?
                elif self.peek_next_token() == "Starsys":
                    self.match("Starsys")  # consume Starsys
                    #  check if there is an identifier after the datatype
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_variable_declaration_func()
                    else:
                        #  error: no identifier after datatype
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                # Parse: is it a Boolean global variable declaration or a subfunction prototype?
                elif self.peek_next_token() == "Boolean":
                    self.match("Boolean")  # consume Bool
                    #  check if there is an identifier after the datatype
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_boolean_func()
                    #  error: no identifier after datatype
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                #  no data type is next to Static
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Sun', 'Luhman', 'Starsys', 'Boolean', but instead got '{self.peek_next_token()}'")
            # Parse: is it a Sun global variable declaration or a subfunction prototype?
            elif self.peek_next_token() == "Sun":
                self.match("Sun")  # consume Sun
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_variable_declaration_func()
                #  error: no identifier after datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            # Parse: is it a Luhman global variable declaration or a subfunction prototype?
            elif self.peek_next_token() == "Luhman":
                self.match("Luhman")  # consume Luhman
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_variable_declaration_func()
                #  error: no identifier after datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            # Parse: is it a Starsys global variable declaration or a subfunction prototype?
            elif self.peek_next_token() == "Starsys":
                self.match("Starsys")  # consume Starsys
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_variable_declaration_func()
                else:
                    #  error: no identifier after datatype
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            # Parse: is it a Boolean global variable declaration or a subfunction prototype?
            elif self.peek_next_token() == "Boolean":
                self.match("Boolean")  # consume Bool
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_boolean_func()
                #  error: no identifier after datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            # Parse: is it an Autom global variable declaration?
            elif self.peek_next_token() == "Autom":
                self.match("Autom")  # consume Autom
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_auto_dec()
                #  error: no identifier after datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            #  Parse: is it an output statement? (Disp)
            elif self.peek_next_token() == "Disp":
                self.match("Disp")
                #  check if there is a '<<' after the Disp keyword
                if self.peek_next_token() == "<<":
                    self.parse_disp_stmnt()
                #  error: not followed by "<<"
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '<<', but instead got '{self.peek_next_token()}'")
            #  Parse: is it an input statement? (Capt)
            elif self.peek_next_token() == "Capt":
                self.match("Capt")
                #  check if there is a '<<' after the Disp keyword
                if self.peek_next_token() == ">>":
                    self.parse_capt_stmnt()
                #  error: not followed by "<<"
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '>>', but instead got '{self.peek_next_token()}'")
            #  Parse: is an If condition statement?
            elif self.peek_next_token() == "If":
                self.match("If")
                #  check if there is a '(' after the If keyword
                if self.peek_next_token() == "(":
                    self.parse_if_stmnt()
                #  error: not followed by "("
                else:
                    self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  Parse: is it a Switch condition statement (Divert)?
            elif self.peek_next_token() == "Divert":
                self.match("Divert")
                #  check if there is a '(' after the Divert keyword
                if self.peek_next_token() == "(":
                    self.parse_switch_stmnt()
                #  error: not followed by "("
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  Parse: is it a for loop statement (Fore)?
            elif self.peek_next_token() == "Fore":
                self.match("Fore")  # consume Fore
                #  check if there is a '(' after the Divert keyword
                if self.peek_next_token() == "(":
                    self.parse_for_loop()
                #  error: not followed by "("
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  Parse: is it a while loop statement (Span)?
            elif self.peek_next_token() == "Span":
                self.parse_while_loop()
            #  Parse: is it a do-while loop statement (Span)?
            elif self.peek_next_token() == "Perform":
                self.parse_dowhile_loop()
            #  Parse: is it a Void function?
            elif self.peek_next_token() == "Void":
                self.match_voidfunc_statement("Void")
            #  Parse: is it a Try-Catch?
            elif self.peek_next_token() == "Test":
                self.parse_trycatch()
            #  Parse: is it a Struct?
            elif self.peek_next_token() == "ISS":
                self.struct_scope = "function"
                self.struct_current_scope = self.struct_scope
                self.match_struct("ISS")
            #  Parse: is it a globally declared Class?
            elif self.peek_next_token() == "Class":
                self.class_scope = "function"
                self.class_current_scope = self.class_scope
                self.match_class_stmnt("Class")
            #  is it am assignment, or function call, or module access? (a = a#
            #  a(value)# : mod.mod1.mod2#/s.func()#)
            elif re.match(r'Identifier\d*$', self.peek_next_token()):
                self.match_assignment1("Identifier")
            else:
                break

    #  statements for if-else, switch, loops, try-catch
    def parse_statements1(self):
        # Parse: is it a Sun global variable declaration or a subfunction prototype?
        while (self.peek_next_token() in ["Static", "Sun", "Luhman", "Starsys", "Boolean", "Autom", "Disp", "Capt", "If",
                                         "Divert", "Fore", "Span", "Perform", "Test"]
               or re.match(r'Identifier\d*$', self.peek_next_token())):
            #  Parse: is it a constant dec?
            if self.peek_next_token() == "Static":
                self.match("Static")  # consume Static
                # Parse: is it a Sun global variable declaration or a subfunction prototype?
                if self.peek_next_token() == "Sun":
                    self.match("Sun")  # consume Sun
                    #  check if there is an identifier after the datatype
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_variable_declaration_main()
                    #  error: no identifier after datatype
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                # Parse: is it a Luhman global variable declaration or a subfunction prototype?
                elif self.peek_next_token() == "Luhman":
                    self.match("Luhman")  # consume Luhman
                    #  check if there is an identifier after the datatype
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_variable_declaration_main()
                    #  error: no identifier after datatype
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                # Parse: is it a Starsys global variable declaration or a subfunction prototype?
                elif self.peek_next_token() == "Starsys":
                    self.match("Starsys")  # consume Starsys
                    #  check if there is an identifier after the datatype
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_variable_declaration_main()
                    else:
                        #  error: no identifier after datatype
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                # Parse: is it a Boolean global variable declaration or a subfunction prototype?
                elif self.peek_next_token() == "Boolean":
                    self.match("Boolean")  # consume Bool
                    #  check if there is an identifier after the datatype
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_boolean_main()
                    #  error: no identifier after datatype
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                #  no data type is next to Static
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Sun', 'Luhman', 'Starsys', 'Boolean', but instead got '{self.peek_next_token()}'")
            # Parse: is it a Sun global variable declaration or a subfunction prototype?
            elif self.peek_next_token() == "Sun":
                self.match("Sun")  # consume Sun
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_variable_declaration_main()
                #  error: no identifier after datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            # Parse: is it a Luhman global variable declaration or a subfunction prototype?
            elif self.peek_next_token() == "Luhman":
                self.match("Luhman")  # consume Luhman
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_variable_declaration_main()
                #  error: no identifier after datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            # Parse: is it a Starsys global variable declaration or a subfunction prototype?
            elif self.peek_next_token() == "Starsys":
                self.match("Starsys")  # consume Starsys
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_variable_declaration_main()
                else:
                    #  error: no identifier after datatype
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            # Parse: is it a Boolean global variable declaration or a subfunction prototype?
            elif self.peek_next_token() == "Boolean":
                self.match("Boolean")  # consume Bool
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_boolean_main()
                #  error: no identifier after datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            # Parse: is it an Autom global variable declaration?
            elif self.peek_next_token() == "Autom":
                self.match("Autom")  # consume Autom
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_auto_dec()
                #  error: no identifier after datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            #  Parse: is it an output statement? (Disp)
            elif self.peek_next_token() == "Disp":
                self.match("Disp")
                #  check if there is a '<<' after the Disp keyword
                if self.peek_next_token() == "<<":
                    self.parse_disp_stmnt()
                #  error: not followed by "<<"
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '<<', but instead got '{self.peek_next_token()}'")
            #  Parse: is it an input statement? (Capt)
            elif self.peek_next_token() == "Capt":
                self.match("Capt")
                #  check if there is a '<<' after the Disp keyword
                if self.peek_next_token() == ">>":
                    self.parse_capt_stmnt()
                #  error: not followed by "<<"
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '>>', but instead got '{self.peek_next_token()}'")
            #  Parse: is an If condition statement?
            elif self.peek_next_token() == "If":
                self.match("If")
                #  check if there is a '(' after the If keyword
                if self.peek_next_token() == "(":
                    self.parse_if_stmnt()
                #  error: not followed by "("
                else:
                    self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  Parse: is it a Switch condition statement (Divert)?
            elif self.peek_next_token() == "Divert":
                self.match("Divert")
                #  check if there is a '(' after the Divert keyword
                if self.peek_next_token() == "(":
                    self.parse_switch_stmnt()
                #  error: not followed by "("
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  Parse: is it a for loop statement (Fore)?
            elif self.peek_next_token() == "Fore":
                self.match("Fore")  # consume Fore
                #  check if there is a '(' after the Divert keyword
                if self.peek_next_token() == "(":
                    self.parse_for_loop()
                #  error: not followed by "("
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  Parse: is it a while loop statement (Span)?
            elif self.peek_next_token() == "Span":
                self.parse_while_loop()
            #  Parse: is it a do-while loop statement (Span)?
            elif self.peek_next_token() == "Perform":
                self.parse_dowhile_loop()
            #  Parse: is it a Try-Catch?
            elif self.peek_next_token() == "Test":
                self.parse_trycatch()
            #  is it am assignment, or function call, or module access? (a = a#
            #  a(value)# : mod.mod1.mod2#/s.func()#)
            elif re.match(r'Identifier\d*$', self.peek_next_token()):
                self.match_assignment1("Identifier")
            else:
                break

    #  method for statements of ISS and Class
    def parse_statements2(self):
        # Parse: is it a Sun global variable declaration or a subfunction prototype?
        while (self.peek_next_token() in ["Static", "Sun", "Luhman", "Starsys", "Boolean", "Autom", "Disp", "Capt", "If",
                                         "Divert", "Fore", "Span", "Perform", "Void", "Test", "ISS", "Class"]
               or re.match(r'Identifier\d*$', self.peek_next_token())):
            #  Parse: is it a constant dec?
            if self.peek_next_token() == "Static":
                self.match("Static")  # consume Static
                # Parse: is it a Sun global variable declaration or a subfunction prototype?
                if self.peek_next_token() == "Sun":
                    self.match("Sun")  # consume Sun
                    #  check if there is an identifier after the datatype
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_variable_declaration_func()
                    #  error: no identifier after datatype
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                # Parse: is it a Luhman global variable declaration or a subfunction prototype?
                elif self.peek_next_token() == "Luhman":
                    self.match("Luhman")  # consume Luhman
                    #  check if there is an identifier after the datatype
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_variable_declaration_func()
                    #  error: no identifier after datatype
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                # Parse: is it a Starsys global variable declaration or a subfunction prototype?
                elif self.peek_next_token() == "Starsys":
                    self.match("Starsys")  # consume Starsys
                    #  check if there is an identifier after the datatype
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_variable_declaration_func()
                    else:
                        #  error: no identifier after datatype
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                # Parse: is it a Boolean global variable declaration or a subfunction prototype?
                elif self.peek_next_token() == "Boolean":
                    self.match("Boolean")  # consume Bool
                    #  check if there is an identifier after the datatype
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_boolean_func()
                    #  error: no identifier after datatype
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                #  no data type is next to Static
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax Error: Expected 'Sun', 'Luhman', 'Starsys', 'Boolean', but instead got '{self.peek_next_token()}'")
            # Parse: is it a Sun global variable declaration or a subfunction prototype?
            elif self.peek_next_token() == "Sun":
                self.match("Sun")  # consume Sun
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_variable_declaration_func()
                #  error: no identifier after datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            # Parse: is it a Luhman global variable declaration or a subfunction prototype?
            elif self.peek_next_token() == "Luhman":
                self.match("Luhman")  # consume Luhman
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_variable_declaration_func()
                #  error: no identifier after datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            # Parse: is it a Starsys global variable declaration or a subfunction prototype?
            elif self.peek_next_token() == "Starsys":
                self.match("Starsys")  # consume Starsys
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_variable_declaration_func()
                else:
                    #  error: no identifier after datatype
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            # Parse: is it a Boolean global variable declaration or a subfunction prototype?
            elif self.peek_next_token() == "Boolean":
                self.match("Boolean")  # consume Bool
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_boolean_func()
                #  error: no identifier after datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            # Parse: is it an Autom global variable declaration?
            elif self.peek_next_token() == "Autom":
                self.match("Autom")  # consume Autom
                #  check if there is an identifier after the datatype
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.parse_auto_dec()
                #  error: no identifier after datatype
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            #  Parse: is it an output statement? (Disp)
            elif self.peek_next_token() == "Disp":
                self.match("Disp")
                #  check if there is a '<<' after the Disp keyword
                if self.peek_next_token() == "<<":
                    self.parse_disp_stmnt()
                #  error: not followed by "<<"
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '<<', but instead got '{self.peek_next_token()}'")
            #  Parse: is it an input statement? (Capt)
            elif self.peek_next_token() == "Capt":
                self.match("Capt")
                #  check if there is a '<<' after the Disp keyword
                if self.peek_next_token() == ">>":
                    self.parse_capt_stmnt()
                #  error: not followed by "<<"
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '>>', but instead got '{self.peek_next_token()}'")
            #  Parse: is an If condition statement?
            elif self.peek_next_token() == "If":
                self.match("If")
                #  check if there is a '(' after the If keyword
                if self.peek_next_token() == "(":
                    self.parse_if_stmnt()
                #  error: not followed by "("
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  Parse: is it a Switch condition statement (Divert)?
            elif self.peek_next_token() == "Divert":
                self.match("Divert")
                #  check if there is a '(' after the Divert keyword
                if self.peek_next_token() == "(":
                    self.parse_switch_stmnt()
                #  error: not followed by "("
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  Parse: is it a for loop statement (Fore)?
            elif self.peek_next_token() == "Fore":
                self.match("Fore")  # consume Fore
                #  check if there is a '(' after the Divert keyword
                if self.peek_next_token() == "(":
                    self.parse_for_loop()
                #  error: not followed by "("
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  Parse: is it a while loop statement (Span)?
            elif self.peek_next_token() == "Span":
                self.parse_while_loop()
            #  Parse: is it a do-while loop statement (Span)?
            elif self.peek_next_token() == "Perform":
                self.parse_dowhile_loop()
            #  Parse: is it a Void function?
            elif self.peek_next_token() == "Void":
                self.match_voidfunc_statement("Void")
            #  Parse: is it a Try-Catch?
            elif self.peek_next_token() == "Test":
                self.parse_trycatch()
            #  Parse: is it a Struct?
            elif self.peek_next_token() == "ISS":
                self.struct_scope = self.struct_current_scope
                self.match_struct("ISS")
            #  Parse: is it a globally declared Class?
            elif self.peek_next_token() == "Class":
                self.class_scope = self.class_current_scope
                self.match_class_stmnt("Class")
            #  is it am assignment, constructor, or function call, or module access? (a = a#
            #  : a(Sun a)[  ] : a(value)# : mod.mod1.mod2#/s.func()#)
            elif re.match(r'Identifier\d*$', self.peek_next_token()):
                self.match_assignment("Identifier")
            else:
                break

    #  method for try-catch
    def parse_trycatch(self):
        if self.peek_next_token() == "Test":
            self.match("Test")
            #  must be followed with '['
            if self.peek_next_token() == "[":
                self.match("[")
                self.parse_statements1()  # body (includes nested test-catch)
                #  must be closed with ']' if no 'Launch' syntax
                if self.peek_next_token() == "]":
                    self.match("]")
                    #  catch path
                    if self.peek_next_token() == "Latch":
                        self.parse_catch()
                    #  error: no Latch after Test
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Latch', but instead got '{self.peek_next_token()}'")
                #  has 'Launch' path
                elif self.peek_next_token() == "Launch":
                    self.match_launch("Launch")  # consume Launch
                    #  must be closed with ']'
                    if self.peek_next_token() == "]":
                        self.match("]")
                        #  catch path
                        if self.peek_next_token() == "Latch":
                            self.parse_catch()
                        #  error: no Latch after Test
                        else:
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Latch', but instead got '{self.peek_next_token()}'")
                    #  error: not followed with ']'
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                #  error: not closed with ']' or followed by 'Launch'
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Launch', ']', but instead got '{self.peek_next_token()}'")
            #  error: not followed with '['
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '[', but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Test' ")
    #  method for launch
    def match_launch(self, expected_token):
        self.get_next_token()
        while self.current_token == "Space":
            self.get_next_token()

        if expected_token == "Launch":
            if re.match(r'Identifier\d*$', self.peek_next_token()):
                self.match("Identifier")  # consume identifier
                # must be followed with '('
                if self.peek_next_token() == "(":
                    self.match("(")
                    #  must be followed by a string literal
                    if self.peek_next_token() == "StarsysLiteral":
                        self.match("StarsysLiteral")
                        #  close it with ')'
                        if self.peek_next_token() == ")":
                            self.match(")")
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                                #  must be followed by ']'
                                if self.peek_next_token() == "]":
                                    return True
                                #  not closed with ']'
                                else:
                                    return False
                            #  error: not terminated
                            else:
                                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                        #  error: not closed with ')'
                        else:
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                    #  not followed by a string literal
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'StarsysLiteral', but instead got '{self.peek_next_token()}'")
                #  error: not followed with '('
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '(', but instead got '{self.peek_next_token()}'")
            #  error: not followed by an identifier
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
    #  method for catch
    def parse_catch(self):
        if self.peek_next_token() == "Latch":
            self.match("Latch")  # consume Latch
            #  must be followed by '('
            if self.peek_next_token() == "(":
                self.match("(")
                #  must be followed by an identifier (exception)
                if re.match(r'Identifier\d*$', self.peek_next_token()):
                    self.match("Identifier")
                    #  must be followed by an identifier
                    if re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.match("Identifier")
                        #  close it with ')'
                        if self.peek_next_token() == ")":
                            self.match(")")
                            #  must be followed with '['
                            if self.peek_next_token() == "[":
                                self.match("[")
                                self.parse_statements1()  # body
                                #  close it
                                if self.peek_next_token() == "]":
                                    self.match("]")
                                    #  is it followed by another Latch?
                                    if self.peek_next_token() == "Latch":
                                        self.parse_catch()
                                    #  return
                                    else:
                                        return True
                                #  error: not closed with ']'
                                else:
                                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by '['
                            else:
                                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '[', but instead got '{self.peek_next_token()}'")
                        #  error: not closed with ')'
                        else:
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                    #  error: no identifier
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                #  error: no identifier
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
            #  error: no '('
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '(', but instead got '{self.peek_next_token()}'")

    # method for parsing display statements
    def parse_disp_stmnt(self):
        if self.peek_next_token() == "<<":
            self.match_output("<<")
            if self.peek_next_token() == "#":
                self.match("#")
            #  not terminated
            elif ((self.peek_next_token() != "#" or self.peek_next_token() != "<<" or self.peek_next_token() != "." or self.peek_next_token() != "(") and
                  (self.peek_previous_token() == "SunLiteral" or self.peek_previous_token() == "LuhmanLiteral"
                   or self.peek_previous_token() == "StarsysLiteral" or self.peek_previous_token() == "True"
                   or self.peek_previous_token() == "False" or re.match(r'Identifier\d*$', self.peek_previous_token()))):
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '#', '<<', '.', '(' but instead got '{self.peek_next_token()}'")
        #  not followed by '<<'
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '<<', but instead got '{self.peek_next_token()}'")

    #  method for parsing input statements
    def parse_capt_stmnt(self):
        if self.peek_next_token() == ">>":
            self.match_input(">>")
            if self.peek_next_token() == "#":
                self.match("#")
            #  not terminated
            elif self.peek_next_token() != "#" and re.match(r'Identifier\d*$', self.peek_previous_token()):
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
        #  not followed by '<<'
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '>>', but instead got '{self.peek_next_token()}'")

    #  method for parsing if statements
    def parse_if_stmnt(self):
        if self.peek_next_token() == "(":
            self.match_condition("(")
            #  condition making is done, must be enclosed with ')'
            if self.peek_next_token() == ")":
                self.match(")")
                #  must be followed by '['
                if self.peek_next_token() == "[":
                    self.match("[")
                    #  statements in an If condition
                    self.parse_statements1()  # includes possibility of nested If-else
                    #  loop update path (pre)
                    if self.peek_next_token() == "++":
                        self.match("++")
                        #  must be followed by an identifier
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.match("Identifier")
                            #  must be terminated
                            if self.peek_next_token() == "#":
                                self.match("#")
                                #  close if condition (no deviate, proceed, return)
                                if self.peek_next_token() == "]":
                                    self.match("]")
                                    #  is it followed by an Other/Other-If condition?
                                    if self.peek_next_token() == "Other":
                                        self.match("Other")
                                        #  is it an Other-If?
                                        if self.peek_next_token() == "If":
                                            self.match("If")
                                            if self.peek_next_token() == "(":
                                                self.parse_if_stmnt()
                                            #  Other-If statement is not followed by '('
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                                        #  is it an Other Condition?
                                        elif self.peek_next_token() == "[":
                                            self.parse_else_stmnt()
                                        #  error: expected '[' or 'If' after 'Other'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected '[', 'If', but instead got '{self.peek_next_token()}'")
                                    #  it is not followed by Other keyword
                                    else:
                                        return True
                                # loop update, has Deviate path
                                elif self.peek_next_token() == "Deviate":
                                    self.match("Deviate")
                                    # terminate break
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                        #  close if condition
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                            #  is it followed by an Other/Other-If condition?
                                            if self.peek_next_token() == "Other":
                                                self.match("Other")
                                                #  is it an Other-If?
                                                if self.peek_next_token() == "If":
                                                    self.match("If")
                                                    if self.peek_next_token() == "(":
                                                        self.parse_if_stmnt()
                                                    #  Other-If statement is not followed by '('
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                                                #  is it an Other Condition?
                                                elif self.peek_next_token() == "[":
                                                    self.parse_else_stmnt()
                                                #  error: expected '[' or 'If' after 'Other'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected '[', 'If', but instead got '{self.peek_next_token()}'")
                                            #  it is not followed by Other keyword
                                            else:
                                                return True
                                        #  if condition is not closed
                                        elif (
                                                self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and self.peek_next_token() != "]":
                                            self.notMainError = True
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                                    # error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  loop update, has continue path (Proceed)
                                elif self.peek_next_token() == "Proceed":
                                    self.match("Proceed")
                                    # terminate break
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                        #  close if condition
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                            #  is it followed by an Other/Other-If condition?
                                            if self.peek_next_token() == "Other":
                                                self.match("Other")
                                                #  is it an Other-If?
                                                if self.peek_next_token() == "If":
                                                    self.match("If")
                                                    if self.peek_next_token() == "(":
                                                        self.parse_if_stmnt()
                                                    #  Other-If statement is not followed by '('
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                                                #  is it an Other Condition?
                                                elif self.peek_next_token() == "[":
                                                    self.parse_else_stmnt()
                                                #  error: expected '[' or 'If' after 'Other'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected '[', 'If', but instead got '{self.peek_next_token()}'")
                                            #  it is not followed by Other keyword
                                            else:
                                                return True
                                        #  if condition is not closed
                                        elif (
                                                self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and self.peek_next_token() != "]":
                                            self.notMainError = True
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                                    # error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  loop update, has retrieve path
                                elif self.peek_next_token() == "Retrieve":
                                    self.match_return("Retrieve")
                                    #  close if condition
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                        #  is it followed by an Other/Other-If condition?
                                        if self.peek_next_token() == "Other":
                                            self.match("Other")
                                            #  is it an Other-If?
                                            if self.peek_next_token() == "If":
                                                self.match("If")
                                                if self.peek_next_token() == "(":
                                                    self.parse_if_stmnt()
                                                #  Other-If statement is not followed by '('
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                                            #  is it an Other Condition?
                                            elif self.peek_next_token() == "[":
                                                self.parse_else_stmnt()
                                            #  error: expected '[' or 'If' after 'Other'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '[', 'If', but instead got '{self.peek_next_token()}'")
                                        #  it is not followed by Other keyword
                                        else:
                                            return True
                                    #  if condition is not closed
                                    elif (
                                            self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and self.peek_next_token() != "]":
                                        self.notMainError = True
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                                #  if condition is not closed
                                elif (
                                        self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and self.peek_next_token() != "]" and self.peek_next_token() != "Deviate" and self.peek_next_token() != "Retrieve" and self.peek_next_token() != "Proceed":
                                    self.notMainError = True
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Deviate', 'Proceed', 'Retrieve' but instead got '{self.peek_next_token()}'")
                            # error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                        # error: not followed by an identifier
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  loop update path (post + expression)
                    elif re.match(r'Identifier\d*$', self.peek_next_token()):
                        self.parse_loop_post_up()  # consume 'Identifier'
                        #  terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                            #  close if condition (no deviate, proceed, return)
                            if self.peek_next_token() == "]":
                                self.match("]")
                                #  is it followed by an Other/Other-If condition?
                                if self.peek_next_token() == "Other":
                                    self.match("Other")
                                    #  is it an Other-If?
                                    if self.peek_next_token() == "If":
                                        self.match("If")
                                        if self.peek_next_token() == "(":
                                            self.parse_if_stmnt()
                                        #  Other-If statement is not followed by '('
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                                    #  is it an Other Condition?
                                    elif self.peek_next_token() == "[":
                                        self.parse_else_stmnt()
                                    #  error: expected '[' or 'If' after 'Other'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected '[', 'If', but instead got '{self.peek_next_token()}'")
                                #  it is not followed by Other keyword
                                else:
                                    return True
                            # loop update, has Deviate path
                            elif self.peek_next_token() == "Deviate":
                                self.match("Deviate")
                                # terminate break
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                    #  close if condition
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                        #  is it followed by an Other/Other-If condition?
                                        if self.peek_next_token() == "Other":
                                            self.match("Other")
                                            #  is it an Other-If?
                                            if self.peek_next_token() == "If":
                                                self.match("If")
                                                if self.peek_next_token() == "(":
                                                    self.parse_if_stmnt()
                                                #  Other-If statement is not followed by '('
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                                            #  is it an Other Condition?
                                            elif self.peek_next_token() == "[":
                                                self.parse_else_stmnt()
                                            #  error: expected '[' or 'If' after 'Other'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '[', 'If', but instead got '{self.peek_next_token()}'")
                                        #  it is not followed by Other keyword
                                        else:
                                            return True
                                    #  if condition is not closed
                                    elif (
                                            self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and self.peek_next_token() != "]":
                                        self.notMainError = True
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                                # error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  loop update, has continue path (Proceed)
                            elif self.peek_next_token() == "Proceed":
                                self.match("Proceed")
                                # terminate break
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                    #  close if condition
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                        #  is it followed by an Other/Other-If condition?
                                        if self.peek_next_token() == "Other":
                                            self.match("Other")
                                            #  is it an Other-If?
                                            if self.peek_next_token() == "If":
                                                self.match("If")
                                                if self.peek_next_token() == "(":
                                                    self.parse_if_stmnt()
                                                #  Other-If statement is not followed by '('
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                                            #  is it an Other Condition?
                                            elif self.peek_next_token() == "[":
                                                self.parse_else_stmnt()
                                            #  error: expected '[' or 'If' after 'Other'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '[', 'If', but instead got '{self.peek_next_token()}'")
                                        #  it is not followed by Other keyword
                                        else:
                                            return True
                                    #  if condition is not closed
                                    elif (
                                            self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and self.peek_next_token() != "]":
                                        self.notMainError = True
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                                # error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  loop update, has retrieve path
                            elif self.peek_next_token() == "Retrieve":
                                self.match_return("Retrieve")
                                #  close if condition
                                if self.peek_next_token() == "]":
                                    self.match("]")
                                    #  is it followed by an Other/Other-If condition?
                                    if self.peek_next_token() == "Other":
                                        self.match("Other")
                                        #  is it an Other-If?
                                        if self.peek_next_token() == "If":
                                            self.match("If")
                                            if self.peek_next_token() == "(":
                                                self.parse_if_stmnt()
                                            #  Other-If statement is not followed by '('
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                                        #  is it an Other Condition?
                                        elif self.peek_next_token() == "[":
                                            self.parse_else_stmnt()
                                        #  error: expected '[' or 'If' after 'Other'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected '[', 'If', but instead got '{self.peek_next_token()}'")
                                    #  it is not followed by Other keyword
                                    else:
                                        return True
                                #  if condition is not closed
                                elif (
                                        self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and self.peek_next_token() != "]":
                                    self.notMainError = True
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                            #  if condition is not closed
                            elif (
                                    self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and self.peek_next_token() != "]" and self.peek_next_token() != "Deviate" and self.peek_next_token() != "Retrieve" and self.peek_next_token() != "Proceed":
                                self.notMainError = True
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Deviate', 'Proceed', 'Retrieve' but instead got '{self.peek_next_token()}'")
                        # error: not terminated
                        else:
                            self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                    # no loop update but has Break path (Deviate)
                    elif self.peek_next_token() == "Deviate":
                        self.match("Deviate")
                        # terminate break
                        if self.peek_next_token() == "#":
                            self.match("#")
                            #  close if condition
                            if self.peek_next_token() == "]":
                                self.match("]")
                                #  is it followed by an Other/Other-If condition?
                                if self.peek_next_token() == "Other":
                                    self.match("Other")
                                    #  is it an Other-If?
                                    if self.peek_next_token() == "If":
                                        self.match("If")
                                        if self.peek_next_token() == "(":
                                            self.parse_if_stmnt()
                                        #  Other-If statement is not followed by '('
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                                    #  is it an Other Condition?
                                    elif self.peek_next_token() == "[":
                                        self.parse_else_stmnt()
                                    #  error: expected '[' or 'If' after 'Other'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected '[', 'If', but instead got '{self.peek_next_token()}'")
                                #  it is not followed by Other keyword
                                else:
                                    return True
                            #  if condition is not closed
                            elif (self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and self.peek_next_token() != "]":
                                self.notMainError = True
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                        # error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                    #  no loop update but has continue path (Proceed)
                    elif self.peek_next_token() == "Proceed":
                        self.match("Proceed")
                        # terminate break
                        if self.peek_next_token() == "#":
                            self.match("#")
                            #  close if condition
                            if self.peek_next_token() == "]":
                                self.match("]")
                                #  is it followed by an Other/Other-If condition?
                                if self.peek_next_token() == "Other":
                                    self.match("Other")
                                    #  is it an Other-If?
                                    if self.peek_next_token() == "If":
                                        self.match("If")
                                        if self.peek_next_token() == "(":
                                            self.parse_if_stmnt()
                                        #  Other-If statement is not followed by '('
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                                    #  is it an Other Condition?
                                    elif self.peek_next_token() == "[":
                                        self.parse_else_stmnt()
                                    #  error: expected '[' or 'If' after 'Other'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected '[', 'If', but instead got '{self.peek_next_token()}'")
                                #  it is not followed by Other keyword
                                else:
                                    return True
                            #  if condition is not closed
                            elif (self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and self.peek_next_token() != "]":
                                self.notMainError = True
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                        # error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                    #  no loop update but has retrieve path
                    elif self.peek_next_token() == "Retrieve":
                        self.match_return("Retrieve")
                        #  close if condition
                        if self.peek_next_token() == "]":
                            self.match("]")
                            #  is it followed by an Other/Other-If condition?
                            if self.peek_next_token() == "Other":
                                self.match("Other")
                                #  is it an Other-If?
                                if self.peek_next_token() == "If":
                                    self.match("If")
                                    if self.peek_next_token() == "(":
                                        self.parse_if_stmnt()
                                    #  Other-If statement is not followed by '('
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                                #  is it an Other Condition?
                                elif self.peek_next_token() == "[":
                                    self.parse_else_stmnt()
                                #  error: expected '[' or 'If' after 'Other'
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '[', 'If', but instead got '{self.peek_next_token()}'")
                            #  it is not followed by Other keyword
                            else:
                                return True
                        #  if condition is not closed
                        elif (
                                self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and self.peek_next_token() != "]":
                            self.notMainError = True
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                    #  close if condition, no deviate and proceed
                    elif self.peek_next_token() == "]":
                        self.match("]")
                        #  is it followed by an Other/Other-If condition?
                        if self.peek_next_token() == "Other":
                            self.match("Other")
                            #  is it an Other-If?
                            if self.peek_next_token() == "If":
                                self.match("If")
                                if self.peek_next_token() == "(":
                                    self.parse_if_stmnt()
                                #  Other-If statement is not followed by '('
                                else:
                                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                            #  is it an Other Condition?
                            elif self.peek_next_token() == "[":
                                self.parse_else_stmnt()
                            #  error: expected '[' or 'If' after 'Other'
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected '[', 'If', but instead got '{self.peek_next_token()}'")
                        #  it is not followed by Other keyword
                        else:
                            return True
                    #  if condition is not closed
                    elif (self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and self.peek_next_token() != "]":
                        self.notMainError = False
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                #  error: not followed by '['
                elif self.peek_next_token() != "[" and not self.parenthError:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '[', but instead got '{self.peek_next_token()}'")
            #  not closed with ')'
            elif self.peek_next_token() != ")" and ((re.match(r'Identifier\d*$', self.peek_previous_token())
                                                     or self.peek_previous_token() == "SunLiteral"
                                                     or self.peek_previous_token() == "LuhmanLiteral"
                                                     or self.peek_previous_token() == "StarsysLiteral"
                                                     or self.peek_previous_token() == "True"
                                                     or self.peek_previous_token() == "False")):
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
        #  not followed by '('
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '(', but instead got '{self.peek_next_token()}'")

    #  method for parsing Other(else) condition
    def parse_else_stmnt(self):
        #  body
        if self.peek_next_token() == "[":
            self.match("[")  # consume
            self.parse_statements1()

            # no loop update but has Break path (Deviate)
            if self.peek_next_token() == "Deviate":
                self.match("Deviate")
                # terminate break
                if self.peek_next_token() == "#":
                    self.match("#")
                    #  close it, and no next if-other bc this is the 'other'
                    if self.peek_next_token() == "]":
                        self.match("]")
                    #  error: not closed
                    elif (self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and self.peek_next_token() != "]":
                        self.notMainError = False
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                # error: not terminated
                else:
                    self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
            #  no loop update but has continue path (Proceed)
            elif self.peek_next_token() == "Proceed":
                self.match("Proceed")
                # terminate break
                if self.peek_next_token() == "#":
                    self.match("#")
                    #  close it, and no next if-other bc this is the 'other'
                    if self.peek_next_token() == "]":
                        self.match("]")
                    #  error: not closed
                    elif (self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and self.peek_next_token() != "]":
                        self.notMainError = False
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                # error: not terminated
                else:
                    self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
            #  no loop update but has retrieve path
            elif self.peek_next_token() == "Retrieve":
                self.match_return("Retrieve")
            #  close if condition
            if self.peek_next_token() == "]":
                self.match("]")
                #  is it followed by an Other/Other-If condition?
                if self.peek_next_token() == "Other":
                    self.match("Other")
                    #  is it an Other-If?
                    if self.peek_next_token() == "If":
                        self.match("If")
                        if self.peek_next_token() == "(":
                            self.parse_if_stmnt()
                        #  Other-If statement is not followed by '('
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                    #  is it an Other Condition?
                    elif self.peek_next_token() == "[":
                        self.parse_else_stmnt()
                    #  error: expected '[' or 'If' after 'Other'
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected '[', 'If', but instead got '{self.peek_next_token()}'")
                #  it is not followed by Other keyword
                else:
                    return True
            #  if condition is not closed
            elif (
                    self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and self.peek_next_token() != "]":
                self.notMainError = True
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
            #  close the Other condition, no proceed or deviate
            elif self.peek_next_token() == "]":
                self.match("]")
            #  error: not closed
            elif (self.peek_previous_token() == "#" or self.peek_previous_token() == "[" or self.peek_previous_token() == "]") and self.peek_next_token() != "]":
                self.notMainError = False
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
        #  error: expected '[' or 'If' after 'Other'
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '[', 'If', but instead got '{self.peek_next_token()}'")

    #  method for parsing switch statements
    def parse_switch_stmnt(self):
        if self.peek_next_token() == "(":
            self.match("(")  # consume
            #  must be followed by an identifier
            if re.match(r'Identifier\d*$', self.peek_next_token()):
                self.match("Identifier")
                # SEMANTIC CHECK
                if re.match(r'Identifier\d*$', self.peek_previous_token()):
                    self.check_variable_usage()
                #  close it with ')' Divert(id)
                if self.peek_next_token() == ")":
                    self.match(")")
                    #  must be followed by '['
                    if self.peek_next_token() == "[":
                        self.match("[")
                        #  does it have a case statement?
                        if self.peek_next_token() == "Scenario":
                            self.parse_case_stmnt()  # consume Scenario
                            #  close it
                            if self.peek_next_token() == "]":
                                self.match("]")
                            #  else error
                            elif (self.peek_previous_token() == "]") and self.peek_next_token() != "]":
                                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                        #  does it have a default statement
                        elif self.peek_next_token() == "Nominal":
                            self.parse_default_stmnt()  # consume Nominal
                            #  close it
                            if self.peek_next_token() == "]":
                                self.match("]")
                            #  else error
                            elif (self.peek_previous_token() == "]") and self.peek_next_token() != "]":
                                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                        # error: not followed by any
                        else:
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Scenario', 'Nominal', ']', but instead got '{self.peek_next_token()}'")
                    #  not followed by '['
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '[', but instead got '{self.peek_next_token()}'")
                #  not closed with ')'
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
            #  error: not followed by an identifier
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
        #  not followed by '('
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '(', but instead got '{self.peek_next_token()}'")

    #  method for parsing case statements (Scenario)
    def parse_case_stmnt(self):
        if self.peek_next_token() == "Scenario":
            self.match("Scenario")  # consume scenario
            #  must be followed by either an integer or identifier
            if re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral":
                self.match(Resources.Value3)  # consume either values
                # SEMANTIC CHECK
                if re.match(r'Identifier\d*$', self.peek_previous_token()):
                    self.check_variable_usage()
                #  followed by ':' , 'Scenario value :'
                if self.peek_next_token() == ":":
                    self.match(":")
                    if self.peek_next_token() == "[":
                        self.match("[")  # consume '['
                        self.parse_statements1()  # must have statements (including nested switch or inner switch)
                        #  has break (Deviate)
                        if self.peek_next_token() == "Deviate":
                            self.match("Deviate")
                            #  must terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                                #  close it
                                if self.peek_next_token() == "]":
                                    self.match("]")
                                    #  is it followed by another case statement? (Scenario)
                                    if self.peek_next_token() == "Scenario":
                                        self.parse_case_stmnt()
                                    #  is it followed by a default statement? (Scenario)
                                    elif self.peek_next_token() == "Nominal":
                                        self.parse_default_stmnt()  # consume Nominal
                                    #  neither
                                    else:
                                        return True
                                #  not closed with ']'
                                else:
                                    self.notMainError = True
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                            #  not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                        # close it with ']'
                        elif self.peek_next_token() == "]":
                            self.match("]")
                            #  is it followed by another case statement? (Scenario)
                            if self.peek_next_token() == "Scenario":
                                self.parse_case_stmnt()
                            #  is it followed by a default statement? (Scenario)
                            elif self.peek_next_token() == "Nominal":
                                self.parse_default_stmnt()  # consume Nominal
                            #  neither
                            else:
                                return True
                        #  error: not closed with ']'
                        elif ((self.peek_next_token() != "]" or self.peek_next_token() != "Deviate")
                              and self.peek_previous_token() == "#" or self.peek_previous_token() == "["
                              or self.peek_previous_token() == "]"):
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Deviate'"
                                               f", but instead got '{self.peek_next_token()}'")
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '[', but instead got '{self.peek_next_token()}'")
                #  not followed by ':"
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ':', but instead got '{self.peek_next_token()}'")
            #  error: not followed by any of expected values
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'SunLiteral', 'Identifier', but instead got '{self.peek_next_token()}'")
        #  error: Scenario is not next
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Scenario', 'Nominal', ']', but instead got '{self.peek_next_token()}'")

    # parse default statement
    def parse_default_stmnt(self):
        if self.peek_next_token() == "Nominal":
            self.match("Nominal")
            #  followed by ':' , 'Scenario value :'
            if self.peek_next_token() == ":":
                self.match(":")
                if self.peek_next_token() == "[":
                    self.match("[")  # consume '['
                    self.parse_statements1()  # must have statements
                    #  has break (Deviate)
                    if self.peek_next_token() == "Deviate":
                        self.match("Deviate")
                        #  must terminate it
                        if self.peek_next_token() == "#":
                            self.match("#")
                            #  close it
                            if self.peek_next_token() == "]":
                                self.match("]")
                            #  not closed with ']'
                            else:
                                self.notMainError = True
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                        #  not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                    # close it with ']'
                    elif self.peek_next_token() == "]":
                        self.match("]")
                    #  error: not closed with ']'
                    elif ((self.peek_next_token() != "]" or self.peek_next_token() != "Deviate")
                          and self.peek_previous_token() == "#" or self.peek_previous_token() == "["
                          or self.peek_previous_token() == "]"):
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Deviate'"
                                           f", but instead got '{self.peek_next_token()}'")
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '[', but instead got '{self.peek_next_token()}'")
            #  not followed by ':"
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ':', but instead got '{self.peek_next_token()}'")
        #  not nominal
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Scenario', 'Nominal', ']', but instead got '{self.peek_next_token()}'")

    def parse_for_loop(self):
        if self.peek_next_token() == "(":
            self.match("(")  # consume '('
            self.parse_for_loop_initial() # for loop initial syntax
            #  condition path
            if (re.match(r'Identifier\d*$', self.peek_next_token()) or self.peek_next_token() == "SunLiteral"
                    or self.peek_next_token() == "LuhmanLiteral" or self.peek_next_token() == "StarsysLiteral"
                    or self.peek_next_token() == "True" or self.peek_next_token() == "False"):
                self.match_condition2(Resources.Value1)
                #  terminate it after condition is complete
                if self.peek_next_token() == "#":
                    self.match("#")
                    # close it with ')' if no loop update: i++, ++i, --i, i--, i = i + 1, etc..
                    if self.peek_next_token() == ")":
                        self.match(")")
                        #  '[' must be next
                        if self.peek_next_token() == "[":
                            self.match("[")
                            # statements including for loop (nested)
                            self.parse_statements1()
                            # must be terminated with ']'
                            if self.peek_next_token() == "]":
                                self.match("]")
                            #  ended with Deviate or Proceed
                            elif self.peek_next_token() == "Proceed" or self.peek_next_token() == "Deviate":
                                self.match(Resources.loopbrkcont)  # consume either
                                # must be terminated
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                    # must be followed with ']'
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                        #  error: not followed by ']'
                                    else:
                                        self.notMainError = True
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  not followed by any of the following
                            else:
                                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Deviate', 'Proceed', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by '['
                        else:
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '[', but instead got '{self.peek_next_token()}'")
                    #  loop update path: ++i, or --i (pre)
                    elif self.peek_next_token() == "++" or self.peek_next_token() == "--":
                        self.match(Resources.loopup)  # consume '++' or '--'
                        #  must be followed by an Identifier
                        if (re.match(r'Identifier\d*$', self.peek_next_token())):
                            self.match("Identifier")  # consume Identifier
                            # SEMANTIC CHECK
                            if re.match(r'Identifier\d*$', self.peek_previous_token()):
                                self.check_variable_usage()

                            #  must close it with ')'
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  '[' must be next
                                if self.peek_next_token() == "[":
                                    self.match("[")
                                    # statements including for loop (nested)
                                    self.parse_statements1()
                                    # must be terminated with ']'
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                    #  ended with Deviate or Proceed
                                    elif self.peek_next_token() == "Proceed" or self.peek_next_token() == "Deviate":
                                        self.match(Resources.loopbrkcont)  # consume either
                                        # must be terminated
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                            # must be followed with ']'
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not followed by ']'
                                            else:
                                                self.notMainError = True
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                                        #  error: not terminated
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    #  not followed by any of the following
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Deviate', 'Proceed', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by '['
                                else:
                                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '[', but instead got '{self.peek_next_token()}'")
                            #  not closed with ')'
                            else:
                                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  not followed by an Identifier
                        else:
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  loop update path: i++, i--, i = i + 1 or expression (post)
                    elif (re.match(r'Identifier\d*$', self.peek_next_token())):
                        self.parse_loop_post_up() # parse loop update (post)
                        # close it with ')'
                        if self.peek_next_token() == ")":
                            self.match(")")
                            #  '[' must be next
                            if self.peek_next_token() == "[":
                                self.match("[")
                                # statements including for loop (nested)
                                self.parse_statements1()
                                # must be terminated with ']'
                                if self.peek_next_token() == "]":
                                    self.match("]")
                                #  ended with Deviate or Proceed
                                elif self.peek_next_token() == "Proceed" or self.peek_next_token() == "Deviate":
                                    self.match(Resources.loopbrkcont)  # consume either
                                    # must be terminated
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                        # must be followed with ']'
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not followed by ']'
                                        else:
                                            self.notMainError = True
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                                    #  error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                                #  not followed by any of the following
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Deviate', 'Proceed', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by '['
                            else:
                                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '[', but instead got '{self.peek_next_token()}'")
                        #  error: not closed with ')'
                        else:
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                    #  error: not closed with ")" or followed by a loop update
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', '++', '--', 'Identifier', but instead got '{self.peek_next_token()}'")
                #  error: not terminated
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '#', '==', '!=', '<', '>', "
                                       f"'<=', '>=', '&&', '||', '!', but instead got '{self.peek_next_token()}'")
            #  not followed by any of the values for condition making
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral',"
                                   f" 'StarsysLiteral', 'True', 'False', but instead got '{self.peek_next_token()}'")
        #  error: not followed by '('
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '(', but instead got '{self.peek_next_token()}'")

    def parse_for_loop_initial(self):
        #  explicit loop initial: Sun a = 12, Sun a = 12.5, Sun a = id
        if self.peek_next_token() == "Sun" or self.peek_next_token() == "Luhman":
            self.match(Resources.Datatype3)  # consume datatypes
            # SEMANTIC CHECK
            if self.peek_previous_token() == "Sun" or self.peek_previous_token() == "Luhman":
                self.fore_datatype = self.peek_previous_token()
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Datatype Mismatch) Datatype {self.peek_previous_token()} cannot be used as a loop variable initial datatype.)")
            #  must be followed by an identifier
            if re.match(r'Identifier\d*$', self.peek_next_token()):
                self.match("Identifier")
                # SEMANTIC CHECK
                self.fore_var_name = self.peek_previous_lexeme()
                self.check_fore_loop_initial(self.fore_datatype, self.fore_var_name)

                #  must be followed by an (=)
                if self.peek_next_token() == "=":
                    self.match("=")
                    # must be followed by these values
                    if (re.match(r'Identifier\d*$', self.peek_next_token())
                            or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"):
                        self.match(Resources.Value2)  # consume values
                        # SEMANTIC CHECK

                        #  single value path, close it with terminator
                        if self.peek_next_token() == "#":
                            self.match("#")
                            return True  # proceed to condition
                        # add it
                        elif self.peek_next_token() == "+":
                            self.match_mathop2("+")
                            # terminate it if done
                            if self.peek_next_token() == "#":
                                self.match("#")
                                return True  # proceed to condition
                            #  error: not followed by any of the expected characters
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                        # exponentiate it
                        elif self.peek_next_token() == "**":
                            self.match_exponent2("**")
                            # terminate it if done
                            if self.peek_next_token() == "#":
                                self.match("#")
                                return True  # proceed to condition
                            #  error: not followed by any of the expected characters
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                        # subtract it
                        elif self.peek_next_token() == "-":
                            self.match_mathop2("-")
                            # terminate it if done
                            if self.peek_next_token() == "#":
                                self.match("#")
                                return True  # proceed to condition
                            #  error: not followed by any of the expected characters
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                        # multiply it
                        elif self.peek_next_token() == "*":
                            self.match_mathop2("*")
                            # terminate it if done
                            if self.peek_next_token() == "#":
                                self.match("#")
                                return True  # proceed to condition
                            #  error: not followed by any of the expected characters
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                        # divide it
                        elif self.peek_next_token() == "/":
                            self.match_mathop2("/")
                            # terminate it if done
                            if self.peek_next_token() == "#":
                                self.match("#")
                                return True  # proceed to condition
                            #  error: not followed by any of the expected characters
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                        # modulo it
                        elif self.peek_next_token() == "%":
                            self.match_mathop2("%")
                            # terminate it if done
                            if self.peek_next_token() == "#":
                                self.match("#")
                                return True  # proceed to condition
                            #  error: not followed by any of the expected characters
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by any of the expected characters
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  error: not followed by any of the expected values
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected 'Idnetifier', 'SunLiteral', 'LuhmanLiteral', but instead got '{self.peek_next_token()}'")
                #  error: not followed by an equal
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax Error: Expected '=', but instead got '{self.peek_next_token()}'")
            #  error: not followed by an identifier
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
        #  loop initial is initialized somewhere: a = 12, a = 12.5, a = a
        elif re.match(r'Identifier\d*$', self.peek_next_token()):
            self.match("Identifier")  # consume Identifier
            # SEMANTIC CHECK
            if re.match(r'Identifier\d*$', self.peek_previous_token()):
                self.check_variable_usage()
            #  must be followed by an (=)
            if self.peek_next_token() == "=":
                self.match("=")
                # must be followed by these values
                if (re.match(r'Identifier\d*$', self.peek_next_token())
                        or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"):
                    self.match(Resources.Value2)  # consume values
                    #  single value path, close it with terminator
                    if self.peek_next_token() == "#":
                        self.match("#")
                        return True  # proceed to condition
                    # add it
                    elif self.peek_next_token() == "+":
                        self.match_mathop2("+")
                        # terminate it if done
                        if self.peek_next_token() == "#":
                            self.match("#")
                            return True  # proceed to condition
                        #  error: not followed by any of the expected characters
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    # exponentiate it
                    elif self.peek_next_token() == "**":
                        self.match_exponent2("**")
                        # terminate it if done
                        if self.peek_next_token() == "#":
                            self.match("#")
                            return True  # proceed to condition
                        #  error: not followed by any of the expected characters
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    # subtract it
                    elif self.peek_next_token() == "-":
                        self.match_mathop2("-")
                        # terminate it if done
                        if self.peek_next_token() == "#":
                            self.match("#")
                            return True  # proceed to condition
                        #  error: not followed by any of the expected characters
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    # multiply it
                    elif self.peek_next_token() == "*":
                        self.match_mathop2("*")
                        # terminate it if done
                        if self.peek_next_token() == "#":
                            self.match("#")
                            return True  # proceed to condition
                        #  error: not followed by any of the expected characters
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    # divide it
                    elif self.peek_next_token() == "/":
                        self.match_mathop2("/")
                        # terminate it if done
                        if self.peek_next_token() == "#":
                            self.match("#")
                            return True  # proceed to condition
                        #  error: not followed by any of the expected characters
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    # modulo it
                    elif self.peek_next_token() == "%":
                        self.match_mathop2("%")
                        # terminate it if done
                        if self.peek_next_token() == "#":
                            self.match("#")
                            return True  # proceed to condition
                        #  error: not followed by any of the expected characters
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  error: not followed by any of the expected characters
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                #  error: not followed by any of the expected values
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax Error: Expected 'Idnetifier', 'SunLiteral', 'LuhmanLiteral', but instead got '{self.peek_next_token()}'")
            #  error: not followed by an equal
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax Error: Expected '=', but instead got '{self.peek_next_token()}'")
        #  error: no data type or identifier
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Syntax Error: Expected 'Sun', 'Luhman', 'Identifier', but instead got '{self.peek_next_token()}'")

    def parse_loop_post_up(self):
        if re.match(r'Identifier\d*$', self.peek_next_token()):
            self.match("Identifier")
            # SEMANTIC CHECK
            if re.match(r'Identifier\d*$', self.peek_previous_token()):
                self.check_variable_usage()

            #  usage of ++ and --?
            if self.peek_next_token() == "++" or self.peek_next_token() == "--":
                self.match(Resources.loopup)
                if self.peek_next_token() == ")" or self.peek_next_token() == "#":
                    return True
                #  error: not closed with ')'
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax Error: Expected ')', '#' but instead got '{self.peek_next_token()}'")
            #  assign value? (=)
            elif self.peek_next_token() == "=":
                self.match("=")
                if (re.match(r'Identifier\d*$', self.peek_next_token())
                        or self.peek_next_token() == "SunLiteral" or self.peek_next_token() == "LuhmanLiteral"):
                    self.match(Resources.Value2)  # consume values
                    #  single value
                    if self.peek_next_token() == ")" or self.peek_next_token() == "#":
                        self.match(Resources.loopuppost)  # close it with ')'
                    # add it
                    elif self.peek_next_token() == "+":
                        self.match_mathop2("+")
                        # close it if done
                        if self.peek_next_token() == ")" or self.peek_next_token() == "#":
                            return True # proceed to close
                        #  error: not followed by any of the expected characters
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected ')', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    # exponentiate it
                    elif self.peek_next_token() == "**":
                        self.match_exponent2("**")
                        # close it if done
                        if self.peek_next_token() == ")" or self.peek_next_token() == "#":
                            return True  # proceed to close
                        #  error: not followed by any of the expected characters
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected ')', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    # subtract it
                    elif self.peek_next_token() == "-":
                        self.match_mathop2("-")
                        # close it if done
                        if self.peek_next_token() == ")" or self.peek_next_token() == "#":
                            return True  # proceed to close
                        #  error: not followed by any of the expected characters
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected ')', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    # multiply it
                    elif self.peek_next_token() == "*":
                        self.match_mathop2("*")
                        # close it if done
                        if self.peek_next_token() == ")" or self.peek_next_token() == "#":
                            return True  # proceed to close
                        #  error: not followed by any of the expected characters
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected ')', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    # divide it
                    elif self.peek_next_token() == "/":
                        self.match_mathop2("/")
                        # close it if done
                        if self.peek_next_token() == ")" or self.peek_next_token() == "#":
                            return True  # proceed to close
                        #  error: not followed by any of the expected characters
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected ')', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    # modulo it
                    elif self.peek_next_token() == "%":
                        self.match_mathop2("%")
                        # close it if done
                        if self.peek_next_token() == ")" or self.peek_next_token() == "#":
                            return True  # proceed to close
                        #  error: not followed by any of the expected characters
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', '+', '-', '*', '/', '%', but instead got '{self.peek_next_token()}'")
                    #  not followed by any of the characters
                    else:
                        self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected ')', '+', '-', '/', '%', '*', '**', but instead got '{self.peek_next_token()}'")
                #  error: no values after (=)
                else:
                    self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', 'SunLiteral', 'LuhmanLiteral', but instead got '{self.peek_next_token()}'")
            #  error: not followed by '=' or '++'/'--'
            else:
                self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected '=', '++', '--', but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")

    def parse_while_loop(self):
        if self.peek_next_token() == "Span":
            self.match("Span")
            #  while condition '('
            if self.peek_next_token() == "(":
                self.match_condition("(")
                #  condition making is done, must be enclosed with ')'
                if self.peek_next_token() == ")":
                    self.match(")")
                    #  must be followed by '['
                    if self.peek_next_token() == "[":
                        self.match("[")
                        #  statements
                        self.parse_statements1()  # includes possibility of nested while
                        # must be terminated with ']'
                        if self.peek_next_token() == "]":
                            self.match("]")
                        #  ended with Deviate or Proceed no loop update
                        elif self.peek_next_token() == "Proceed" or self.peek_next_token() == "Deviate":
                            self.match(Resources.loopbrkcont)  # consume either
                            # must be terminated
                            if self.peek_next_token() == "#":
                                self.match("#")
                                # must be followed with ']'
                                if self.peek_next_token() == "]":
                                    self.match("]")
                                #  error: not followed by ']'
                                else:
                                    self.notMainError = True
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                        #  loop update path: ++i or --i (pre)
                        elif self.peek_next_token() == "++" or self.peek_next_token() == "--":
                            self.match(Resources.loopup)  # consume '++' or '--'
                            #  must be followed by an Identifier
                            if (re.match(r'Identifier\d*$', self.peek_next_token())):
                                self.match("Identifier")  # consume Identifier
                                #  must be terminated with '#'
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                    #  next is Deviate or Proceed
                                    if self.peek_next_token() == "Proceed" or self.peek_next_token() == "Deviate":
                                        self.match(Resources.loopbrkcont)  # consume either
                                        # must be terminated
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                            # must be followed with ']'
                                            if self.peek_next_token() == "]":
                                                self.match("]")
                                            #  error: not followed by ']'
                                            else:
                                                self.notMainError = True
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                                        #  error: not terminated
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    # no deviate or proceed after loop update, must be followed by ']'
                                    elif self.peek_next_token() == "]":
                                        self.match("]")
                                    #  error: not followed by ']'
                                    else:
                                        self.errors.append(
                                             f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Deviate', 'Proceed', but instead got '{self.peek_next_token()}'")
                                # error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by an identifier
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                        #  loop update path: i++ or i-- or i = i + 1 (post)
                        elif (re.match(r'Identifier\d*$', self.peek_next_token())):
                            self.parse_loop_post_up()  # consume 'Identifier'
                            #  terminate it
                            if self.peek_next_token() == "#":
                                self.match("#")
                                #  next is Deviate or Proceed
                                if self.peek_next_token() == "Proceed" or self.peek_next_token() == "Deviate":
                                    self.match(Resources.loopbrkcont)  # consume either
                                    # must be terminated
                                    if self.peek_next_token() == "#":
                                        self.match("#")
                                        # must be followed with ']'
                                        if self.peek_next_token() == "]":
                                            self.match("]")
                                        #  error: not followed by ']'
                                        else:
                                            self.notMainError = True
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                                    #  error: not terminated
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                                # no deviate or proceed after loop update, must be followed by ']'
                                elif self.peek_next_token() == "]":
                                    self.match("]")
                                #  error: not followed by ']'
                                else:
                                    self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Proceed', 'Deviate', but instead got '{self.peek_next_token()}'")
                            # error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                        #  not followed by any of the following
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Deviate', 'Proceed', '++', '--', 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  error: not followed by '['
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
                #  error: not closed with ')'
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax error: Expected ')', but instead got '{self.peek_next_token()}'")
            #  error: not followed by "("
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected '(', but instead got '{self.peek_next_token()}'")
        #  no span keyword
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Span', but instead got '{self.peek_next_token()}'")

    def parse_dowhile_loop(self):
        if self.peek_next_token() == "Perform":
            self.match("Perform")
            #  must be followed by '['
            if self.peek_next_token() == "[":
                self.match("[")
                #  statements
                self.parse_statements1()  # includes possibility of nested while
                # must be followed with ']' : no loop update statement or break/continue keyword
                if self.peek_next_token() == "]":
                    self.match("]")
                    #  Span after ']' is required in do-while syntax
                    if self.peek_next_token() == "Span":
                        self.match("Span")
                        #  must be followed with '(' for condition of Span
                        if self.peek_next_token() == "(":
                            self.match_condition("(")
                            #  must be closed with ')' after condition making
                            if self.peek_next_token() == ")":
                                self.match(")")
                                #  terminate it
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                            #  error: not closed with ')'
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                        #  error: not followed '('
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '(', but instead got '{self.peek_next_token()}'")
                    #  error: no span in perform-span synatx
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected 'Span', but instead got '{self.peek_next_token()}'")
                #  ended with Deviate or Proceed no loop update
                elif self.peek_next_token() == "Proceed" or self.peek_next_token() == "Deviate":
                    self.match(Resources.loopbrkcont)  # consume either
                    # must be terminated
                    if self.peek_next_token() == "#":
                        self.match("#")
                        # must be followed with ']'
                        if self.peek_next_token() == "]":
                            self.match("]")
                            #  Span after ']' is required in do-while syntax
                            if self.peek_next_token() == "Span":
                                self.match("Span")
                                #  must be followed with '(' for condition of Span
                                if self.peek_next_token() == "(":
                                    self.match_condition("(")
                                    #  must be closed with ')' after condition making
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  error: not terminated
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    #  error: not closed with ')'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed '('
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '(', but instead got '{self.peek_next_token()}'")
                            #  error: no span in perform-span synatx
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Span', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by ']'
                        else:
                            self.notMainError = True
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                    #  error: not terminated
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                #  loop update path: ++i or --i (pre)
                elif self.peek_next_token() == "++" or self.peek_next_token() == "--":
                    self.match(Resources.loopup)  # consume '++' or '--'
                    #  must be followed by an Identifier
                    if (re.match(r'Identifier\d*$', self.peek_next_token())):
                        self.match("Identifier")  # consume Identifier
                        #  must be terminated with '#'
                        if self.peek_next_token() == "#":
                            self.match("#")
                            #  next is Deviate or Proceed
                            if self.peek_next_token() == "Proceed" or self.peek_next_token() == "Deviate":
                                self.match(Resources.loopbrkcont)  # consume either
                                # must be terminated
                                if self.peek_next_token() == "#":
                                    self.match("#")
                                    # must be followed with ']'
                                    if self.peek_next_token() == "]":
                                        self.match("]")
                                        #  Span after ']' is required in do-while syntax
                                        if self.peek_next_token() == "Span":
                                            self.match("Span")
                                            #  must be followed with '(' for condition of Span
                                            if self.peek_next_token() == "(":
                                                self.match_condition("(")
                                                #  must be closed with ')' after condition making
                                                if self.peek_next_token() == ")":
                                                    self.match(")")
                                                    #  terminate it
                                                    if self.peek_next_token() == "#":
                                                        self.match("#")
                                                    #  error: not terminated
                                                    else:
                                                        self.errors.append(
                                                            f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                                                #  error: not closed with ')'
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                                            #  error: not followed '('
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '(', but instead got '{self.peek_next_token()}'")
                                        #  error: no span in perform-span synatx
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected 'Span', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed by ']'
                                    else:
                                        self.notMainError = True
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                                #  error: not terminated
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                            # no deviate or proceed after loop update, must be followed by ']'
                            elif self.peek_next_token() == "]":
                                self.match("]")
                                #  Span after ']' is required in do-while syntax
                                if self.peek_next_token() == "Span":
                                    self.match("Span")
                                    #  must be followed with '(' for condition of Span
                                    if self.peek_next_token() == "(":
                                        self.match_condition("(")
                                        #  must be closed with ')' after condition making
                                        if self.peek_next_token() == ")":
                                            self.match(")")
                                            #  terminate it
                                            if self.peek_next_token() == "#":
                                                self.match("#")
                                            #  error: not terminated
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                                        #  error: not closed with ')'
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                                    #  error: not followed '('
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected '(', but instead got '{self.peek_next_token()}'")
                                #  error: no span in perform-span synatx
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected 'Span', but instead got '{self.peek_next_token()}'")
                            #  error: not followed by ']'
                            else:
                                self.notMainError = True
                                self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Deviate', 'Proceed', but instead got '{self.peek_next_token()}'")
                        # error: not terminated
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                    #  error: not followed by an identifier
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                #  loop update path: i++ or i-- or i = i + 1 (post)
                elif (re.match(r'Identifier\d*$', self.peek_next_token())):
                    self.parse_loop_post_up()  # consume 'Identifier'
                    #  terminate it
                    if self.peek_next_token() == "#":
                        self.match("#")
                        #  next is Deviate or Proceed
                        if self.peek_next_token() == "Proceed" or self.peek_next_token() == "Deviate":
                            self.match(Resources.loopbrkcont)  # consume either
                            # must be terminated
                            if self.peek_next_token() == "#":
                                self.match("#")
                                # must be followed with ']'
                                if self.peek_next_token() == "]":
                                    self.match("]")
                                    #  Span after ']' is required in do-while syntax
                                    if self.peek_next_token() == "Span":
                                        self.match("Span")
                                        #  must be followed with '(' for condition of Span
                                        if self.peek_next_token() == "(":
                                            self.match_condition("(")
                                            #  must be closed with ')' after condition making
                                            if self.peek_next_token() == ")":
                                                self.match(")")
                                                #  terminate it
                                                if self.peek_next_token() == "#":
                                                    self.match("#")
                                                #  error: not terminated
                                                else:
                                                    self.errors.append(
                                                        f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                                            #  error: not closed with ')'
                                            else:
                                                self.errors.append(
                                                    f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                                        #  error: not followed '('
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected '(', but instead got '{self.peek_next_token()}'")
                                    #  error: no span in perform-span syntax
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected 'Span', but instead got '{self.peek_next_token()}'")
                                #  error: not followed by ']'
                                else:
                                    self.notMainError = True
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected ']', but instead got '{self.peek_next_token()}'")
                            #  error: not terminated
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                        # no deviate or proceed after loop update, must be followed by ']'
                        elif self.peek_next_token() == "]":
                            self.match("]")
                            #  Span after ']' is required in do-while syntax
                            if self.peek_next_token() == "Span":
                                self.match("Span")
                                #  must be followed with '(' for condition of Span
                                if self.peek_next_token() == "(":
                                    self.match_condition("(")
                                    #  must be closed with ')' after condition making
                                    if self.peek_next_token() == ")":
                                        self.match(")")
                                        #  terminate it
                                        if self.peek_next_token() == "#":
                                            self.match("#")
                                        #  error: not terminated
                                        else:
                                            self.errors.append(
                                                f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                                    #  error: not closed with ')'
                                    else:
                                        self.errors.append(
                                            f"(Line {self.line_number}) | Syntax Error: Expected ')', but instead got '{self.peek_next_token()}'")
                                #  error: not followed '('
                                else:
                                    self.errors.append(
                                        f"(Line {self.line_number}) | Syntax Error: Expected '(', but instead got '{self.peek_next_token()}'")
                            #  error: no span in perform-span synatx
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected 'Span', but instead got '{self.peek_next_token()}'")
                        #  error: not followed by ']'
                        else:
                            self.notMainError = True
                            self.errors.append(
                                    f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Deviate', 'Proceed', but instead got '{self.peek_next_token()}'")
                    # error: not terminated
                    else:
                        self.errors.append(
                            f"(Line {self.line_number}) | Syntax Error: Expected '#', but instead got '{self.peek_next_token()}'")
                #  not followed by any of the following
                else:
                    self.errors.append(
                        f"(Line {self.line_number}) | Syntax Error: Expected ']', 'Deviate', 'Proceed', '++', '--', 'Identifier', but instead got '{self.peek_next_token()}'")
            #  error: not followed by '['
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Syntax error: Expected '[', but instead got '{self.peek_next_token()}'")
        #  no perform keyword
        else:
            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Perform', but instead got '{self.peek_next_token()}'")

    # parse the program
    def parse_top_program(self):
        if self.peek_next_token() == "Formulate":
            self.match("Formulate")
            # Check if there are no statements after Formulate, Disintegrate immediately
            if self.peek_next_token() == "Disintegrate":
                self.disintegrate_exist = True
                self.errors.append(f"Syntax Error: Expected 'Import', 'ISS', 'Static', 'Boolean', 'Autom', 'Luhman', "
                                   f"'Starsys', 'Void', 'Class', 'Sun' after 'Formulate'")
            # must be followed by either of the values
            if (self.peek_next_token() == "Static" or self.peek_next_token() == "Sun"
                    or self.peek_next_token() == "Luhman" or self.peek_next_token() == "Starsys"
                    or self.peek_next_token() == "Boolean" or self.peek_next_token() == "Autom"
                    or self.peek_next_token() == "Void" or self.peek_next_token() == "ISS" or self.peek_next_token() == "Class" or self.peek_next_token() == "Import"):
                #  parse import statement
                self.parse_import_statement()
                # Parse: is it a Sun global variable declaration or a subfunction prototype?
                while self.peek_next_token() in ["Static","Sun","Luhman","Starsys","Boolean","Autom","Void", "ISS", "Class"]:
                    #  Parse: is it a constant dec?
                    if self.peek_next_token() == "Static":
                        self.match("Static")  # consume Static
                        # Parse: is it a Sun global variable declaration or a subfunction prototype?
                        if self.peek_next_token() == "Sun":
                            self.match("Sun")  # consume Sun
                            #  check if there is an identifier after the datatype
                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.parse_variable_declaration()
                            #  error: no identifier after datatype
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                        # Parse: is it a Luhman global variable declaration or a subfunction prototype?
                        elif self.peek_next_token() == "Luhman":
                            self.match("Luhman")  # consume Luhman
                            #  check if there is an identifier after the datatype
                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.parse_variable_declaration()
                            #  error: no identifier after datatype
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                        # Parse: is it a Starsys global variable declaration or a subfunction prototype?
                        elif self.peek_next_token() == "Starsys":
                            self.match("Starsys")  # consume Starsys
                            #  check if there is an identifier after the datatype
                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.parse_variable_declaration()
                            else:
                                #  error: no identifier after datatype
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                        # Parse: is it a Boolean global variable declaration or a subfunction prototype?
                        elif self.peek_next_token() == "Boolean":
                            self.match("Boolean")  # consume Bool
                            #  check if there is an identifier after the datatype
                            if re.match(r'Identifier\d*$', self.peek_next_token()):
                                self.parse_boolean()
                            #  error: no identifier after datatype
                            else:
                                self.errors.append(
                                    f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                        #  no data type is next to Static
                        else:
                            self.errors.append(f"(Line {self.line_number}) | Syntax Error: Expected 'Sun', 'Luhman', 'Starsys', 'Boolean', but instead got '{self.peek_next_token()}'")
                    # Parse: is it a Void subfunc prototype declaration?
                    elif self.peek_next_token() == "Void":
                        self.match("Void")  # consume Void
                        #  check if there is an identifier after the datatype
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.parse_void_declaration()
                        #  error: no identifier after datatype
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    # Parse: is it a Sun global variable declaration or a subfunction prototype?
                    elif self.peek_next_token() == "Sun":
                        self.match("Sun")  # consume Sun
                        #  check if there is an identifier after the datatype
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.parse_variable_declaration()
                            '''
                            if self.peek_next_token() == "[":
                                break
                            '''
                        #  error: no identifier after datatype
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    # Parse: is it a Luhman global variable declaration or a subfunction prototype?
                    elif self.peek_next_token() == "Luhman":
                        self.match("Luhman")  # consume Luhman
                        #  check if there is an identifier after the datatype
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.parse_variable_declaration()
                        #  error: no identifier after datatype
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    # Parse: is it a Starsys global variable declaration or a subfunction prototype?
                    elif self.peek_next_token() == "Starsys":
                        self.match("Starsys")  # consume Starsys
                        #  check if there is an identifier after the datatype
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.parse_variable_declaration()
                        else:
                            #  error: no identifier after datatype
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    # Parse: is it a Boolean global variable declaration or a subfunction prototype?
                    elif self.peek_next_token() == "Boolean":
                        self.match("Boolean")  # consume Bool
                        #  check if there is an identifier after the datatype
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.parse_boolean()
                        #  error: no identifier after datatype
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    # Parse: is it an Autom global variable declaration?
                    elif self.peek_next_token() == "Autom":
                        self.match("Autom")  # consume Autom
                        #  check if there is an identifier after the datatype
                        if re.match(r'Identifier\d*$', self.peek_next_token()):
                            self.parse_auto_dec()
                        #  error: no identifier after datatype
                        else:
                            self.errors.append(
                                f"(Line {self.line_number}) | Syntax error: Expected 'Identifier', but instead got '{self.peek_next_token()}'")
                    #  Parse: is it a globally declared Struct?
                    elif self.peek_next_token() == "ISS":
                        self.struct_scope = "global"
                        self.struct_current_scope = self.struct_scope
                        self.match_struct("ISS")
                    #  Parse: is it a globally declared Class?
                    elif self.peek_next_token() == "Class":
                        self.class_scope = "global"
                        self.class_current_scope = self.class_scope
                        self.match_class_stmnt("Class")
                    else:
                        break
            else:
                self.errors.append(f"Syntax Error: Expected 'Import', 'Sun', 'Luhman', 'Starsys', 'Boolean', 'Autom', 'Static', 'Void', 'Class', 'ISS', but instead got '{self.peek_next_token()}'")
        else:
            self.errors.append(f"Syntax Error: Expected 'Formulate' before '{self.peek_next_token()}'")
            #self.errors.append(f"Syntax Error: Expected 'Import', 'ISS', 'Static', 'Boolean', 'Autom', 'Luhman', "
            #f"'Starsys', 'Void', 'Class', 'Sun' after 'Formulate'")

        # SEMANTIC CHECK
        self.check_undefined_functions()


        # check if Import appeared even when not after 'Formulate'
        if self.peek_next_token() == "Import":
            self.errors.append(f"Syntax Error: 'Import' syntax unexpected")
        elif self.peek_next_token() == "Formulate":
            self.errors.append(
                f"Syntax Error: 'Formulate' keyword can only appear once and on the very top of the program")
        else:
            pass

    # POPULATE SYMBOL TABLE

    # global, and local variables table
    def declare_variable(self, var_name, datatype, scope):
        # Append the function name to the scope if the current scope is a function
        if self.current_scope == 'function':
            scope += '_' + self.function_name
        # check if the variable is a function prototype name
        if var_name in self.prototype_parameter_table:
            self.prototype_function_exist = True
        if var_name in self.symbol_table:
            if self.symbol_table[var_name]['scope'] == scope:
                # Variable is already declared in the same scope, increment the count
                self.symbol_table[var_name]['count'] += 1
                if (not self.function_exist and not self.prototype_function_exist
                        and (self.symbol_table[var_name]['count'] > 2)):
                    # Variable is declared more than once in the same scope, report error
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Redeclaration Error) Variable '{var_name}' is already declared in the same scope")
            else:
                # Variable is declared in a different scope, update scope and reset count
                self.symbol_table[var_name] = {'datatype': datatype, 'scope': scope, 'count': 1}
        else:
            # Variable is not yet declared, add it to the symbol table with count 1
            self.symbol_table[var_name] = {'datatype': datatype, 'scope': scope, 'count': 1}

    # store parameter of a function prototype
    def declare_prototype_parameter_variable(self, function_datatype, function_name, datatype, var_name):
        if function_name in self.prototype_parameter_table:
            variables_in_function = self.prototype_parameter_table[function_name]
            for variable_info in variables_in_function:
                if variable_info['var_name'] == var_name and not self.prototype_function_exist:
                    # Variable with the same name already exists in this function, report an error
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Redeclaration Error) Variable '{var_name}' is already declared in the same scope")
                    return

            # If the variable doesn't exist in this function, append it to the list
            self.prototype_parameter_table[function_name].append({'function_datatype' : function_datatype,'datatype': datatype, 'var_name': var_name})
        else:
            # If the function name doesn't exist, create a new list with the variable information
            self.prototype_parameter_table[function_name] = [{'function_datatype' : function_datatype, 'datatype': datatype, 'var_name': var_name}]
        self.prototype_current_function_name = function_name

    # Store parameter of a function definition
    def declare_parameter_variable(self, function_datatype, function_name, datatype, var_name):
        if function_name in self.parameter_table:
            variables_in_function = self.parameter_table[function_name]
            for variable_info in variables_in_function:
                if variable_info['var_name'] == var_name and not self.function_exist:
                    # Variable with the same name already exists in this function, report an error
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Redeclaration Error) Variable '{var_name}' is already declared as a parameter")
                    return

            # If the variable doesn't exist in this function, append it to the list
            self.parameter_table[function_name].append({'function_datatype' : function_datatype, 'datatype': datatype, 'var_name': var_name})
        else:
            # If the function name doesn't exist, create a new list with the variable information
            self.parameter_table[function_name] = [{'function_datatype' : function_datatype, 'datatype': datatype, 'var_name': var_name}]
        self.current_function_name = function_name

    # store class
    def declare_class(self, class_name, class_scope):
        # check if the variable is a function prototype name
        if class_name in self.prototype_parameter_table:
            self.prototype_function_exist = True
        if class_name in self.class_table:
            if self.class_table[class_name]['scope'] == class_scope:
                # Class is already declared in the same scope, increment the count
                self.class_table[class_name]['count'] += 1
                if (not self.function_exist and not self.prototype_function_exist
                        and (self.class_table[class_name]['count'] > 1)):
                    # Class is declared more than once in the same scope, report error
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Redeclaration Error) Class '{class_name}' is already declared in the same scope")
            else:
                # Class is declared in a different scope, update scope and reset count
                self.class_table[class_name] = {'scope': class_scope, 'count': 1}
        else:
            # Class is not yet declared, add it to the symbol table with count 1
            self.class_table[class_name] = {'scope': class_scope, 'count': 1}

    # store ISS (struct)
    def declare_struct(self, struct_name, struct_scope):
        # check if the variable is a function prototype name
        if struct_name in self.prototype_parameter_table:
            self.prototype_function_exist = True
        if struct_name in self.struct_table:
            if self.struct_table[struct_name]['scope'] == struct_scope:
                # Class is already declared in the same scope, increment the count
                self.struct_table[struct_name]['count'] += 1
                if (not self.function_exist and not self.prototype_function_exist
                        and (self.struct_table[struct_name]['count'] > 1)):
                    # Class is declared more than once in the same scope, report error
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Redeclaration Error) ISS '{struct_name}' is already declared in the same scope")
            else:
                # Class is declared in a different scope, update scope and reset count
                self.struct_table[struct_name] = {'scope': struct_scope, 'count': 1}
        else:
            # Class is not yet declared, add it to the symbol table with count 1
            self.struct_table[struct_name] = {'scope': struct_scope, 'count': 1}

    # Store array variable in the table, 1D
    def declare_array(self, array_variable, array_size):
        self.array_variable_table[array_variable] = {'array_size': array_size}

    # ARRAY VALUE COUNT 1D
    def array_count(self, array_variable, array_count):
        self.array_count_table[array_variable] = {'array_count': array_count}

    # Store array variable in the table, 2D
    def declare_array2(self, array_variable, array_size):
        self.array2_variable_table[array_variable] = {'array_size2': array_size}

    # ARRAY VALUE COUNT 2D (ROW)
    def array_count_row(self, array_variable, array_count):
        self.array2_count_row_table[array_variable] = {'array_count_row': array_count}

    # ARRAY VALUE COUNT 2D (COLUMN)
    def array_count_column(self, array_variable, array_count, array_row):
        self.array2_count_column_table[array_variable] = {'array_count_column': array_count, 'row': array_row}

    def check_fore_loop_initial(self, datatype, var_name):
        # populate the fore_table, and have a unique id everytime it creates it
        self.fore_table[self.fore_id] = {'datatype' : datatype, 'var_name' : var_name}
        self.fore_id += 1  # increment fore_id by one every time this method is used to populate the fore_table

    #SEMANIC CHECKS

    # Check if the parameters in the function prototype matches the ones in its definition
    def compare_function_parameters(self, function_name):
        # Check if the function name exists in both parameter tables
        if function_name in self.parameter_table and function_name in self.prototype_parameter_table:
            # Retrieve the parameters associated with the function name
            parameters_defined = self.parameter_table[function_name]
            parameters_prototype = self.prototype_parameter_table[function_name]

            # Iterate over the parameters to compare datatype and variable name
            for param_def, param_proto in zip(parameters_defined, parameters_prototype):
                # Check if the function_datatype does not match
                if param_def['function_datatype'] != param_proto['function_datatype']:
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Datatype Mismatch) Function definition datatype does not match its prototype")
                    return

            # Check if all parameters in prototype are present in defined
            if not all(param_proto in parameters_defined for param_proto in
                         parameters_prototype) and not self.function_exist and not self.prototype_function_exist:
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Parameter Mismatch) Defined function '{function_name}' is missing a parameter")
                return
            # Check if the function names match
            elif parameters_defined != parameters_prototype and not self.function_exist and not self.prototype_function_exist:
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Paramater Mismatch) Defined function '{function_name}' has an invalid parameter")
                return
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Semantic Error: (Undeclared Function) Function '{function_name}' is not declared")

    # Check if the function prototype is defined
    def check_undefined_functions(self):
        for function_name in self.prototype_parameter_table:
            if function_name not in self.parameter_table and function_name != "Universe":
                self.errors.append(
                    f"Semantic Error: (Undefined Function) Function '{function_name}' is not defined"
                )

    # Check if parameter variable is declared again in the function
    def check_variable_redeclaration(self):
        for parameters in self.parameter_table.values():
            for parameter in parameters:
                if parameter['var_name'] == self.var_name:
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic error: (Redeclaration Error) Variable '{self.var_name}' is already declared as a parameter"
                    )
                    return

    # Check if the variable assigned is declared in the parameter
    def function_parameter_variable(self):
        if self.current_function_name is not None:
            # checks if any of these dictionaries have a 'var_name' key equal to the previous lexeme
            if any(param.get('var_name') == self.peek_previous_lexeme() for param in
                   self.parameter_table.get(self.current_function_name, {})):
                # It is valid within the current function as a parameter variable
                self.isParameterVariable = True
                return
            else:
                self.isParameterVariable = False
                return

    #  Check if the variable is declared within its scope
    def check_variable_usage(self):
        # Get the previous lexeme (assumed to be the variable name)
        var_name = self.peek_previous_lexeme()
        # Check if the variable is in the symbol table
        if var_name in self.symbol_table:
            declared_scope = self.symbol_table[var_name]['scope']
            # Check if the declared scope matches the current scope
            if declared_scope == 'global' or declared_scope == self.current_scope or declared_scope.startswith('function'):
                return True  # Variable usage is valid within the current scope
            else:
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Undeclared Variable) Variable '{var_name}' is not accessible from the current scope")
                return None, False
        else:
            # Check if the variable is in the fore_table
            for key in self.fore_table:
                if var_name == self.fore_table[key]['var_name']:
                    return True

            # Check if the variable is in the function parameter
            for param in self.parameter_table.get(self.current_function_name, {}):
                if param.get('var_name') == var_name:
                    return True

            # If the variable is not found in any fore_table entry
            self.errors.append(
                f"(Line {self.line_number}) | Semantic Error: (Undeclared Variable) Variable '{var_name}' is not declared")
            return None, False


    #  assignment value checking
    def check_assignment_type(self):
        # Retrieve the scope from the symbol table for the variable
        variable_entry = self.symbol_table.get(self.assignment_variable)
        if variable_entry is None:  # no variable assigned yet
            return True
        # Perform semantic analysis specific to datatypes and their value
        expected_datatype = variable_entry['datatype']
        if self.assignment_variable in self.symbol_table:
            # Perform semantic checks based on datatype
            if expected_datatype == "Sun" and self.peek_next_token() == "StarsysLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Sun'")
            elif expected_datatype == "Sun" and self.peek_next_token() == "True":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Sun'")
            elif expected_datatype == "Sun" and self.peek_next_token() == "False":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Sun'")
            elif expected_datatype == "Luhman" and self.peek_next_token() == "StarsysLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Luhman'")
            elif expected_datatype == "Luhman" and self.peek_next_token() == "True":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Luhman'")
            elif expected_datatype == "Luhman" and self.peek_next_token() == "False":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Luhman'")
            elif expected_datatype == "Starsys" and self.peek_next_token() == "LuhmanLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'LuhmanLiteral' is Incompatible with Datatype 'Starsys'")
            elif expected_datatype == "Starsys" and self.peek_next_token() == "SunLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'SunLiteral' is Incompatible with Datatype 'Starsys'")
            elif expected_datatype == "Starsys" and self.peek_next_token() == "True":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Starsys'")
            elif expected_datatype == "Starsys" and self.peek_next_token() == "False":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Starsys'")
            elif expected_datatype == "Boolean" and self.peek_next_token() == "SunLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'SunLiteral' is Incompatible with Datatype 'Boolean'")
            elif expected_datatype == "Boolean" and self.peek_next_token() == "LuhmanLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'LuhmanLiteral' is Incompatible with Datatype 'Boolean'")
            elif expected_datatype == "Boolean" and self.peek_next_token() == "StarsysLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Boolean'")
        # the variable is not declared
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Semantic Error: Variable not declared")

    # check prototype parameter's parameter variable assigned values
    def check_prototype_parameter_assignment_type(self):
        variable_entry = self.prototype_parameter_table.get(self.prototype_current_function_name)
        if variable_entry is None:  # no variable assigned yet
            return True

        # Check if variable_entry is a list
        if isinstance(variable_entry, list):
            for entry in variable_entry:
                expected_datatype = entry.get('datatype')
                if self.prototype_function_parameter_var in entry.get('var_name'):
                    # Perform semantic checks based on datatype
                    if expected_datatype == "Sun" and self.peek_next_token() == "StarsysLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Sun'")
                    elif expected_datatype == "Sun" and self.peek_next_token() == "True":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Sun'")
                    elif expected_datatype == "Sun" and self.peek_next_token() == "False":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Sun'")
                    elif expected_datatype == "Luhman" and self.peek_next_token() == "StarsysLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Luhman'")
                    elif expected_datatype == "Luhman" and self.peek_next_token() == "True":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Luhman'")
                    elif expected_datatype == "Luhman" and self.peek_next_token() == "False":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Luhman'")
                    elif expected_datatype == "Starsys" and self.peek_next_token() == "LuhmanLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'LuhmanLiteral' is Incompatible with Datatype 'Starsys'")
                    elif expected_datatype == "Starsys" and self.peek_next_token() == "SunLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'SunLiteral' is Incompatible with Datatype 'Starsys'")
                    elif expected_datatype == "Starsys" and self.peek_next_token() == "True":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Starsys'")
                    elif expected_datatype == "Starsys" and self.peek_next_token() == "False":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Starsys'")
                    elif expected_datatype == "Boolean" and self.peek_next_token() == "SunLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'SunLiteral' is Incompatible with Datatype 'Boolean'")
                    elif expected_datatype == "Boolean" and self.peek_next_token() == "LuhmanLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'LuhmanLiteral' is Incompatible with Datatype 'Boolean'")
                    elif expected_datatype == "Boolean" and self.peek_next_token() == "StarsysLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Boolean'")
        # Check if variable_entry is None
        elif variable_entry is None:
            return True  # no variable assigned yet

    #check parameter definition's parameter variable assigned values
    def check_parameter_assignment_type(self):
        variable_entry = self.parameter_table.get(self.current_function_name)
        if variable_entry is None:  # no variable assigned yet
            return True

        # Check if variable_entry is a list
        if isinstance(variable_entry, list):
            for entry in variable_entry:
                expected_datatype = entry.get('datatype')
                if self.function_parameter_var in entry.get('var_name'):
                    # Perform semantic checks based on datatype
                    if expected_datatype == "Sun" and self.peek_next_token() == "StarsysLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Sun'")
                    elif expected_datatype == "Sun" and self.peek_next_token() == "True":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Sun'")
                    elif expected_datatype == "Sun" and self.peek_next_token() == "False":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Sun'")
                    elif expected_datatype == "Luhman" and self.peek_next_token() == "StarsysLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Luhman'")
                    elif expected_datatype == "Luhman" and self.peek_next_token() == "True":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Luhman'")
                    elif expected_datatype == "Luhman" and self.peek_next_token() == "False":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Luhman'")
                    elif expected_datatype == "Starsys" and self.peek_next_token() == "LuhmanLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'LuhmanLiteral' is Incompatible with Datatype 'Starsys'")
                    elif expected_datatype == "Starsys" and self.peek_next_token() == "SunLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'SunLiteral' is Incompatible with Datatype 'Starsys'")
                    elif expected_datatype == "Starsys" and self.peek_next_token() == "True":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Starsys'")
                    elif expected_datatype == "Starsys" and self.peek_next_token() == "False":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Starsys'")
                    elif expected_datatype == "Boolean" and self.peek_next_token() == "SunLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'SunLiteral' is Incompatible with Datatype 'Boolean'")
                    elif expected_datatype == "Boolean" and self.peek_next_token() == "LuhmanLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'LuhmanLiteral' is Incompatible with Datatype 'Boolean'")
                    elif expected_datatype == "Boolean" and self.peek_next_token() == "StarsysLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Boolean'")
        # Check if variable_entry is None
        elif variable_entry is None:
            return True  # no variable assigned yet

    # Check if the variable assignment matches the datatype assigned in the parameter for that variable
    def check_function_assignment_type(self):
        variable_entry = self.parameter_table.get(self.current_function_name)
        if variable_entry is None:  # no variable assigned yet
            return True

        # Check if variable_entry is a list
        if isinstance(variable_entry, list):
            for entry in variable_entry:
                expected_datatype = entry.get('datatype')
                if self.function_assignment_variable in entry.get('var_name'):
                    # Perform semantic checks based on datatype
                    if expected_datatype == "Sun" and self.peek_next_token() == "StarsysLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Sun'")
                    elif expected_datatype == "Sun" and self.peek_next_token() == "True":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Sun'")
                    elif expected_datatype == "Sun" and self.peek_next_token() == "False":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Sun'")
                    elif expected_datatype == "Luhman" and self.peek_next_token() == "StarsysLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Luhman'")
                    elif expected_datatype == "Luhman" and self.peek_next_token() == "True":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Luhman'")
                    elif expected_datatype == "Luhman" and self.peek_next_token() == "False":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Luhman'")
                    elif expected_datatype == "Starsys" and self.peek_next_token() == "LuhmanLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'LuhmanLiteral' is Incompatible with Datatype 'Starsys'")
                    elif expected_datatype == "Starsys" and self.peek_next_token() == "SunLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'SunLiteral' is Incompatible with Datatype 'Starsys'")
                    elif expected_datatype == "Starsys" and self.peek_next_token() == "True":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Starsys'")
                    elif expected_datatype == "Starsys" and self.peek_next_token() == "False":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Starsys'")
                    elif expected_datatype == "Boolean" and self.peek_next_token() == "SunLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'SunLiteral' is Incompatible with Datatype 'Boolean'")
                    elif expected_datatype == "Boolean" and self.peek_next_token() == "LuhmanLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'LuhmanLiteral' is Incompatible with Datatype 'Boolean'")
                    elif expected_datatype == "Boolean" and self.peek_next_token() == "StarsysLiteral":
                        self.errors.append(
                            f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Boolean'")
        # Check if variable_entry is None
        elif variable_entry is None:
            return True  # no variable assigned yet

    # check array size, 1D
    def check_array_size(self):
        if self.peek_previous_lexeme() == "{":
            self.errors.append(
                f"(Line {self.line_number}) | Semantic Error: (Invalid Indices) Attempting to assign a single value to all elements of the array without specifying individual indices for variable '{self.array_variable}'"
            )
        else:
            array_size = int(self.peek_previous_lexeme())  # Convert array_size to integer

            if self.array_variable in self.array_variable_table:
                table_size = int(self.array_variable_table[self.array_variable]['array_size'])  # Get size from table
                if array_size >= table_size:
                    self.array_size_error = True
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Out of Bounds) Array index out of bounds for variable '{self.array_variable}'"
                    )

    # check array values if it matches array size, 1D
    def check_array_value(self):
        if self.array_variable in self.array_variable_table:
            table_size = int(self.array_variable_table[self.array_variable]['array_size'])  # Get size from table
            value_count = int(self.array_count_table[self.array_variable]['array_count'])  # Get count of assigned values
            if value_count > table_size and not self.is2DValue:
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Out of Bounds) Array variable '{self.array_variable}' exceeds the amount of values its size can keep"
                )
            else:
                return True

    # check array size, 2D
    def check_array2_size(self):
        if self.peek_previous_lexeme() == "{":
            self.errors.append(
                f"(Line {self.line_number}) | Semantic Error: (Invalid Indices) Attempting to assign a single value to all elements of the array without specifying individual indices for variable '{self.array_variable}'"
            )
        else:
            array2_size = int(self.peek_previous_lexeme())  # Convert array_size to integer

            if self.array_variable in self.array2_variable_table:
                table_size = int(self.array2_variable_table[self.array_variable]['array_size2'])  # Get size from table
                if array2_size >= table_size and not self.array_size_error:
                    self.errors.append(
                        f"(Line {self.line_number}) | Semantic Error: (Out of Bounds) Array index out of bounds for variable '{self.array_variable}'"
                    )

    # check array values if it matches array size, 2D
    def check_array2_value(self):
        if self.array_variable in self.array2_variable_table:
            row_size = int(self.array_variable_table[self.array_variable]['array_size'])  # Get size from table (ROW)
            column_size = int(self.array2_variable_table[self.array_variable]['array_size2'])  # Get size from table (COLUMN)
            row_value_count = int(self.array2_count_row_table[self.array_variable]['array_count_row'])  # Get count of assigned values (ROW)
            column_value_count = int(self.array2_count_column_table[self.array_variable]['array_count_column'])  # Get count of assigned values (COLUMN)
            row_count = int(self.array2_count_column_table[self.array_variable]['row'])  # Get count of rows in 2D array values
            print(column_value_count)
            if row_value_count > row_size:
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Out of Bounds) Array variable '{self.array_variable}' exceeds the amount of values its row size can keep"
                )
            elif column_value_count/row_count > column_size:
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Out of Bounds) Array variable '{self.array_variable}' exceeds the amount of values its column size can keep"
                )
            else:
                return True



    #  array value checking
    def check_array_type(self):
        # Retrieve the scope from the symbol table for the variable
        variable_entry = self.symbol_table.get(self.array_variable)
        if variable_entry is None:  # no variable assigned yet
            return True
        # Perform semantic analysis specific to datatypes and their value
        expected_datatype = variable_entry['datatype']
        if self.array_variable in self.symbol_table:
            # Perform semantic checks based on datatype
            if expected_datatype == "Sun" and self.peek_next_token() == "StarsysLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Sun'")
            elif expected_datatype == "Sun" and self.peek_next_token() == "True":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Sun'")
            elif expected_datatype == "Sun" and self.peek_next_token() == "False":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Sun'")
            elif expected_datatype == "Luhman" and self.peek_next_token() == "StarsysLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Luhman'")
            elif expected_datatype == "Luhman" and self.peek_next_token() == "True":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Luhman'")
            elif expected_datatype == "Luhman" and self.peek_next_token() == "False":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Luhman'")
            elif expected_datatype == "Starsys" and self.peek_next_token() == "LuhmanLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'LuhmanLiteral' is Incompatible with Datatype 'Starsys'")
            elif expected_datatype == "Starsys" and self.peek_next_token() == "SunLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'SunLiteral' is Incompatible with Datatype 'Starsys'")
            elif expected_datatype == "Starsys" and self.peek_next_token() == "True":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Starsys'")
            elif expected_datatype == "Starsys" and self.peek_next_token() == "False":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Starsys'")
            elif expected_datatype == "Boolean" and self.peek_next_token() == "SunLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'SunLiteral' is Incompatible with Datatype 'Boolean'")
            elif expected_datatype == "Boolean" and self.peek_next_token() == "LuhmanLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'LuhmanLiteral' is Incompatible with Datatype 'Boolean'")
            elif expected_datatype == "Boolean" and self.peek_next_token() == "StarsysLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Boolean'")
        # the variable is not declared
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Semantic Error: Variable not declared")

    def check_value_semantics(self):
        # Retrieve the scope from the symbol table for the variable
        variable_entry = self.symbol_table.get(self.var_name)
        # Perform semantic analysis specific to datatypes and their value
        expected_datatype = variable_entry['datatype']
        if self.var_name in self.symbol_table:
            # Perform semantic checks based on datatype
            if expected_datatype == "Sun" and self.peek_next_token() == "StarsysLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Sun'")
            elif expected_datatype == "Sun" and self.peek_next_token() == "True":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Sun'")
            elif expected_datatype == "Sun" and self.peek_next_token() == "False":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Sun'")
            elif expected_datatype == "Luhman" and self.peek_next_token() == "StarsysLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Luhman'")
            elif expected_datatype == "Luhman" and self.peek_next_token() == "True":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Luhman'")
            elif expected_datatype == "Luhman" and self.peek_next_token() == "False":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Luhman'")
            elif expected_datatype == "Starsys" and self.peek_next_token() == "LuhmanLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'LuhmanLiteral' is Incompatible with Datatype 'Starsys'")
            elif expected_datatype == "Starsys" and self.peek_next_token() == "SunLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'SunLiteral' is Incompatible with Datatype 'Starsys'")
            elif expected_datatype == "Starsys" and self.peek_next_token() == "True":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'True' is Incompatible with Datatype 'Starsys'")
            elif expected_datatype == "Starsys" and self.peek_next_token() == "False":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'False' is Incompatible with Datatype 'Starsys'")
            elif expected_datatype == "Boolean" and self.peek_next_token() == "SunLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'SunLiteral' is Incompatible with Datatype 'Boolean'")
            elif expected_datatype == "Boolean" and self.peek_next_token() == "LuhmanLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'LuhmanLiteral' is Incompatible with Datatype 'Boolean'")
            elif expected_datatype == "Boolean" and self.peek_next_token() == "StarsysLiteral":
                self.errors.append(
                    f"(Line {self.line_number}) | Semantic Error: (Type Mismatch) Value 'StarsysLiteral' is Incompatible with Datatype 'Boolean'")
        # the variable is not declared
        else:
            self.errors.append(
                f"(Line {self.line_number}) | Semantic Error: Variable not declared")
            
if __name__ == "__main__":
    errors, tokens = Lexer.read_text('StellarSynth')
    Semantic_analyzer = SemanticAnalyzer(tokens)
    Semantic_analyzer.parse_top_program()
    print(SemanticAnalyzer.errors)
    
'''
Remarks:
Some Bugs still.
'''